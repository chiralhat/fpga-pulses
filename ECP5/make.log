
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Wolf <claire@symbioticeda.com>          |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9+3683 (git sha1 b7d46be4, clang 10.0.0-4ubuntu1 -fPIC -Os)


-- Parsing `pulse_gen.v' using frontend `verilog' --

1. Executing Verilog-2005 frontend: pulse_gen.v
Parsing Verilog input from `pulse_gen.v' to AST representation.
Generating RTLIL representation for module `\pulse_gen'.
Successfully finished Verilog frontend.

-- Parsing `pulses.v' using frontend `verilog' --

2. Executing Verilog-2005 frontend: pulses.v
Parsing Verilog input from `pulses.v' to AST representation.
Generating RTLIL representation for module `\pulses'.
Successfully finished Verilog frontend.

-- Parsing `pulse_control.v' using frontend `verilog' --

3. Executing Verilog-2005 frontend: pulse_control.v
Parsing Verilog input from `pulse_control.v' to AST representation.
Generating RTLIL representation for module `\pulse_control'.
Successfully finished Verilog frontend.

-- Parsing `uart.v' using frontend `verilog' --

4. Executing Verilog-2005 frontend: uart.v
Parsing Verilog input from `uart.v' to AST representation.
Generating RTLIL representation for module `\uart'.
Successfully finished Verilog frontend.

-- Parsing `ecppll.v' using frontend `verilog' --

5. Executing Verilog-2005 frontend: ecppll.v
Parsing Verilog input from `ecppll.v' to AST representation.
Generating RTLIL representation for module `\pll'.
Successfully finished Verilog frontend.

-- Running command `synth_ecp5 -json pulse_gen.json -top pulse_gen' --

6. Executing SYNTH_ECP5 pass.

6.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ecp5/cells_sim.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ecp5/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\LUT4'.
Generating RTLIL representation for module `\$__ABC9_LUT5'.
Generating RTLIL representation for module `\$__ABC9_LUT6'.
Generating RTLIL representation for module `\$__ABC9_LUT7'.
Generating RTLIL representation for module `\L6MUX21'.
Generating RTLIL representation for module `\CCU2C'.
Generating RTLIL representation for module `\TRELLIS_RAM16X2'.
Generating RTLIL representation for module `\PFUMX'.
Generating RTLIL representation for module `\TRELLIS_DPR16X4'.
Generating RTLIL representation for module `\DPR16X4C'.
Generating RTLIL representation for module `\LUT2'.
Generating RTLIL representation for module `\TRELLIS_FF'.
Generating RTLIL representation for module `\TRELLIS_IO'.
Generating RTLIL representation for module `\INV'.
Generating RTLIL representation for module `\TRELLIS_SLICE'.
Generating RTLIL representation for module `\DP16KD'.
Generating RTLIL representation for module `\FD1P3AX'.
Generating RTLIL representation for module `\FD1P3AY'.
Generating RTLIL representation for module `\FD1P3BX'.
Generating RTLIL representation for module `\FD1P3DX'.
Generating RTLIL representation for module `\FD1P3IX'.
Generating RTLIL representation for module `\FD1P3JX'.
Generating RTLIL representation for module `\FD1S3AX'.
Generating RTLIL representation for module `\FD1S3AY'.
Generating RTLIL representation for module `\FD1S3BX'.
Generating RTLIL representation for module `\FD1S3DX'.
Generating RTLIL representation for module `\FD1S3IX'.
Generating RTLIL representation for module `\FD1S3JX'.
Generating RTLIL representation for module `\IFS1P3BX'.
Generating RTLIL representation for module `\IFS1P3DX'.
Generating RTLIL representation for module `\IFS1P3IX'.
Generating RTLIL representation for module `\IFS1P3JX'.
Generating RTLIL representation for module `\OFS1P3BX'.
Generating RTLIL representation for module `\OFS1P3DX'.
Generating RTLIL representation for module `\OFS1P3IX'.
Generating RTLIL representation for module `\OFS1P3JX'.
Generating RTLIL representation for module `\IB'.
Generating RTLIL representation for module `\IBPU'.
Generating RTLIL representation for module `\IBPD'.
Generating RTLIL representation for module `\OB'.
Generating RTLIL representation for module `\OBZ'.
Generating RTLIL representation for module `\OBZPU'.
Generating RTLIL representation for module `\OBZPD'.
Generating RTLIL representation for module `\OBCO'.
Generating RTLIL representation for module `\BB'.
Generating RTLIL representation for module `\BBPU'.
Generating RTLIL representation for module `\BBPD'.
Generating RTLIL representation for module `\ILVDS'.
Generating RTLIL representation for module `\OLVDS'.
Successfully finished Verilog frontend.

6.2. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ecp5/cells_bb.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ecp5/cells_bb.v' to AST representation.
Generating RTLIL representation for module `\MULT18X18D'.
Generating RTLIL representation for module `\ALU54B'.
Generating RTLIL representation for module `\EHXPLLL'.
Generating RTLIL representation for module `\DTR'.
Generating RTLIL representation for module `\OSCG'.
Generating RTLIL representation for module `\USRMCLK'.
Generating RTLIL representation for module `\JTAGG'.
Generating RTLIL representation for module `\DELAYF'.
Generating RTLIL representation for module `\DELAYG'.
Generating RTLIL representation for module `\IDDRX1F'.
Generating RTLIL representation for module `\IDDRX2F'.
Generating RTLIL representation for module `\IDDR71B'.
Generating RTLIL representation for module `\IDDRX2DQA'.
Generating RTLIL representation for module `\ODDRX1F'.
Generating RTLIL representation for module `\ODDRX2F'.
Generating RTLIL representation for module `\ODDR71B'.
Generating RTLIL representation for module `\OSHX2A'.
Generating RTLIL representation for module `\ODDRX2DQA'.
Generating RTLIL representation for module `\ODDRX2DQSB'.
Generating RTLIL representation for module `\TSHX2DQA'.
Generating RTLIL representation for module `\TSHX2DQSA'.
Generating RTLIL representation for module `\DQSBUFM'.
Generating RTLIL representation for module `\DDRDLLA'.
Generating RTLIL representation for module `\CLKDIVF'.
Generating RTLIL representation for module `\ECLKSYNCB'.
Generating RTLIL representation for module `\ECLKBRIDGECS'.
Generating RTLIL representation for module `\DCCA'.
Generating RTLIL representation for module `\DCUA'.
Generating RTLIL representation for module `\EXTREFB'.
Generating RTLIL representation for module `\PCSCLKDIV'.
Generating RTLIL representation for module `\PUR'.
Generating RTLIL representation for module `\GSR'.
Generating RTLIL representation for module `\SGSR'.
Generating RTLIL representation for module `\PDPW16KD'.
Successfully finished Verilog frontend.

6.3. Executing HIERARCHY pass (managing design hierarchy).

6.3.1. Analyzing design hierarchy..
Top module:  \pulse_gen
Used module:     \pulses
Used module:     \pulse_control
Used module:         \uart
Used module:     \pll

6.3.2. Analyzing design hierarchy..
Top module:  \pulse_gen
Used module:     \pulses
Used module:     \pulse_control
Used module:         \uart
Used module:     \pll
Removed 0 unused modules.

6.4. Executing PROC pass (convert processes to netlists).

6.4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:213$327'.
Cleaned up 1 empty switch.

6.4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:350$407 in module TRELLIS_FF.
Removed 2 dead cases from process $proc$uart.v:135$152 in module uart.
Marked 17 switch rules as full_case in process $proc$uart.v:135$152 in module uart.
Removed 1 dead cases from process $proc$pulse_control.v:149$94 in module pulse_control.
Marked 5 switch rules as full_case in process $proc$pulse_control.v:149$94 in module pulse_control.
Marked 1 switch rules as full_case in process $proc$pulses.v:188$14 in module pulses.
Removed a total of 3 dead cases.

6.4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 5 redundant assignments.
Promoted 78 assignments to connections.

6.4.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\TRELLIS_FF.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:0$411'.
  Set init value: \Q = 1'0
Found init rule in `\uart.$proc$uart.v:106$181'.
  Set init value: \tx_state = 2'00
Found init rule in `\uart.$proc$uart.v:105$180'.
  Set init value: \tx_out = 1'1
Found init rule in `\uart.$proc$uart.v:101$179'.
  Set init value: \recv_state = 3'000
Found init rule in `\pulse_control.$proc$pulse_control.v:146$145'.
  Set init value: \state = 3'000
Found init rule in `\pulse_control.$proc$pulse_control.v:130$144'.
  Set init value: \readcount = 6'000000
Found init rule in `\pulse_control.$proc$pulse_control.v:129$143'.
  Set init value: \readstate = 2'00
Found init rule in `\pulse_control.$proc$pulse_control.v:127$141'.
  Set init value: \writestate = 1'0
Found init rule in `\pulse_control.$proc$pulse_control.v:63$140'.
  Set init value: \post_att = 7'1111111
Found init rule in `\pulse_control.$proc$pulse_control.v:62$139'.
  Set init value: \pre_att = 7'0000000
Found init rule in `\pulse_control.$proc$pulse_control.v:57$138'.
  Set init value: \recv_set = 1'0
Found init rule in `\pulse_control.$proc$pulse_control.v:56$137'.
  Set init value: \nut_wid = 8'00101000
Found init rule in `\pulse_control.$proc$pulse_control.v:55$136'.
  Set init value: \nut_del = 16'1110101001100000
Found init rule in `\pulse_control.$proc$pulse_control.v:54$135'.
  Set init value: \rx_done = 1'0
Found init rule in `\pulse_control.$proc$pulse_control.v:53$134'.
  Set init value: \block = 1'1
Found init rule in `\pulse_control.$proc$pulse_control.v:52$133'.
  Set init value: \cpmg = 8'00000001
Found init rule in `\pulse_control.$proc$pulse_control.v:51$132'.
  Set init value: \pulse_block_half = 16'0000000000110010
Found init rule in `\pulse_control.$proc$pulse_control.v:50$131'.
  Set init value: \pulse_block = 8'01100100
Found init rule in `\pulse_control.$proc$pulse_control.v:49$130'.
  Set init value: \p1start2 = 16'0000000000001000
Found init rule in `\pulse_control.$proc$pulse_control.v:48$129'.
  Set init value: \p2width2 = 16'0000000000000000
Found init rule in `\pulse_control.$proc$pulse_control.v:47$128'.
  Set init value: \delay2 = 16'0000000010010110
Found init rule in `\pulse_control.$proc$pulse_control.v:46$127'.
  Set init value: \p1width2 = 16'0000000000110000
Found init rule in `\pulse_control.$proc$pulse_control.v:45$126'.
  Set init value: \p2width = 16'0000000000101000
Found init rule in `\pulse_control.$proc$pulse_control.v:44$125'.
  Set init value: \delay = 16'0000000010010110
Found init rule in `\pulse_control.$proc$pulse_control.v:43$124'.
  Set init value: \p1width = 16'0000000000101000
Found init rule in `\pulse_control.$proc$pulse_control.v:42$123'.
  Set init value: \period = 100000
Found init rule in `\pulses.$proc$pulses.v:113$90'.
  Set init value: \ccount = 8'00000000
Found init rule in `\pulses.$proc$pulses.v:66$89'.
  Set init value: \cw = 1'0
Found init rule in `\pulses.$proc$pulses.v:54$87'.
  Set init value: \counter = 0

6.4.5. Executing PROC_ARST pass (detect async resets in processes).

6.4.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\TRELLIS_FF.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:0$411'.
Creating decoders for process `\TRELLIS_FF.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:350$407'.
     1/1: $0\Q[0:0]
Creating decoders for process `\DPR16X4C.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:0$404'.
Creating decoders for process `\DPR16X4C.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:285$383'.
     1/3: $0$memwr$\ram$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:287$382_EN[3:0]$386
     2/3: $0$memwr$\ram$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:287$382_DATA[3:0]$385
     3/3: $0$memwr$\ram$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:287$382_ADDR[3:0]$384
Creating decoders for process `\TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:0$350'.
Creating decoders for process `\TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:221$328'.
     1/3: $0$memwr$\mem$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:223$326_EN[3:0]$331
     2/3: $0$memwr$\mem$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:223$326_DATA[3:0]$330
     3/3: $0$memwr$\mem$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:223$326_ADDR[3:0]$329
Creating decoders for process `\TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:213$327'.
Creating decoders for process `\uart.$proc$uart.v:106$181'.
Creating decoders for process `\uart.$proc$uart.v:105$180'.
Creating decoders for process `\uart.$proc$uart.v:101$179'.
Creating decoders for process `\uart.$proc$uart.v:135$152'.
     1/57: $5\tx_state[1:0]
     2/57: $5\tx_clk[10:0]
     3/57: $4\tx_data[7:0]
     4/57: $4\tx_out[0:0]
     5/57: $4\tx_bits_remaining[3:0]
     6/57: $3\tx_data[7:0]
     7/57: $3\tx_bits_remaining[3:0]
     8/57: $4\tx_state[1:0]
     9/57: $3\tx_out[0:0]
    10/57: $4\tx_clk[10:0]
    11/57: $3\tx_state[1:0]
    12/57: $2\tx_bits_remaining[3:0]
    13/57: $2\tx_out[0:0]
    14/57: $3\tx_clk[10:0]
    15/57: $2\tx_data[7:0]
    16/57: $1\tx_data[7:0]
    17/57: $1\tx_bits_remaining[3:0]
    18/57: $2\tx_state[1:0]
    19/57: $1\tx_out[0:0]
    20/57: $2\tx_clk[10:0]
    21/57: $9\recv_state[2:0]
    22/57: $8\recv_state[2:0]
    23/57: $8\rx_clk[14:0]
    24/57: $3\rx_data[7:0]
    25/57: $7\recv_state[2:0]
    26/57: $7\rx_clk[14:0]
    27/57: $4\rx_bits_remaining[3:0]
    28/57: $5\rx_sample_countdown[3:0]
    29/57: $6\rx_samples[3:0]
    30/57: $2\rx_data[7:0]
    31/57: $5\rx_samples[3:0]
    32/57: $6\recv_state[2:0]
    33/57: $4\rx_sample_countdown[3:0]
    34/57: $6\rx_clk[14:0]
    35/57: $4\rx_samples[3:0]
    36/57: $3\rx_sample_countdown[3:0]
    37/57: $3\rx_samples[3:0]
    38/57: $5\recv_state[2:0]
    39/57: $3\rx_bits_remaining[3:0]
    40/57: $5\rx_clk[14:0]
    41/57: $2\rx_bits_remaining[3:0]
    42/57: $4\recv_state[2:0]
    43/57: $4\rx_clk[14:0]
    44/57: $2\rx_sample_countdown[3:0]
    45/57: $2\rx_samples[3:0]
    46/57: $3\recv_state[2:0]
    47/57: $3\rx_clk[14:0]
    48/57: $2\recv_state[2:0]
    49/57: $2\rx_clk[14:0]
    50/57: $1\rx_data[7:0]
    51/57: $1\rx_bits_remaining[3:0]
    52/57: $1\rx_sample_countdown[3:0]
    53/57: $1\rx_samples[3:0]
    54/57: $1\tx_clk[10:0]
    55/57: $1\rx_clk[14:0]
    56/57: $1\tx_state[1:0]
    57/57: $1\recv_state[2:0]
Creating decoders for process `\pulse_control.$proc$pulse_control.v:146$145'.
Creating decoders for process `\pulse_control.$proc$pulse_control.v:130$144'.
Creating decoders for process `\pulse_control.$proc$pulse_control.v:129$143'.
Creating decoders for process `\pulse_control.$proc$pulse_control.v:128$142'.
Creating decoders for process `\pulse_control.$proc$pulse_control.v:127$141'.
Creating decoders for process `\pulse_control.$proc$pulse_control.v:63$140'.
Creating decoders for process `\pulse_control.$proc$pulse_control.v:62$139'.
Creating decoders for process `\pulse_control.$proc$pulse_control.v:57$138'.
Creating decoders for process `\pulse_control.$proc$pulse_control.v:56$137'.
Creating decoders for process `\pulse_control.$proc$pulse_control.v:55$136'.
Creating decoders for process `\pulse_control.$proc$pulse_control.v:54$135'.
Creating decoders for process `\pulse_control.$proc$pulse_control.v:53$134'.
Creating decoders for process `\pulse_control.$proc$pulse_control.v:52$133'.
Creating decoders for process `\pulse_control.$proc$pulse_control.v:51$132'.
Creating decoders for process `\pulse_control.$proc$pulse_control.v:50$131'.
Creating decoders for process `\pulse_control.$proc$pulse_control.v:49$130'.
Creating decoders for process `\pulse_control.$proc$pulse_control.v:48$129'.
Creating decoders for process `\pulse_control.$proc$pulse_control.v:47$128'.
Creating decoders for process `\pulse_control.$proc$pulse_control.v:46$127'.
Creating decoders for process `\pulse_control.$proc$pulse_control.v:45$126'.
Creating decoders for process `\pulse_control.$proc$pulse_control.v:44$125'.
Creating decoders for process `\pulse_control.$proc$pulse_control.v:43$124'.
Creating decoders for process `\pulse_control.$proc$pulse_control.v:42$123'.
Creating decoders for process `\pulse_control.$proc$pulse_control.v:149$94'.
     1/39: $2\rx_done[0:0]
     2/39: $4$bitselwrite$data$pulse_control.v:164$93[31:0]$105
     3/39: $4$bitselwrite$mask$pulse_control.v:164$92[31:0]$104
     4/39: $4\vinput[31:0]
     5/39: $3$bitselwrite$data$pulse_control.v:164$93[31:0]$102
     6/39: $3$bitselwrite$mask$pulse_control.v:164$92[31:0]$101
     7/39: $3\vinput[31:0]
     8/39: $2$bitselwrite$data$pulse_control.v:164$93[31:0]$100
     9/39: $2$bitselwrite$mask$pulse_control.v:164$92[31:0]$99
    10/39: $2\vinput[31:0]
    11/39: $1$bitselwrite$data$pulse_control.v:164$93[31:0]$98
    12/39: $1$bitselwrite$mask$pulse_control.v:164$92[31:0]$97
    13/39: $1\vinput[31:0]
    14/39: $1\voutput[7:0]
    15/39: $1\rx_done[0:0]
    16/39: $0\state[2:0]
    17/39: $0\readcount[5:0]
    18/39: $0\readstate[1:0]
    19/39: $0\writestate[0:0]
    20/39: $0\vcontrol[7:0]
    21/39: $0\tx_byte[7:0]
    22/39: $0\transmit[0:0]
    23/39: $0\recv_set[0:0]
    24/39: $0\cpmg[7:0]
    25/39: $0\pulse_block_half[15:0]
    26/39: $0\pulse_block[7:0]
    27/39: $0\block[0:0]
    28/39: $0\nut_wid[7:0]
    29/39: $0\nut_del[15:0]
    30/39: $0\p2width2[15:0]
    31/39: $0\delay2[15:0]
    32/39: $0\p1width2[15:0]
    33/39: $0\p1start2[15:0]
    34/39: $0\p2width[15:0]
    35/39: $0\delay[15:0]
    36/39: $0\p1width[15:0]
    37/39: $0\period[31:0]
    38/39: $0\post_att[6:0]
    39/39: $0\pre_att[6:0]
Creating decoders for process `\pulses.$proc$pulses.v:119$91'.
Creating decoders for process `\pulses.$proc$pulses.v:113$90'.
Creating decoders for process `\pulses.$proc$pulses.v:66$89'.
Creating decoders for process `\pulses.$proc$pulses.v:65$88'.
Creating decoders for process `\pulses.$proc$pulses.v:54$87'.
Creating decoders for process `\pulses.$proc$pulses.v:188$14'.
     1/12: $0\pre_att_val[6:0]
     2/12: $0\inh[0:0]
     3/12: $0\sync[0:0]
     4/12: $0\pulse2s[0:0]
     5/12: $0\pulses[0:0]
     6/12: $0\cblock_on[31:0]
     7/12: $0\cblock_delay[31:0]
     8/12: $0\cpulse[31:0]
     9/12: $0\cdelay[31:0]
    10/12: $0\ccount[7:0]
    11/12: $0\sync_down[15:0]
    12/12: $0\nut_pulse[0:0]
Creating decoders for process `\pulses.$proc$pulses.v:133$1'.

6.4.7. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\pulse_control.\writecount' from process `\pulse_control.$proc$pulse_control.v:128$142'.
No latch inferred for signal `\pulses.\xfer_bits' from process `\pulses.$proc$pulses.v:119$91'.
No latch inferred for signal `\pulses.\rec' from process `\pulses.$proc$pulses.v:65$88'.

6.4.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\TRELLIS_FF.\Q' using process `\TRELLIS_FF.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:350$407'.
  created $dff cell `$procdff$1420' with positive edge clock.
Creating register for signal `\DPR16X4C.\i' using process `\DPR16X4C.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:0$404'.
  created direct connection (no actual register cell created).
Creating register for signal `\DPR16X4C.$memwr$\ram$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:287$382_ADDR' using process `\DPR16X4C.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:285$383'.
  created $dff cell `$procdff$1421' with positive edge clock.
Creating register for signal `\DPR16X4C.$memwr$\ram$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:287$382_DATA' using process `\DPR16X4C.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:285$383'.
  created $dff cell `$procdff$1422' with positive edge clock.
Creating register for signal `\DPR16X4C.$memwr$\ram$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:287$382_EN' using process `\DPR16X4C.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:285$383'.
  created $dff cell `$procdff$1423' with positive edge clock.
Creating register for signal `\TRELLIS_DPR16X4.\i' using process `\TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:0$350'.
  created direct connection (no actual register cell created).
Creating register for signal `\TRELLIS_DPR16X4.$memwr$\mem$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:223$326_ADDR' using process `\TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:221$328'.
  created $dff cell `$procdff$1424' with positive edge clock.
Creating register for signal `\TRELLIS_DPR16X4.$memwr$\mem$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:223$326_DATA' using process `\TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:221$328'.
  created $dff cell `$procdff$1425' with positive edge clock.
Creating register for signal `\TRELLIS_DPR16X4.$memwr$\mem$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:223$326_EN' using process `\TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:221$328'.
  created $dff cell `$procdff$1426' with positive edge clock.
Creating register for signal `\TRELLIS_DPR16X4.\muxwre' using process `\TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:213$327'.
  created direct connection (no actual register cell created).
Creating register for signal `\uart.\rx_samples' using process `\uart.$proc$uart.v:135$152'.
  created $dff cell `$procdff$1427' with positive edge clock.
Creating register for signal `\uart.\rx_sample_countdown' using process `\uart.$proc$uart.v:135$152'.
  created $dff cell `$procdff$1428' with positive edge clock.
Creating register for signal `\uart.\rx_clk' using process `\uart.$proc$uart.v:135$152'.
  created $dff cell `$procdff$1429' with positive edge clock.
Creating register for signal `\uart.\tx_clk' using process `\uart.$proc$uart.v:135$152'.
  created $dff cell `$procdff$1430' with positive edge clock.
Creating register for signal `\uart.\recv_state' using process `\uart.$proc$uart.v:135$152'.
  created $dff cell `$procdff$1431' with positive edge clock.
Creating register for signal `\uart.\rx_bits_remaining' using process `\uart.$proc$uart.v:135$152'.
  created $dff cell `$procdff$1432' with positive edge clock.
Creating register for signal `\uart.\rx_data' using process `\uart.$proc$uart.v:135$152'.
  created $dff cell `$procdff$1433' with positive edge clock.
Creating register for signal `\uart.\tx_out' using process `\uart.$proc$uart.v:135$152'.
  created $dff cell `$procdff$1434' with positive edge clock.
Creating register for signal `\uart.\tx_state' using process `\uart.$proc$uart.v:135$152'.
  created $dff cell `$procdff$1435' with positive edge clock.
Creating register for signal `\uart.\tx_bits_remaining' using process `\uart.$proc$uart.v:135$152'.
  created $dff cell `$procdff$1436' with positive edge clock.
Creating register for signal `\uart.\tx_data' using process `\uart.$proc$uart.v:135$152'.
  created $dff cell `$procdff$1437' with positive edge clock.
Creating register for signal `\pulse_control.\pre_att' using process `\pulse_control.$proc$pulse_control.v:149$94'.
  created $dff cell `$procdff$1438' with positive edge clock.
Creating register for signal `\pulse_control.\post_att' using process `\pulse_control.$proc$pulse_control.v:149$94'.
  created $dff cell `$procdff$1439' with positive edge clock.
Creating register for signal `\pulse_control.\period' using process `\pulse_control.$proc$pulse_control.v:149$94'.
  created $dff cell `$procdff$1440' with positive edge clock.
Creating register for signal `\pulse_control.\p1width' using process `\pulse_control.$proc$pulse_control.v:149$94'.
  created $dff cell `$procdff$1441' with positive edge clock.
Creating register for signal `\pulse_control.\delay' using process `\pulse_control.$proc$pulse_control.v:149$94'.
  created $dff cell `$procdff$1442' with positive edge clock.
Creating register for signal `\pulse_control.\p2width' using process `\pulse_control.$proc$pulse_control.v:149$94'.
  created $dff cell `$procdff$1443' with positive edge clock.
Creating register for signal `\pulse_control.\p1start2' using process `\pulse_control.$proc$pulse_control.v:149$94'.
  created $dff cell `$procdff$1444' with positive edge clock.
Creating register for signal `\pulse_control.\p1width2' using process `\pulse_control.$proc$pulse_control.v:149$94'.
  created $dff cell `$procdff$1445' with positive edge clock.
Creating register for signal `\pulse_control.\delay2' using process `\pulse_control.$proc$pulse_control.v:149$94'.
  created $dff cell `$procdff$1446' with positive edge clock.
Creating register for signal `\pulse_control.\p2width2' using process `\pulse_control.$proc$pulse_control.v:149$94'.
  created $dff cell `$procdff$1447' with positive edge clock.
Creating register for signal `\pulse_control.\nut_del' using process `\pulse_control.$proc$pulse_control.v:149$94'.
  created $dff cell `$procdff$1448' with positive edge clock.
Creating register for signal `\pulse_control.\nut_wid' using process `\pulse_control.$proc$pulse_control.v:149$94'.
  created $dff cell `$procdff$1449' with positive edge clock.
Creating register for signal `\pulse_control.\block' using process `\pulse_control.$proc$pulse_control.v:149$94'.
  created $dff cell `$procdff$1450' with positive edge clock.
Creating register for signal `\pulse_control.\pulse_block' using process `\pulse_control.$proc$pulse_control.v:149$94'.
  created $dff cell `$procdff$1451' with positive edge clock.
Creating register for signal `\pulse_control.\pulse_block_half' using process `\pulse_control.$proc$pulse_control.v:149$94'.
  created $dff cell `$procdff$1452' with positive edge clock.
Creating register for signal `\pulse_control.\cpmg' using process `\pulse_control.$proc$pulse_control.v:149$94'.
  created $dff cell `$procdff$1453' with positive edge clock.
Creating register for signal `\pulse_control.\rx_done' using process `\pulse_control.$proc$pulse_control.v:149$94'.
  created $dff cell `$procdff$1454' with positive edge clock.
Creating register for signal `\pulse_control.\recv_set' using process `\pulse_control.$proc$pulse_control.v:149$94'.
  created $dff cell `$procdff$1455' with positive edge clock.
Creating register for signal `\pulse_control.\transmit' using process `\pulse_control.$proc$pulse_control.v:149$94'.
  created $dff cell `$procdff$1456' with positive edge clock.
Creating register for signal `\pulse_control.\tx_byte' using process `\pulse_control.$proc$pulse_control.v:149$94'.
  created $dff cell `$procdff$1457' with positive edge clock.
Creating register for signal `\pulse_control.\vinput' using process `\pulse_control.$proc$pulse_control.v:149$94'.
  created $dff cell `$procdff$1458' with positive edge clock.
Creating register for signal `\pulse_control.\vcontrol' using process `\pulse_control.$proc$pulse_control.v:149$94'.
  created $dff cell `$procdff$1459' with positive edge clock.
Creating register for signal `\pulse_control.\voutput' using process `\pulse_control.$proc$pulse_control.v:149$94'.
  created $dff cell `$procdff$1460' with positive edge clock.
Creating register for signal `\pulse_control.\writestate' using process `\pulse_control.$proc$pulse_control.v:149$94'.
  created $dff cell `$procdff$1461' with positive edge clock.
Creating register for signal `\pulse_control.\readstate' using process `\pulse_control.$proc$pulse_control.v:149$94'.
  created $dff cell `$procdff$1462' with positive edge clock.
Creating register for signal `\pulse_control.\readcount' using process `\pulse_control.$proc$pulse_control.v:149$94'.
  created $dff cell `$procdff$1463' with positive edge clock.
Creating register for signal `\pulse_control.\state' using process `\pulse_control.$proc$pulse_control.v:149$94'.
  created $dff cell `$procdff$1464' with positive edge clock.
Creating register for signal `\pulse_control.$bitselwrite$mask$pulse_control.v:164$92' using process `\pulse_control.$proc$pulse_control.v:149$94'.
  created $dff cell `$procdff$1465' with positive edge clock.
Creating register for signal `\pulse_control.$bitselwrite$data$pulse_control.v:164$93' using process `\pulse_control.$proc$pulse_control.v:149$94'.
  created $dff cell `$procdff$1466' with positive edge clock.
Creating register for signal `\pulses.\pre_att_val' using process `\pulses.$proc$pulses.v:188$14'.
  created $dff cell `$procdff$1467' with positive edge clock.
Creating register for signal `\pulses.\pulses' using process `\pulses.$proc$pulses.v:188$14'.
  created $dff cell `$procdff$1468' with positive edge clock.
Creating register for signal `\pulses.\counter' using process `\pulses.$proc$pulses.v:188$14'.
  created $dff cell `$procdff$1469' with positive edge clock.
Creating register for signal `\pulses.\sync' using process `\pulses.$proc$pulses.v:188$14'.
  created $dff cell `$procdff$1470' with positive edge clock.
Creating register for signal `\pulses.\pulse' using process `\pulses.$proc$pulses.v:188$14'.
  created $dff cell `$procdff$1471' with positive edge clock.
Creating register for signal `\pulses.\pulse2' using process `\pulses.$proc$pulses.v:188$14'.
  created $dff cell `$procdff$1472' with positive edge clock.
Creating register for signal `\pulses.\pulse2s' using process `\pulses.$proc$pulses.v:188$14'.
  created $dff cell `$procdff$1473' with positive edge clock.
Creating register for signal `\pulses.\nut_pulse' using process `\pulses.$proc$pulses.v:188$14'.
  created $dff cell `$procdff$1474' with positive edge clock.
Creating register for signal `\pulses.\pr_inh' using process `\pulses.$proc$pulses.v:188$14'.
  created $dff cell `$procdff$1475' with positive edge clock.
Creating register for signal `\pulses.\inh' using process `\pulses.$proc$pulses.v:188$14'.
  created $dff cell `$procdff$1476' with positive edge clock.
Creating register for signal `\pulses.\sync_down' using process `\pulses.$proc$pulses.v:188$14'.
  created $dff cell `$procdff$1477' with positive edge clock.
Creating register for signal `\pulses.\ccount' using process `\pulses.$proc$pulses.v:188$14'.
  created $dff cell `$procdff$1478' with positive edge clock.
Creating register for signal `\pulses.\cdelay' using process `\pulses.$proc$pulses.v:188$14'.
  created $dff cell `$procdff$1479' with positive edge clock.
Creating register for signal `\pulses.\cpulse' using process `\pulses.$proc$pulses.v:188$14'.
  created $dff cell `$procdff$1480' with positive edge clock.
Creating register for signal `\pulses.\cblock_delay' using process `\pulses.$proc$pulses.v:188$14'.
  created $dff cell `$procdff$1481' with positive edge clock.
Creating register for signal `\pulses.\cblock_on' using process `\pulses.$proc$pulses.v:188$14'.
  created $dff cell `$procdff$1482' with positive edge clock.
Creating register for signal `\pulses.\period' using process `\pulses.$proc$pulses.v:133$1'.
  created $dff cell `$procdff$1483' with positive edge clock.
Creating register for signal `\pulses.\p1width' using process `\pulses.$proc$pulses.v:133$1'.
  created $dff cell `$procdff$1484' with positive edge clock.
Creating register for signal `\pulses.\delay' using process `\pulses.$proc$pulses.v:133$1'.
  created $dff cell `$procdff$1485' with positive edge clock.
Creating register for signal `\pulses.\p2width' using process `\pulses.$proc$pulses.v:133$1'.
  created $dff cell `$procdff$1486' with positive edge clock.
Creating register for signal `\pulses.\p1start2' using process `\pulses.$proc$pulses.v:133$1'.
  created $dff cell `$procdff$1487' with positive edge clock.
Creating register for signal `\pulses.\p1width2' using process `\pulses.$proc$pulses.v:133$1'.
  created $dff cell `$procdff$1488' with positive edge clock.
Creating register for signal `\pulses.\p2width2' using process `\pulses.$proc$pulses.v:133$1'.
  created $dff cell `$procdff$1489' with positive edge clock.
Creating register for signal `\pulses.\block' using process `\pulses.$proc$pulses.v:133$1'.
  created $dff cell `$procdff$1490' with positive edge clock.
Creating register for signal `\pulses.\pulse_block' using process `\pulses.$proc$pulses.v:133$1'.
  created $dff cell `$procdff$1491' with positive edge clock.
Creating register for signal `\pulses.\pulse_block_half' using process `\pulses.$proc$pulses.v:133$1'.
  created $dff cell `$procdff$1492' with positive edge clock.
Creating register for signal `\pulses.\cpmg' using process `\pulses.$proc$pulses.v:133$1'.
  created $dff cell `$procdff$1493' with positive edge clock.
Creating register for signal `\pulses.\cw' using process `\pulses.$proc$pulses.v:133$1'.
  created $dff cell `$procdff$1494' with positive edge clock.
Creating register for signal `\pulses.\p2start2' using process `\pulses.$proc$pulses.v:133$1'.
  created $dff cell `$procdff$1495' with positive edge clock.
Creating register for signal `\pulses.\p2stop2' using process `\pulses.$proc$pulses.v:133$1'.
  created $dff cell `$procdff$1496' with positive edge clock.
Creating register for signal `\pulses.\p2start' using process `\pulses.$proc$pulses.v:133$1'.
  created $dff cell `$procdff$1497' with positive edge clock.
Creating register for signal `\pulses.\sdown' using process `\pulses.$proc$pulses.v:133$1'.
  created $dff cell `$procdff$1498' with positive edge clock.
Creating register for signal `\pulses.\block_off' using process `\pulses.$proc$pulses.v:133$1'.
  created $dff cell `$procdff$1499' with positive edge clock.
Creating register for signal `\pulses.\block_on' using process `\pulses.$proc$pulses.v:133$1'.
  created $dff cell `$procdff$1500' with positive edge clock.
Creating register for signal `\pulses.\nutation_pulse_width' using process `\pulses.$proc$pulses.v:133$1'.
  created $dff cell `$procdff$1501' with positive edge clock.
Creating register for signal `\pulses.\nutation_pulse_delay' using process `\pulses.$proc$pulses.v:133$1'.
  created $dff cell `$procdff$1502' with positive edge clock.
Creating register for signal `\pulses.\nutation_pulse_start' using process `\pulses.$proc$pulses.v:133$1'.
  created $dff cell `$procdff$1503' with positive edge clock.
Creating register for signal `\pulses.\nutation_pulse_stop' using process `\pulses.$proc$pulses.v:133$1'.
  created $dff cell `$procdff$1504' with positive edge clock.

6.4.9. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `TRELLIS_FF.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:0$411'.
Found and cleaned up 2 empty switches in `\TRELLIS_FF.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:350$407'.
Removing empty process `TRELLIS_FF.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:350$407'.
Removing empty process `DPR16X4C.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:0$404'.
Found and cleaned up 1 empty switch in `\DPR16X4C.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:285$383'.
Removing empty process `DPR16X4C.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:285$383'.
Removing empty process `TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:0$350'.
Found and cleaned up 1 empty switch in `\TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:221$328'.
Removing empty process `TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:221$328'.
Removing empty process `TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:213$327'.
Removing empty process `uart.$proc$uart.v:106$181'.
Removing empty process `uart.$proc$uart.v:105$180'.
Removing empty process `uart.$proc$uart.v:101$179'.
Found and cleaned up 17 empty switches in `\uart.$proc$uart.v:135$152'.
Removing empty process `uart.$proc$uart.v:135$152'.
Removing empty process `pulse_control.$proc$pulse_control.v:146$145'.
Removing empty process `pulse_control.$proc$pulse_control.v:130$144'.
Removing empty process `pulse_control.$proc$pulse_control.v:129$143'.
Removing empty process `pulse_control.$proc$pulse_control.v:128$142'.
Removing empty process `pulse_control.$proc$pulse_control.v:127$141'.
Removing empty process `pulse_control.$proc$pulse_control.v:63$140'.
Removing empty process `pulse_control.$proc$pulse_control.v:62$139'.
Removing empty process `pulse_control.$proc$pulse_control.v:57$138'.
Removing empty process `pulse_control.$proc$pulse_control.v:56$137'.
Removing empty process `pulse_control.$proc$pulse_control.v:55$136'.
Removing empty process `pulse_control.$proc$pulse_control.v:54$135'.
Removing empty process `pulse_control.$proc$pulse_control.v:53$134'.
Removing empty process `pulse_control.$proc$pulse_control.v:52$133'.
Removing empty process `pulse_control.$proc$pulse_control.v:51$132'.
Removing empty process `pulse_control.$proc$pulse_control.v:50$131'.
Removing empty process `pulse_control.$proc$pulse_control.v:49$130'.
Removing empty process `pulse_control.$proc$pulse_control.v:48$129'.
Removing empty process `pulse_control.$proc$pulse_control.v:47$128'.
Removing empty process `pulse_control.$proc$pulse_control.v:46$127'.
Removing empty process `pulse_control.$proc$pulse_control.v:45$126'.
Removing empty process `pulse_control.$proc$pulse_control.v:44$125'.
Removing empty process `pulse_control.$proc$pulse_control.v:43$124'.
Removing empty process `pulse_control.$proc$pulse_control.v:42$123'.
Found and cleaned up 9 empty switches in `\pulse_control.$proc$pulse_control.v:149$94'.
Removing empty process `pulse_control.$proc$pulse_control.v:149$94'.
Removing empty process `pulses.$proc$pulses.v:119$91'.
Removing empty process `pulses.$proc$pulses.v:113$90'.
Removing empty process `pulses.$proc$pulses.v:66$89'.
Removing empty process `pulses.$proc$pulses.v:65$88'.
Removing empty process `pulses.$proc$pulses.v:54$87'.
Found and cleaned up 4 empty switches in `\pulses.$proc$pulses.v:188$14'.
Removing empty process `pulses.$proc$pulses.v:188$14'.
Removing empty process `pulses.$proc$pulses.v:133$1'.
Cleaned up 34 empty switches.

6.5. Executing FLATTEN pass (flatten design).
Deleting now unused module pll.
Deleting now unused module uart.
Deleting now unused module pulse_control.
Deleting now unused module pulses.
<suppressed ~4 debug messages>

6.6. Executing TRIBUF pass.

6.7. Executing DEMINOUT pass (demote inout ports to input or output).

6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_gen.
<suppressed ~103 debug messages>

6.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_gen..
Removed 69 unused cells and 359 unused wires.
<suppressed ~86 debug messages>

6.10. Executing CHECK pass (checking for obvious problems).
checking module pulse_gen..
Warning: Wire pulse_gen.\post_att [6] is used but has no driver.
Warning: Wire pulse_gen.\post_att [5] is used but has no driver.
Warning: Wire pulse_gen.\post_att [4] is used but has no driver.
Warning: Wire pulse_gen.\post_att [3] is used but has no driver.
Warning: Wire pulse_gen.\post_att [2] is used but has no driver.
Warning: Wire pulse_gen.\post_att [1] is used but has no driver.
Warning: Wire pulse_gen.\post_att [0] is used but has no driver.
found and reported 7 problems.

6.11. Executing OPT pass (performing simple optimizations).

6.11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_gen.

6.11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pulse_gen'.
<suppressed ~534 debug messages>
Removed a total of 178 cells.

6.11.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \pulse_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port A of cell $flatten\control.$procmux$1138: \control.writestate -> 1'0
      Replacing known input bits on port B of cell $flatten\control.$procmux$1136: \control.writestate -> 1'1
      Replacing known input bits on port B of cell $flatten\control.$procmux$1140: \control.writestate -> 1'0
  Analyzing evaluation results.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$435.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$437.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$445.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$447.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$455.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$457.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$465.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$467.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$475.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$477.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$484.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$491.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$498.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$505.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$512.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$520.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$528.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$536.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$544.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$552.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$585.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$595.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$597.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$607.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$609.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$619.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$621.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$630.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$639.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$648.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$657.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$666.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$675.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$686.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$688.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$698.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$708.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$718.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$728.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$740.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$742.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$754.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$756.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$768.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$770.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$782.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$784.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$796.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$798.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$809.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$820.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$831.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$842.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$853.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$865.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$877.
    dead port 2/2 on $mux $flatten\control.$procmux$1028.
    dead port 2/2 on $mux $flatten\control.$procmux$1030.
    dead port 2/2 on $mux $flatten\control.$procmux$1057.
    dead port 2/2 on $mux $flatten\control.$procmux$990.
    dead port 2/2 on $mux $flatten\control.$procmux$992.
    dead port 2/2 on $mux $flatten\control.$procmux$994.
Removed 62 multiplexer ports.
<suppressed ~50 debug messages>

6.11.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \pulse_gen.
    New ctrl vector for $pmux cell $flatten\control.\uart0.$procmux$559: { $flatten\control.\uart0.$procmux$521_CMP $flatten\control.\uart0.$procmux$438_CMP $auto$opt_reduce.cc:134:opt_mux$1506 }
    New ctrl vector for $pmux cell $flatten\control.\uart0.$procmux$569: { $flatten\control.\uart0.$procmux$521_CMP $flatten\control.\uart0.$procmux$438_CMP $auto$opt_reduce.cc:134:opt_mux$1508 }
    New ctrl vector for $pmux cell $flatten\control.\uart0.$procmux$574: { $flatten\control.\uart0.$procmux$521_CMP $flatten\control.\uart0.$procmux$438_CMP $auto$opt_reduce.cc:134:opt_mux$1510 }
    New ctrl vector for $pmux cell $flatten\control.\uart0.$procmux$888: { $flatten\control.\uart0.$procmux$866_CMP $flatten\control.\uart0.$procmux$743_CMP $flatten\control.\uart0.$procmux$689_CMP $flatten\control.\uart0.$procmux$598_CMP $flatten\control.\uart0.$procmux$882_CMP $auto$opt_reduce.cc:134:opt_mux$1512 }
    New ctrl vector for $pmux cell $flatten\control.\uart0.$procmux$897: { $flatten\control.\uart0.$procmux$598_CMP $auto$opt_reduce.cc:134:opt_mux$1514 }
    New ctrl vector for $pmux cell $flatten\control.\uart0.$procmux$906: { $flatten\control.\uart0.$procmux$743_CMP $flatten\control.\uart0.$procmux$598_CMP $auto$opt_reduce.cc:134:opt_mux$1516 }
    New ctrl vector for $pmux cell $flatten\control.\uart0.$procmux$915: { $flatten\control.\uart0.$procmux$743_CMP $flatten\control.\uart0.$procmux$689_CMP $flatten\control.\uart0.$procmux$598_CMP $auto$opt_reduce.cc:134:opt_mux$1518 }
    New ctrl vector for $pmux cell $flatten\control.\uart0.$procmux$924: { $flatten\control.\uart0.$procmux$743_CMP $flatten\control.\uart0.$procmux$689_CMP $flatten\control.\uart0.$procmux$598_CMP $auto$opt_reduce.cc:134:opt_mux$1520 }
    New ctrl vector for $pmux cell $flatten\control.$procmux$1104: { $flatten\control.$procmux$1031_CMP $auto$opt_reduce.cc:134:opt_mux$1522 }
    New ctrl vector for $pmux cell $flatten\control.\uart0.$procmux$554: { $flatten\control.\uart0.$procmux$521_CMP $flatten\control.\uart0.$procmux$438_CMP $auto$opt_reduce.cc:134:opt_mux$1524 }
  Optimizing cells in module \pulse_gen.
Performed a total of 10 changes.

6.11.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pulse_gen'.
<suppressed ~12 debug messages>
Removed a total of 4 cells.

6.11.6. Executing OPT_DFF pass (perform DFF optimizations).

6.11.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_gen..
Removed 0 unused cells and 244 unused wires.
<suppressed ~1 debug messages>

6.11.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_gen.

6.11.9. Rerunning OPT passes. (Maybe there is more to do..)

6.11.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \pulse_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~50 debug messages>

6.11.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \pulse_gen.
Performed a total of 0 changes.

6.11.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pulse_gen'.
Removed a total of 0 cells.

6.11.13. Executing OPT_DFF pass (perform DFF optimizations).

6.11.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_gen..

6.11.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_gen.

6.11.16. Finished OPT passes. (There is nothing left to do.)

6.12. Executing FSM pass (extract and optimize FSM).

6.12.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking pulse_gen.control.readstate as FSM state register:
    Register has an initialization value.
Not marking pulse_gen.control.state as FSM state register:
    Register has an initialization value.
    Circuit seems to be self-resetting.
Not marking pulse_gen.control.uart0.recv_state as FSM state register:
    Register has an initialization value.
    Circuit seems to be self-resetting.
Not marking pulse_gen.control.uart0.tx_state as FSM state register:
    Users of register don't seem to benefit from recoding.
    Register has an initialization value.
    Circuit seems to be self-resetting.

6.12.2. Executing FSM_EXTRACT pass (extracting FSM from design).

6.12.3. Executing FSM_OPT pass (simple optimizations of FSMs).

6.12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_gen..

6.12.5. Executing FSM_OPT pass (simple optimizations of FSMs).

6.12.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

6.12.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

6.12.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

6.13. Executing OPT pass (performing simple optimizations).

6.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_gen.

6.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pulse_gen'.
Removed a total of 0 cells.

6.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \pulse_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~50 debug messages>

6.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \pulse_gen.
Performed a total of 0 changes.

6.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pulse_gen'.
Removed a total of 0 cells.

6.13.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $flatten\pulses.$procdff$1482 ($dff) from module pulse_gen (D = $flatten\pulses.$procmux$1362_Y, Q = \pulses.cblock_on).
Adding EN signal on $flatten\pulses.$procdff$1481 ($dff) from module pulse_gen (D = $flatten\pulses.$procmux$1373_Y, Q = \pulses.cblock_delay).
Adding EN signal on $flatten\pulses.$procdff$1480 ($dff) from module pulse_gen (D = $flatten\pulses.$procmux$1383_Y, Q = \pulses.cpulse).
Adding SRST signal on $auto$opt_dff.cc:764:run$1555 ($dffe) from module pulse_gen (D = $flatten\pulses.$procmux$1381_Y [31:16], Q = \pulses.cpulse [31:16], rval = 16'0000000000000000).
Adding EN signal on $flatten\pulses.$procdff$1479 ($dff) from module pulse_gen (D = $flatten\pulses.$procmux$1393_Y, Q = \pulses.cdelay).
Adding EN signal on $flatten\pulses.$procdff$1478 ($dff) from module pulse_gen (D = $flatten\pulses.$procmux$1402_Y, Q = \pulses.ccount).
Adding SRST signal on $auto$opt_dff.cc:764:run$1574 ($dffe) from module pulse_gen (D = $flatten\pulses.$procmux$1400_Y, Q = \pulses.ccount, rval = 8'00000000).
Adding EN signal on $flatten\pulses.$procdff$1477 ($dff) from module pulse_gen (D = $flatten\pulses.$procmux$1412_Y, Q = \pulses.sync_down).
Adding SRST signal on $flatten\pulses.$procdff$1476 ($dff) from module pulse_gen (D = $flatten\pulses.$ternary$pulses.v:222$39_Y [0], Q = \pulses.inh, rval = 1'0).
Adding EN signal on $auto$opt_dff.cc:702:run$1585 ($sdff) from module pulse_gen (D = $flatten\pulses.$ternary$pulses.v:222$39_Y [0], Q = \pulses.inh).
Adding EN signal on $flatten\pulses.$procdff$1474 ($dff) from module pulse_gen (D = $flatten\pulses.$ternary$pulses.v:226$43_Y [0], Q = \pulses.nut_pulse).
Adding SRST signal on $auto$opt_dff.cc:764:run$1593 ($dffe) from module pulse_gen (D = $flatten\pulses.$ternary$pulses.v:227$42_Y [0], Q = \pulses.nut_pulse, rval = 1'0).
Adding SRST signal on $flatten\pulses.$procdff$1473 ($dff) from module pulse_gen (D = $flatten\pulses.$ternary$pulses.v:230$50_Y [0], Q = \pulses.pulse2s, rval = 1'0).
Adding SRST signal on $flatten\pulses.$procdff$1469 ($dff) from module pulse_gen (D = $flatten\pulses.$add$pulses.v:317$83_Y, Q = \pulses.counter, rval = 0).
Adding SRST signal on $flatten\pulses.$procdff$1468 ($dff) from module pulse_gen (D = $flatten\pulses.$ternary$pulses.v:219$27_Y [0], Q = \pulses.pulses, rval = 1'1).
Adding EN signal on $flatten\control.\uart0.$procdff$1437 ($dff) from module pulse_gen (D = $flatten\control.\uart0.$0\tx_data[7:0], Q = \control.uart0.tx_data).
Adding EN signal on $flatten\control.\uart0.$procdff$1436 ($dff) from module pulse_gen (D = $flatten\control.\uart0.$0\tx_bits_remaining[3:0], Q = \control.uart0.tx_bits_remaining).
Adding EN signal on $flatten\control.\uart0.$procdff$1435 ($dff) from module pulse_gen (D = $flatten\control.\uart0.$0\tx_state[1:0], Q = \control.uart0.tx_state).
Adding EN signal on $flatten\control.\uart0.$procdff$1434 ($dff) from module pulse_gen (D = $flatten\control.\uart0.$0\tx_out[0:0], Q = \control.uart0.tx_out).
Adding EN signal on $flatten\control.\uart0.$procdff$1433 ($dff) from module pulse_gen (D = $flatten\control.\uart0.$0\rx_data[7:0], Q = \control.uart0.rx_data).
Adding EN signal on $flatten\control.\uart0.$procdff$1432 ($dff) from module pulse_gen (D = $flatten\control.\uart0.$0\rx_bits_remaining[3:0], Q = \control.uart0.rx_bits_remaining).
Adding EN signal on $flatten\control.\uart0.$procdff$1431 ($dff) from module pulse_gen (D = $flatten\control.\uart0.$0\recv_state[2:0], Q = \control.uart0.recv_state).
Adding EN signal on $flatten\control.\uart0.$procdff$1428 ($dff) from module pulse_gen (D = $flatten\control.\uart0.$0\rx_sample_countdown[3:0], Q = \control.uart0.rx_sample_countdown).
Adding EN signal on $flatten\control.\uart0.$procdff$1427 ($dff) from module pulse_gen (D = $flatten\control.\uart0.$0\rx_samples[3:0], Q = \control.uart0.rx_samples).
Adding EN signal on $flatten\control.$procdff$1464 ($dff) from module pulse_gen (D = $flatten\control.$0\state[2:0], Q = \control.state).
Adding EN signal on $flatten\control.$procdff$1463 ($dff) from module pulse_gen (D = $flatten\control.$0\readcount[5:0], Q = \control.readcount).
Adding EN signal on $flatten\control.$procdff$1462 ($dff) from module pulse_gen (D = $flatten\control.$procmux$1124_Y, Q = \control.readstate).
Adding EN signal on $flatten\control.$procdff$1461 ($dff) from module pulse_gen (D = $flatten\control.$0\writestate[0:0], Q = \control.writestate).
Adding EN signal on $flatten\control.$procdff$1460 ($dff) from module pulse_gen (D = $flatten\control.$add$pulse_control.v:181$118_Y, Q = \control.voutput).
Adding EN signal on $flatten\control.$procdff$1459 ($dff) from module pulse_gen (D = \control.uart0.rx_data, Q = \control.vcontrol).
Adding EN signal on $flatten\control.$procdff$1458 ($dff) from module pulse_gen (D = $flatten\control.$or$pulse_control.v:0$113_Y, Q = \control.vinput).
Adding EN signal on $flatten\control.$procdff$1457 ($dff) from module pulse_gen (D = \control.voutput, Q = \control.tx_byte).
Adding EN signal on $flatten\control.$procdff$1456 ($dff) from module pulse_gen (D = $flatten\control.$0\transmit[0:0], Q = \control.transmit).
Adding EN signal on $flatten\control.$procdff$1455 ($dff) from module pulse_gen (D = 1'1, Q = \control.recv_set).
Adding EN signal on $flatten\control.$procdff$1453 ($dff) from module pulse_gen (D = \control.vinput [7:0], Q = \control.cpmg).
Adding EN signal on $flatten\control.$procdff$1451 ($dff) from module pulse_gen (D = \control.vinput [15:8], Q = \control.pulse_block).
Adding EN signal on $flatten\control.$procdff$1450 ($dff) from module pulse_gen (D = \control.vinput [0], Q = \control.block).
Adding EN signal on $flatten\control.$procdff$1449 ($dff) from module pulse_gen (D = \control.vinput [7:0], Q = \control.nut_wid).
Adding EN signal on $flatten\control.$procdff$1448 ($dff) from module pulse_gen (D = \control.vinput [31:16], Q = \control.nut_del).
Adding EN signal on $flatten\control.$procdff$1447 ($dff) from module pulse_gen (D = \control.vinput [31:16], Q = \control.p2width2).
Adding EN signal on $flatten\control.$procdff$1446 ($dff) from module pulse_gen (D = \control.vinput [31:16], Q = \control.delay2).
Adding EN signal on $flatten\control.$procdff$1445 ($dff) from module pulse_gen (D = $flatten\control.$add$pulse_control.v:195$119_Y, Q = \control.p1width2).
Adding EN signal on $flatten\control.$procdff$1444 ($dff) from module pulse_gen (D = \control.vinput [31:16], Q = \control.p1start2).
Adding EN signal on $flatten\control.$procdff$1443 ($dff) from module pulse_gen (D = \control.vinput [15:0], Q = \control.p2width).
Adding EN signal on $flatten\control.$procdff$1442 ($dff) from module pulse_gen (D = \control.vinput [15:0], Q = \control.delay).
Adding EN signal on $flatten\control.$procdff$1441 ($dff) from module pulse_gen (D = \control.vinput [15:0], Q = \control.p1width).
Adding EN signal on $flatten\control.$procdff$1440 ($dff) from module pulse_gen (D = \control.vinput, Q = \control.period).
Adding EN signal on $flatten\control.$procdff$1438 ($dff) from module pulse_gen (D = \control.vinput [6:0], Q = \control.pre_att).

6.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_gen..
Removed 59 unused cells and 59 unused wires.
<suppressed ~60 debug messages>

6.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_gen.
<suppressed ~17 debug messages>

6.13.9. Rerunning OPT passes. (Maybe there is more to do..)

6.13.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \pulse_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~31 debug messages>

6.13.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \pulse_gen.
    New ctrl vector for $pmux cell $flatten\control.\uart0.$procmux$554: { $flatten\control.\uart0.$procmux$521_CMP $flatten\control.\uart0.$procmux$438_CMP }
    New ctrl vector for $pmux cell $flatten\control.\uart0.$procmux$559: { $flatten\control.\uart0.$procmux$521_CMP $flatten\control.\uart0.$procmux$438_CMP }
    New ctrl vector for $pmux cell $flatten\control.\uart0.$procmux$569: { $flatten\control.\uart0.$procmux$521_CMP $flatten\control.\uart0.$procmux$438_CMP }
    New ctrl vector for $pmux cell $flatten\control.\uart0.$procmux$897: $flatten\control.\uart0.$procmux$598_CMP
    New ctrl vector for $pmux cell $flatten\control.\uart0.$procmux$906: { $flatten\control.\uart0.$procmux$743_CMP $flatten\control.\uart0.$procmux$598_CMP }
    New ctrl vector for $pmux cell $flatten\control.\uart0.$procmux$915: { $flatten\control.\uart0.$procmux$743_CMP $flatten\control.\uart0.$procmux$689_CMP $flatten\control.\uart0.$procmux$598_CMP }
    New ctrl vector for $pmux cell $flatten\control.\uart0.$procmux$924: { $flatten\control.\uart0.$procmux$743_CMP $flatten\control.\uart0.$procmux$689_CMP $flatten\control.\uart0.$procmux$598_CMP }
  Optimizing cells in module \pulse_gen.
Performed a total of 7 changes.

6.13.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pulse_gen'.
<suppressed ~153 debug messages>
Removed a total of 51 cells.

6.13.13. Executing OPT_DFF pass (perform DFF optimizations).

6.13.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_gen..
Removed 0 unused cells and 51 unused wires.
<suppressed ~1 debug messages>

6.13.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_gen.

6.13.16. Rerunning OPT passes. (Maybe there is more to do..)

6.13.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \pulse_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~31 debug messages>

6.13.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \pulse_gen.
Performed a total of 0 changes.

6.13.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pulse_gen'.
Removed a total of 0 cells.

6.13.20. Executing OPT_DFF pass (perform DFF optimizations).

6.13.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_gen..

6.13.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_gen.

6.13.23. Finished OPT passes. (There is nothing left to do.)

6.14. Executing WREDUCE pass (reducing word size of cells).
Removed top 2 bits (of 3) from port B of cell pulse_gen.$auto$opt_dff.cc:218:make_patterns_logic$1589 ($ne).
Removed top 1 bits (of 2) from port B of cell pulse_gen.$auto$opt_dff.cc:218:make_patterns_logic$1607 ($ne).
Removed top 2 bits (of 3) from port B of cell pulse_gen.$auto$opt_dff.cc:218:make_patterns_logic$1700 ($ne).
Removed top 1 bits (of 2) from port B of cell pulse_gen.$auto$opt_dff.cc:218:make_patterns_logic$1706 ($ne).
Removed top 1 bits (of 3) from port B of cell pulse_gen.$auto$opt_dff.cc:218:make_patterns_logic$1710 ($ne).
Removed top 1 bits (of 2) from port B of cell pulse_gen.$auto$opt_dff.cc:218:make_patterns_logic$1728 ($ne).
Removed top 1 bits (of 3) from port B of cell pulse_gen.$auto$opt_dff.cc:218:make_patterns_logic$1550 ($ne).
Removed top 2 bits (of 3) from port B of cell pulse_gen.$auto$opt_dff.cc:218:make_patterns_logic$1587 ($ne).
Removed top 2 bits (of 3) from mux cell pulse_gen.$flatten\control.\uart0.$ternary$uart.v:193$164 ($mux).
Removed top 30 bits (of 32) from port B of cell pulse_gen.$flatten\control.\uart0.$gt$uart.v:201$166 ($gt).
Removed top 2 bits (of 3) from mux cell pulse_gen.$flatten\control.\uart0.$ternary$uart.v:226$170 ($mux).
Removed top 1 bits (of 2) from mux cell pulse_gen.$flatten\control.\uart0.$ternary$uart.v:301$177 ($mux).
Removed top 1 bits (of 2) from port B of cell pulse_gen.$flatten\control.\uart0.$procmux$438_CMP0 ($eq).
Removed top 1 bits (of 11) from mux cell pulse_gen.$flatten\control.\uart0.$procmux$443 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$453 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$473 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$482 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$489 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$496 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$503 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$518 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$526 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$534 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$550 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$583 ($mux).
Removed top 1 bits (of 3) from port B of cell pulse_gen.$flatten\control.\uart0.$procmux$598_CMP0 ($eq).
Removed top 5 bits (of 15) from mux cell pulse_gen.$flatten\control.\uart0.$procmux$605 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$628 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$646 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$655 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$664 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$673 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$684 ($mux).
Removed top 1 bits (of 3) from port B of cell pulse_gen.$flatten\control.\uart0.$procmux$689_CMP0 ($eq).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$696 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$706 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$726 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$738 ($mux).
Removed top 2 bits (of 3) from port B of cell pulse_gen.$flatten\control.\uart0.$procmux$743_CMP0 ($eq).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$752 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$780 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$807 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$818 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$840 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$851 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$863 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$897 ($mux).
Removed top 5 bits (of 8) from port B of cell pulse_gen.$flatten\control.$procmux$1338_CMP0 ($eq).
Removed top 7 bits (of 8) from port B of cell pulse_gen.$flatten\control.$procmux$1326_CMP0 ($eq).
Removed top 6 bits (of 8) from port B of cell pulse_gen.$flatten\control.$procmux$1272_CMP0 ($eq).
Removed top 6 bits (of 8) from port B of cell pulse_gen.$flatten\control.$procmux$1248_CMP0 ($eq).
Removed top 5 bits (of 8) from port B of cell pulse_gen.$flatten\control.$procmux$1231_CMP0 ($eq).
Removed top 5 bits (of 8) from port B of cell pulse_gen.$flatten\control.$procmux$1215_CMP0 ($eq).
Removed top 5 bits (of 8) from port B of cell pulse_gen.$flatten\control.$procmux$1197_CMP0 ($eq).
Removed cell pulse_gen.$flatten\control.$procmux$1174 ($mux).
Removed cell pulse_gen.$flatten\control.$procmux$1170 ($mux).
Removed cell pulse_gen.$flatten\control.$procmux$1130 ($mux).
Removed top 1 bits (of 2) from mux cell pulse_gen.$flatten\control.$procmux$1128 ($mux).
Removed top 1 bits (of 2) from port B of cell pulse_gen.$flatten\control.$procmux$1125_CMP0 ($eq).
Removed cell pulse_gen.$flatten\control.$procmux$1122 ($mux).
Removed cell pulse_gen.$flatten\control.$procmux$1115 ($mux).
Removed cell pulse_gen.$flatten\control.$procmux$1113 ($mux).
Removed cell pulse_gen.$flatten\control.$procmux$1100 ($mux).
Removed cell pulse_gen.$flatten\control.$procmux$1098 ($mux).
Removed cell pulse_gen.$flatten\control.$procmux$1096 ($mux).
Removed top 1 bits (of 3) from port B of cell pulse_gen.$flatten\control.$procmux$1090_CMP0 ($eq).
Removed cell pulse_gen.$flatten\control.$procmux$1086 ($mux).
Removed cell pulse_gen.$flatten\control.$procmux$1082 ($mux).
Removed top 2 bits (of 3) from port B of cell pulse_gen.$flatten\control.$procmux$1077_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell pulse_gen.$auto$opt_dff.cc:218:make_patterns_logic$1528 ($ne).
Removed top 28 bits (of 32) from port B of cell pulse_gen.$flatten\control.$add$pulse_control.v:165$114 ($add).
Removed top 26 bits (of 32) from port Y of cell pulse_gen.$flatten\control.$add$pulse_control.v:165$114 ($add).
Removed top 26 bits (of 32) from port B of cell pulse_gen.$flatten\control.$shl$pulse_control.v:0$110 ($shl).
Removed top 24 bits (of 32) from port Y of cell pulse_gen.$flatten\control.$and$pulse_control.v:0$108 ($and).
Removed top 26 bits (of 32) from port B of cell pulse_gen.$flatten\control.$shl$pulse_control.v:0$107 ($shl).
Removed cell pulse_gen.$flatten\pulses.$procmux$1410 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1408 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1400 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1398 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1391 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1389 ($mux).
Removed top 16 bits (of 32) from mux cell pulse_gen.$flatten\pulses.$procmux$1383 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1381 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1379 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1371 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1369 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1367 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1360 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1358 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1356 ($mux).
Removed top 31 bits (of 32) from port B of cell pulse_gen.$flatten\pulses.$add$pulses.v:317$83 ($add).
Removed top 31 bits (of 32) from port B of cell pulse_gen.$flatten\pulses.$add$pulses.v:300$81 ($add).
Removed top 24 bits (of 32) from port Y of cell pulse_gen.$flatten\pulses.$add$pulses.v:300$81 ($add).
Removed top 29 bits (of 32) from port B of cell pulse_gen.$flatten\pulses.$sub$pulses.v:297$80 ($sub).
Removed top 15 bits (of 32) from port B of cell pulse_gen.$flatten\pulses.$add$pulses.v:297$79 ($add).
Removed top 31 bits (of 32) from port B of cell pulse_gen.$flatten\pulses.$sub$pulses.v:294$75 ($sub).
Removed top 23 bits (of 32) from port Y of cell pulse_gen.$flatten\pulses.$sub$pulses.v:294$75 ($sub).
Removed top 29 bits (of 32) from port B of cell pulse_gen.$flatten\pulses.$sub$pulses.v:249$68 ($sub).
Removed top 15 bits (of 32) from port B of cell pulse_gen.$flatten\pulses.$add$pulses.v:249$67 ($add).
Removed top 14 bits (of 32) from port Y of cell pulse_gen.$flatten\pulses.$add$pulses.v:249$67 ($add).
Removed top 15 bits (of 32) from port Y of cell pulse_gen.$flatten\pulses.$add$pulses.v:248$65 ($add).
Removed top 15 bits (of 32) from port Y of cell pulse_gen.$flatten\pulses.$add$pulses.v:245$64 ($add).
Removed top 25 bits (of 32) from mux cell pulse_gen.$flatten\pulses.$ternary$pulses.v:234$63 ($mux).
Removed top 25 bits (of 32) from mux cell pulse_gen.$flatten\pulses.$ternary$pulses.v:239$62 ($mux).
Removed top 27 bits (of 32) from port B of cell pulse_gen.$flatten\pulses.$sub$pulses.v:239$58 ($sub).
Removed top 29 bits (of 32) from port B of cell pulse_gen.$flatten\pulses.$add$pulses.v:234$57 ($add).
Removed top 25 bits (of 32) from port Y of cell pulse_gen.$flatten\pulses.$add$pulses.v:234$57 ($add).
Removed top 31 bits (of 32) from mux cell pulse_gen.$flatten\pulses.$ternary$pulses.v:230$50 ($mux).
Removed top 31 bits (of 32) from mux cell pulse_gen.$flatten\pulses.$ternary$pulses.v:231$49 ($mux).
Removed top 31 bits (of 32) from mux cell pulse_gen.$flatten\pulses.$ternary$pulses.v:232$48 ($mux).
Removed top 31 bits (of 32) from mux cell pulse_gen.$flatten\pulses.$ternary$pulses.v:227$42 ($mux).
Removed top 31 bits (of 32) from mux cell pulse_gen.$flatten\pulses.$ternary$pulses.v:222$39 ($mux).
Removed top 31 bits (of 32) from mux cell pulse_gen.$flatten\pulses.$ternary$pulses.v:223$37 ($mux).
Removed cell pulse_gen.$flatten\pulses.$ternary$pulses.v:224$36 ($mux).
Removed top 29 bits (of 32) from port B of cell pulse_gen.$flatten\pulses.$sub$pulses.v:224$34 ($sub).
Removed top 7 bits (of 32) from port Y of cell pulse_gen.$flatten\pulses.$sub$pulses.v:224$34 ($sub).
Removed cell pulse_gen.$flatten\pulses.$ternary$pulses.v:223$33 ($mux).
Removed top 31 bits (of 32) from mux cell pulse_gen.$flatten\pulses.$ternary$pulses.v:219$27 ($mux).
Removed top 31 bits (of 32) from mux cell pulse_gen.$flatten\pulses.$ternary$pulses.v:220$26 ($mux).
Removed top 31 bits (of 32) from mux cell pulse_gen.$flatten\pulses.$ternary$pulses.v:220$25 ($mux).
Removed top 31 bits (of 32) from port B of cell pulse_gen.$flatten\pulses.$gt$pulses.v:220$23 ($gt).
Removed top 31 bits (of 32) from mux cell pulse_gen.$flatten\pulses.$ternary$pulses.v:216$18 ($mux).
Removed top 31 bits (of 32) from mux cell pulse_gen.$flatten\pulses.$ternary$pulses.v:196$16 ($mux).
Removed top 8 bits (of 32) from port Y of cell pulse_gen.$flatten\pulses.$sub$pulses.v:171$10 ($sub).
Removed top 8 bits (of 32) from port A of cell pulse_gen.$flatten\pulses.$sub$pulses.v:171$10 ($sub).
Removed top 8 bits (of 32) from port Y of cell pulse_gen.$flatten\pulses.$sub$pulses.v:171$9 ($sub).
Removed top 8 bits (of 32) from port A of cell pulse_gen.$flatten\pulses.$sub$pulses.v:171$9 ($sub).
Removed top 26 bits (of 32) from wire pulse_gen.$flatten\control.$add$pulse_control.v:165$114_Y.
Removed top 24 bits (of 32) from wire pulse_gen.$flatten\control.$and$pulse_control.v:0$108_Y.
Removed top 1 bits (of 2) from wire pulse_gen.$flatten\control.$procmux$1128_Y.
Removed top 1 bits (of 8) from wire pulse_gen.$flatten\control.\uart0.$3\tx_data[7:0].
Removed top 1 bits (of 8) from wire pulse_gen.$flatten\control.\uart0.$4\tx_data[7:0].
Removed top 1 bits (of 11) from wire pulse_gen.$flatten\control.\uart0.$5\tx_clk[10:0].
Removed top 2 bits (of 3) from wire pulse_gen.$flatten\control.\uart0.$6\recv_state[2:0].
Removed top 5 bits (of 15) from wire pulse_gen.$flatten\control.\uart0.$8\rx_clk[14:0].
Removed top 2 bits (of 3) from wire pulse_gen.$flatten\control.\uart0.$9\recv_state[2:0].
Removed top 2 bits (of 3) from wire pulse_gen.$flatten\control.\uart0.$ternary$uart.v:193$164_Y.
Removed top 2 bits (of 3) from wire pulse_gen.$flatten\control.\uart0.$ternary$uart.v:226$170_Y.
Removed top 1 bits (of 2) from wire pulse_gen.$flatten\control.\uart0.$ternary$uart.v:301$177_Y.
Removed top 25 bits (of 32) from wire pulse_gen.$flatten\pulses.$add$pulses.v:234$57_Y.
Removed top 15 bits (of 32) from wire pulse_gen.$flatten\pulses.$add$pulses.v:245$64_Y.
Removed top 15 bits (of 32) from wire pulse_gen.$flatten\pulses.$add$pulses.v:248$65_Y.
Removed top 14 bits (of 32) from wire pulse_gen.$flatten\pulses.$add$pulses.v:249$67_Y.
Removed top 16 bits (of 32) from wire pulse_gen.$flatten\pulses.$procmux$1383_Y.
Removed top 31 bits (of 32) from wire pulse_gen.$flatten\pulses.$ternary$pulses.v:196$16_Y.
Removed top 31 bits (of 32) from wire pulse_gen.$flatten\pulses.$ternary$pulses.v:216$18_Y.
Removed top 31 bits (of 32) from wire pulse_gen.$flatten\pulses.$ternary$pulses.v:219$27_Y.
Removed top 31 bits (of 32) from wire pulse_gen.$flatten\pulses.$ternary$pulses.v:220$25_Y.
Removed top 31 bits (of 32) from wire pulse_gen.$flatten\pulses.$ternary$pulses.v:220$26_Y.

6.15. Executing PEEPOPT pass (run peephole optimizers).

6.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_gen..
Removed 0 unused cells and 80 unused wires.
<suppressed ~1 debug messages>

6.17. Executing SHARE pass (SAT-based resource sharing).

6.18. Executing TECHMAP pass (map to technology primitives).

6.18.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

6.18.2. Continuing TECHMAP pass.
Using template $paramod$5c6790619fdd520f2101529d9884f145abb8b880\_90_lut_cmp_ for cells of type $gt.
No more expansions possible.
<suppressed ~222 debug messages>

6.19. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_gen.

6.20. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_gen..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

6.21. Executing TECHMAP pass (map to technology primitives).

6.21.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/mul2dsp.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/mul2dsp.v' to AST representation.
Generating RTLIL representation for module `\_80_mul'.
Generating RTLIL representation for module `\_90_soft_mul'.
Successfully finished Verilog frontend.

6.21.2. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ecp5/dsp_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ecp5/dsp_map.v' to AST representation.
Generating RTLIL representation for module `\$__MUL18X18'.
Successfully finished Verilog frontend.

6.21.3. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~5 debug messages>

6.22. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module pulse_gen:
  creating $macc model for $flatten\control.$add$pulse_control.v:165$114 ($add).
  creating $macc model for $flatten\control.$add$pulse_control.v:181$116 ($add).
  creating $macc model for $flatten\control.$add$pulse_control.v:181$117 ($add).
  creating $macc model for $flatten\control.$add$pulse_control.v:181$118 ($add).
  creating $macc model for $flatten\control.$add$pulse_control.v:195$119 ($add).
  creating $macc model for $flatten\control.\uart0.$add$uart.v:189$161 ($add).
  creating $macc model for $flatten\control.\uart0.$sub$uart.v:145$154 ($sub).
  creating $macc model for $flatten\control.\uart0.$sub$uart.v:149$156 ($sub).
  creating $macc model for $flatten\control.\uart0.$sub$uart.v:192$162 ($sub).
  creating $macc model for $flatten\control.\uart0.$sub$uart.v:210$167 ($sub).
  creating $macc model for $flatten\control.\uart0.$sub$uart.v:283$175 ($sub).
  creating $macc model for $flatten\pulses.$add$pulses.v:165$2 ($add).
  creating $macc model for $flatten\pulses.$add$pulses.v:166$3 ($add).
  creating $macc model for $flatten\pulses.$add$pulses.v:166$4 ($add).
  creating $macc model for $flatten\pulses.$add$pulses.v:167$5 ($add).
  creating $macc model for $flatten\pulses.$add$pulses.v:168$6 ($add).
  creating $macc model for $flatten\pulses.$add$pulses.v:234$57 ($add).
  creating $macc model for $flatten\pulses.$add$pulses.v:245$64 ($add).
  creating $macc model for $flatten\pulses.$add$pulses.v:248$65 ($add).
  creating $macc model for $flatten\pulses.$add$pulses.v:249$67 ($add).
  creating $macc model for $flatten\pulses.$add$pulses.v:269$70 ($add).
  creating $macc model for $flatten\pulses.$add$pulses.v:269$71 ($add).
  creating $macc model for $flatten\pulses.$add$pulses.v:270$74 ($add).
  creating $macc model for $flatten\pulses.$add$pulses.v:296$77 ($add).
  creating $macc model for $flatten\pulses.$add$pulses.v:297$79 ($add).
  creating $macc model for $flatten\pulses.$add$pulses.v:300$81 ($add).
  creating $macc model for $flatten\pulses.$add$pulses.v:317$83 ($add).
  creating $macc model for $flatten\pulses.$sub$pulses.v:171$10 ($sub).
  creating $macc model for $flatten\pulses.$sub$pulses.v:171$9 ($sub).
  creating $macc model for $flatten\pulses.$sub$pulses.v:224$34 ($sub).
  creating $macc model for $flatten\pulses.$sub$pulses.v:239$58 ($sub).
  creating $macc model for $flatten\pulses.$sub$pulses.v:249$68 ($sub).
  creating $macc model for $flatten\pulses.$sub$pulses.v:294$75 ($sub).
  creating $macc model for $flatten\pulses.$sub$pulses.v:297$80 ($sub).
  merging $macc model for $flatten\pulses.$add$pulses.v:297$79 into $flatten\pulses.$sub$pulses.v:297$80.
  merging $macc model for $flatten\pulses.$add$pulses.v:269$70 into $flatten\pulses.$add$pulses.v:269$71.
  merging $macc model for $flatten\pulses.$add$pulses.v:166$3 into $flatten\pulses.$add$pulses.v:166$4.
  merging $macc model for $flatten\control.$add$pulse_control.v:181$117 into $flatten\control.$add$pulse_control.v:181$118.
  merging $macc model for $flatten\control.$add$pulse_control.v:181$116 into $flatten\control.$add$pulse_control.v:181$118.
  creating $alu model for $macc $flatten\pulses.$sub$pulses.v:171$9.
  creating $alu model for $macc $flatten\pulses.$sub$pulses.v:171$10.
  creating $alu model for $macc $flatten\pulses.$add$pulses.v:317$83.
  creating $alu model for $macc $flatten\pulses.$add$pulses.v:300$81.
  creating $alu model for $macc $flatten\pulses.$sub$pulses.v:224$34.
  creating $alu model for $macc $flatten\pulses.$add$pulses.v:296$77.
  creating $alu model for $macc $flatten\pulses.$add$pulses.v:270$74.
  creating $alu model for $macc $flatten\pulses.$sub$pulses.v:239$58.
  creating $alu model for $macc $flatten\pulses.$add$pulses.v:249$67.
  creating $alu model for $macc $flatten\pulses.$add$pulses.v:248$65.
  creating $alu model for $macc $flatten\pulses.$add$pulses.v:245$64.
  creating $alu model for $macc $flatten\pulses.$add$pulses.v:234$57.
  creating $alu model for $macc $flatten\pulses.$add$pulses.v:168$6.
  creating $alu model for $macc $flatten\pulses.$add$pulses.v:167$5.
  creating $alu model for $macc $flatten\pulses.$sub$pulses.v:249$68.
  creating $alu model for $macc $flatten\pulses.$add$pulses.v:165$2.
  creating $alu model for $macc $flatten\control.\uart0.$sub$uart.v:283$175.
  creating $alu model for $macc $flatten\control.\uart0.$sub$uart.v:210$167.
  creating $alu model for $macc $flatten\control.\uart0.$sub$uart.v:192$162.
  creating $alu model for $macc $flatten\control.\uart0.$sub$uart.v:149$156.
  creating $alu model for $macc $flatten\control.\uart0.$sub$uart.v:145$154.
  creating $alu model for $macc $flatten\control.\uart0.$add$uart.v:189$161.
  creating $alu model for $macc $flatten\control.$add$pulse_control.v:195$119.
  creating $alu model for $macc $flatten\pulses.$sub$pulses.v:294$75.
  creating $alu model for $macc $flatten\control.$add$pulse_control.v:165$114.
  creating $macc cell for $flatten\control.$add$pulse_control.v:181$118: $auto$alumacc.cc:365:replace_macc$1831
  creating $macc cell for $flatten\pulses.$add$pulses.v:269$71: $auto$alumacc.cc:365:replace_macc$1832
  creating $macc cell for $flatten\pulses.$sub$pulses.v:297$80: $auto$alumacc.cc:365:replace_macc$1833
  creating $macc cell for $flatten\pulses.$add$pulses.v:166$4: $auto$alumacc.cc:365:replace_macc$1834
  creating $alu model for $flatten\pulses.$gt$pulses.v:220$23 ($gt): new $alu
  creating $alu model for $flatten\pulses.$gt$pulses.v:234$53 ($gt): new $alu
  creating $alu model for $flatten\pulses.$lt$pulses.v:196$15 ($lt): new $alu
  creating $alu model for $flatten\pulses.$lt$pulses.v:216$17 ($lt): new $alu
  creating $alu model for $flatten\pulses.$lt$pulses.v:218$19 ($lt): new $alu
  creating $alu model for $flatten\pulses.$lt$pulses.v:219$20 ($lt): new $alu
  creating $alu model for $flatten\pulses.$lt$pulses.v:220$21 ($lt): new $alu
  creating $alu model for $flatten\pulses.$lt$pulses.v:220$22 ($lt): new $alu
  creating $alu model for $flatten\pulses.$lt$pulses.v:222$29 ($lt): new $alu
  creating $alu model for $flatten\pulses.$lt$pulses.v:223$30 ($lt): new $alu
  creating $alu model for $flatten\pulses.$lt$pulses.v:224$35 ($lt): new $alu
  creating $alu model for $flatten\pulses.$lt$pulses.v:226$40 ($lt): new $alu
  creating $alu model for $flatten\pulses.$lt$pulses.v:227$41 ($lt): new $alu
  creating $alu model for $flatten\pulses.$lt$pulses.v:229$44 ($lt): merged with $flatten\pulses.$gt$pulses.v:234$53.
  creating $alu model for $flatten\pulses.$lt$pulses.v:230$45 ($lt): new $alu
  creating $alu model for $flatten\pulses.$lt$pulses.v:231$46 ($lt): new $alu
  creating $alu model for $flatten\pulses.$lt$pulses.v:232$47 ($lt): new $alu
  creating $alu model for $flatten\pulses.$lt$pulses.v:239$59 ($lt): new $alu
  creating $alu model for $flatten\pulses.$lt$pulses.v:294$76 ($lt): new $alu
  creating $alu model for $flatten\pulses.$lt$pulses.v:317$82 ($lt): new $alu
  creating $alu model for $flatten\pulses.$procmux$1359_CMP0 ($eq): merged with $flatten\pulses.$lt$pulses.v:223$30.
  creating $alu model for $flatten\pulses.$procmux$1361_CMP0 ($eq): merged with $flatten\pulses.$lt$pulses.v:220$21.
  creating $alu cell for $flatten\pulses.$lt$pulses.v:317$82: $auto$alumacc.cc:485:replace_alu$1854
  creating $alu cell for $flatten\pulses.$lt$pulses.v:294$76: $auto$alumacc.cc:485:replace_alu$1859
  creating $alu cell for $flatten\pulses.$lt$pulses.v:239$59: $auto$alumacc.cc:485:replace_alu$1864
  creating $alu cell for $flatten\pulses.$lt$pulses.v:232$47: $auto$alumacc.cc:485:replace_alu$1869
  creating $alu cell for $flatten\pulses.$lt$pulses.v:231$46: $auto$alumacc.cc:485:replace_alu$1880
  creating $alu cell for $flatten\pulses.$lt$pulses.v:230$45: $auto$alumacc.cc:485:replace_alu$1891
  creating $alu cell for $flatten\pulses.$lt$pulses.v:227$41: $auto$alumacc.cc:485:replace_alu$1902
  creating $alu cell for $flatten\pulses.$lt$pulses.v:226$40: $auto$alumacc.cc:485:replace_alu$1913
  creating $alu cell for $flatten\pulses.$lt$pulses.v:224$35: $auto$alumacc.cc:485:replace_alu$1924
  creating $alu cell for $flatten\pulses.$lt$pulses.v:223$30, $flatten\pulses.$procmux$1359_CMP0: $auto$alumacc.cc:485:replace_alu$1929
  creating $alu cell for $flatten\pulses.$lt$pulses.v:222$29: $auto$alumacc.cc:485:replace_alu$1936
  creating $alu cell for $flatten\pulses.$lt$pulses.v:220$22: $auto$alumacc.cc:485:replace_alu$1941
  creating $alu cell for $flatten\pulses.$lt$pulses.v:220$21, $flatten\pulses.$procmux$1361_CMP0: $auto$alumacc.cc:485:replace_alu$1946
  creating $alu cell for $flatten\pulses.$lt$pulses.v:219$20: $auto$alumacc.cc:485:replace_alu$1953
  creating $alu cell for $flatten\pulses.$lt$pulses.v:218$19: $auto$alumacc.cc:485:replace_alu$1958
  creating $alu cell for $flatten\pulses.$lt$pulses.v:216$17: $auto$alumacc.cc:485:replace_alu$1969
  creating $alu cell for $flatten\pulses.$lt$pulses.v:196$15: $auto$alumacc.cc:485:replace_alu$1980
  creating $alu cell for $flatten\pulses.$gt$pulses.v:234$53, $flatten\pulses.$lt$pulses.v:229$44: $auto$alumacc.cc:485:replace_alu$1991
  creating $alu cell for $flatten\pulses.$gt$pulses.v:220$23: $auto$alumacc.cc:485:replace_alu$2002
  creating $alu cell for $flatten\control.$add$pulse_control.v:165$114: $auto$alumacc.cc:485:replace_alu$2007
  creating $alu cell for $flatten\pulses.$sub$pulses.v:294$75: $auto$alumacc.cc:485:replace_alu$2010
  creating $alu cell for $flatten\control.$add$pulse_control.v:195$119: $auto$alumacc.cc:485:replace_alu$2013
  creating $alu cell for $flatten\control.\uart0.$add$uart.v:189$161: $auto$alumacc.cc:485:replace_alu$2016
  creating $alu cell for $flatten\control.\uart0.$sub$uart.v:145$154: $auto$alumacc.cc:485:replace_alu$2019
  creating $alu cell for $flatten\control.\uart0.$sub$uart.v:149$156: $auto$alumacc.cc:485:replace_alu$2022
  creating $alu cell for $flatten\control.\uart0.$sub$uart.v:192$162: $auto$alumacc.cc:485:replace_alu$2025
  creating $alu cell for $flatten\control.\uart0.$sub$uart.v:210$167: $auto$alumacc.cc:485:replace_alu$2028
  creating $alu cell for $flatten\control.\uart0.$sub$uart.v:283$175: $auto$alumacc.cc:485:replace_alu$2031
  creating $alu cell for $flatten\pulses.$sub$pulses.v:249$68: $auto$alumacc.cc:485:replace_alu$2034
  creating $alu cell for $flatten\pulses.$add$pulses.v:167$5: $auto$alumacc.cc:485:replace_alu$2037
  creating $alu cell for $flatten\pulses.$add$pulses.v:168$6: $auto$alumacc.cc:485:replace_alu$2040
  creating $alu cell for $flatten\pulses.$add$pulses.v:234$57: $auto$alumacc.cc:485:replace_alu$2043
  creating $alu cell for $flatten\pulses.$add$pulses.v:165$2: $auto$alumacc.cc:485:replace_alu$2046
  creating $alu cell for $flatten\pulses.$add$pulses.v:245$64: $auto$alumacc.cc:485:replace_alu$2049
  creating $alu cell for $flatten\pulses.$add$pulses.v:248$65: $auto$alumacc.cc:485:replace_alu$2052
  creating $alu cell for $flatten\pulses.$add$pulses.v:249$67: $auto$alumacc.cc:485:replace_alu$2055
  creating $alu cell for $flatten\pulses.$sub$pulses.v:239$58: $auto$alumacc.cc:485:replace_alu$2058
  creating $alu cell for $flatten\pulses.$add$pulses.v:270$74: $auto$alumacc.cc:485:replace_alu$2061
  creating $alu cell for $flatten\pulses.$add$pulses.v:296$77: $auto$alumacc.cc:485:replace_alu$2064
  creating $alu cell for $flatten\pulses.$sub$pulses.v:224$34: $auto$alumacc.cc:485:replace_alu$2067
  creating $alu cell for $flatten\pulses.$add$pulses.v:300$81: $auto$alumacc.cc:485:replace_alu$2070
  creating $alu cell for $flatten\pulses.$add$pulses.v:317$83: $auto$alumacc.cc:485:replace_alu$2073
  creating $alu cell for $flatten\pulses.$sub$pulses.v:171$10: $auto$alumacc.cc:485:replace_alu$2076
  creating $alu cell for $flatten\pulses.$sub$pulses.v:171$9: $auto$alumacc.cc:485:replace_alu$2079
  created 44 $alu and 4 $macc cells.

6.23. Executing OPT pass (performing simple optimizations).

6.23.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_gen.
<suppressed ~13 debug messages>

6.23.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pulse_gen'.
Removed a total of 0 cells.

6.23.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \pulse_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~29 debug messages>

6.23.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \pulse_gen.
    New ctrl vector for $pmux cell $flatten\control.\uart0.$procmux$915: { $flatten\control.\uart0.$procmux$689_CMP $auto$opt_reduce.cc:134:opt_mux$2083 }
    New ctrl vector for $pmux cell $flatten\control.\uart0.$procmux$924: { $flatten\control.\uart0.$procmux$689_CMP $auto$opt_reduce.cc:134:opt_mux$2085 }
  Optimizing cells in module \pulse_gen.
Performed a total of 2 changes.

6.23.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pulse_gen'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

6.23.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $auto$opt_dff.cc:764:run$1565 ($dffe) from module pulse_gen (D = $flatten\pulses.$add$pulses.v:269$71_Y [31:17], Q = \pulses.cdelay [31:17], rval = 15'000000000000000).
Adding SRST signal on $auto$opt_dff.cc:764:run$1546 ($dffe) from module pulse_gen (D = $flatten\pulses.$add$pulses.v:296$77_Y [31:17], Q = \pulses.cblock_delay [31:17], rval = 15'000000000000000).

6.23.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_gen..
Removed 15 unused cells and 38 unused wires.
<suppressed ~16 debug messages>

6.23.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_gen.

6.23.9. Rerunning OPT passes. (Maybe there is more to do..)

6.23.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \pulse_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~29 debug messages>

6.23.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \pulse_gen.
Performed a total of 0 changes.

6.23.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pulse_gen'.
Removed a total of 0 cells.

6.23.13. Executing OPT_DFF pass (perform DFF optimizations).

6.23.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_gen..

6.23.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_gen.

6.23.16. Finished OPT passes. (There is nothing left to do.)

6.24. Executing MEMORY pass.

6.24.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

6.24.2. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

6.24.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_gen..

6.24.4. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

6.24.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_gen..

6.24.6. Executing MEMORY_COLLECT pass (generating $mem cells).

6.25. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_gen..

6.26. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).

6.27. Executing TECHMAP pass (map to technology primitives).

6.27.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ecp5/brams_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ecp5/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__ECP5_DP16KD'.
Generating RTLIL representation for module `\$__ECP5_PDPW16KD'.
Successfully finished Verilog frontend.

6.27.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

6.28. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).

6.29. Executing TECHMAP pass (map to technology primitives).

6.29.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ecp5/lutrams_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ecp5/lutrams_map.v' to AST representation.
Generating RTLIL representation for module `\$__TRELLIS_DPR16X4'.
Successfully finished Verilog frontend.

6.29.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

6.30. Executing OPT pass (performing simple optimizations).

6.30.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_gen.
<suppressed ~58 debug messages>

6.30.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pulse_gen'.
Removed a total of 0 cells.

6.30.3. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $auto$opt_dff.cc:764:run$1761 ($dffe) from module pulse_gen (D = $flatten\control.$procmux$1172_Y, Q = \control.transmit, rval = 1'0).
Adding SRST signal on $auto$opt_dff.cc:764:run$1734 ($dffe) from module pulse_gen (D = $flatten\control.$procmux$1138_Y, Q = \control.writestate, rval = 1'0).
Adding SRST signal on $auto$opt_dff.cc:764:run$1731 ($dffe) from module pulse_gen (D = $auto$wreduce.cc:454:run$1809 [0], Q = \control.readstate [0], rval = 1'0).
Adding SRST signal on $auto$opt_dff.cc:764:run$1722 ($dffe) from module pulse_gen (D = $auto$wreduce.cc:454:run$1807 [5:0], Q = \control.readcount, rval = 6'000000).
Adding SRST signal on $auto$opt_dff.cc:764:run$1698 ($dffe) from module pulse_gen (D = $flatten\control.\uart0.$4\rx_samples[3:0], Q = \control.uart0.rx_samples, rval = 4'0000).
Adding SRST signal on $auto$opt_dff.cc:764:run$1683 ($dffe) from module pulse_gen (D = $flatten\control.\uart0.$4\rx_sample_countdown[3:0], Q = \control.uart0.rx_sample_countdown, rval = 4'0101).
Adding SRST signal on $auto$opt_dff.cc:764:run$1657 ($dffe) from module pulse_gen (D = $flatten\control.\uart0.$4\rx_bits_remaining[3:0], Q = \control.uart0.rx_bits_remaining, rval = 4'1000).
Adding SRST signal on $auto$opt_dff.cc:764:run$1639 ($dffe) from module pulse_gen (D = $flatten\control.\uart0.$3\tx_out[0:0], Q = \control.uart0.tx_out, rval = 1'0).
Adding SRST signal on $auto$opt_dff.cc:764:run$1623 ($dffe) from module pulse_gen (D = $flatten\control.\uart0.$3\tx_bits_remaining[3:0], Q = \control.uart0.tx_bits_remaining, rval = 4'1000).
Adding SRST signal on $auto$opt_dff.cc:764:run$1612 ($dffe) from module pulse_gen (D = \control.tx_byte [7], Q = \control.uart0.tx_data [7], rval = 1'0).

6.30.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_gen..
Removed 11 unused cells and 15 unused wires.
<suppressed ~12 debug messages>

6.30.5. Rerunning OPT passes. (Removed registers in this run.)

6.30.6. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_gen.

6.30.7. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pulse_gen'.
Removed a total of 0 cells.

6.30.8. Executing OPT_DFF pass (perform DFF optimizations).

6.30.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_gen..

6.30.10. Finished fast OPT passes.

6.31. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

6.32. Executing OPT pass (performing simple optimizations).

6.32.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_gen.

6.32.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pulse_gen'.
Removed a total of 0 cells.

6.32.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \pulse_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~25 debug messages>

6.32.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \pulse_gen.
    Consolidated identical input bits for $mux cell $flatten\control.$procmux$1084:
      Old ports: A=3'010, B=3'000, Y=$flatten\control.$procmux$1084_Y
      New ports: A=1'1, B=1'0, Y=$flatten\control.$procmux$1084_Y [1]
      New connections: { $flatten\control.$procmux$1084_Y [2] $flatten\control.$procmux$1084_Y [0] } = 2'00
    Consolidated identical input bits for $mux cell $flatten\control.$procmux$1124:
      Old ports: A={ 1'0 $auto$wreduce.cc:454:run$1809 [0] }, B=2'00, Y=$flatten\control.$procmux$1124_Y
      New ports: A=$auto$wreduce.cc:454:run$1809 [0], B=1'0, Y=$flatten\control.$procmux$1124_Y [0]
      New connections: $flatten\control.$procmux$1124_Y [1] = 1'0
    Consolidated identical input bits for $mux cell $flatten\control.\uart0.$procmux$443:
      Old ports: A=10'1000100000, B=10'0011100010, Y=$auto$wreduce.cc:454:run$1812 [9:0]
      New ports: A=2'10, B=2'01, Y={ $auto$wreduce.cc:454:run$1812 [9] $auto$wreduce.cc:454:run$1812 [1] }
      New connections: { $auto$wreduce.cc:454:run$1812 [8:2] $auto$wreduce.cc:454:run$1812 [0] } = { 1'0 $auto$wreduce.cc:454:run$1812 [1] $auto$wreduce.cc:454:run$1812 [1] 5'10000 }
    Consolidated identical input bits for $mux cell $flatten\control.\uart0.$procmux$593:
      Old ports: A=3'100, B=3'010, Y=$flatten\control.\uart0.$7\recv_state[2:0]
      New ports: A=2'10, B=2'01, Y=$flatten\control.\uart0.$7\recv_state[2:0] [2:1]
      New connections: $flatten\control.\uart0.$7\recv_state[2:0] [0] = 1'0
    Consolidated identical input bits for $mux cell $flatten\control.\uart0.$procmux$605:
      Old ports: A=10'1001110001, B=10'0111010100, Y=$auto$wreduce.cc:454:run$1814 [9:0]
      New ports: A=2'01, B=2'10, Y={ $auto$wreduce.cc:454:run$1814 [2] $auto$wreduce.cc:454:run$1814 [0] }
      New connections: { $auto$wreduce.cc:454:run$1814 [9:3] $auto$wreduce.cc:454:run$1814 [1] } = { $auto$wreduce.cc:454:run$1814 [0] $auto$wreduce.cc:454:run$1814 [2] $auto$wreduce.cc:454:run$1814 [2] 1'1 $auto$wreduce.cc:454:run$1814 [0] 3'100 }
    Consolidated identical input bits for $mux cell $flatten\control.\uart0.$procmux$617:
      Old ports: A={ 1'0 \control.uart0.rx_data [7:1] }, B={ 1'1 \control.uart0.rx_data [7:1] }, Y=$flatten\control.\uart0.$0\rx_data[7:0]
      New ports: A=1'0, B=1'1, Y=$flatten\control.\uart0.$0\rx_data[7:0] [7]
      New connections: $flatten\control.\uart0.$0\rx_data[7:0] [6:0] = \control.uart0.rx_data [7:1]
    Consolidated identical input bits for $mux cell $flatten\control.\uart0.$procmux$766:
      Old ports: A=3'010, B=3'110, Y=$flatten\control.\uart0.$4\recv_state[2:0]
      New ports: A=1'0, B=1'1, Y=$flatten\control.\uart0.$4\recv_state[2:0] [2]
      New connections: $flatten\control.\uart0.$4\recv_state[2:0] [1:0] = 2'10
    Consolidated identical input bits for $mux cell $flatten\control.\uart0.$ternary$uart.v:247$172:
      Old ports: A=3'000, B=3'101, Y=$flatten\control.\uart0.$ternary$uart.v:247$172_Y
      New ports: A=1'0, B=1'1, Y=$flatten\control.\uart0.$ternary$uart.v:247$172_Y [0]
      New connections: $flatten\control.\uart0.$ternary$uart.v:247$172_Y [2:1] = { $flatten\control.\uart0.$ternary$uart.v:247$172_Y [0] 1'0 }
    Consolidated identical input bits for $mux cell $flatten\control.\uart0.$ternary$uart.v:306$178:
      Old ports: A=2'00, B=2'11, Y=$flatten\control.\uart0.$ternary$uart.v:306$178_Y
      New ports: A=1'0, B=1'1, Y=$flatten\control.\uart0.$ternary$uart.v:306$178_Y [0]
      New connections: $flatten\control.\uart0.$ternary$uart.v:306$178_Y [1] = $flatten\control.\uart0.$ternary$uart.v:306$178_Y [0]
    Consolidated identical input bits for $mux cell $flatten\pulses.$ternary$pulses.v:239$62:
      Old ports: A=\control.pre_att, B={ $auto$wreduce.cc:454:run$1819 [6:1] \control.pre_att [0] }, Y=$flatten\pulses.$ternary$pulses.v:239$62_Y [6:0]
      New ports: A=\control.pre_att [6:1], B=$auto$wreduce.cc:454:run$1819 [6:1], Y=$flatten\pulses.$ternary$pulses.v:239$62_Y [6:1]
      New connections: $flatten\pulses.$ternary$pulses.v:239$62_Y [0] = \control.pre_att [0]
  Optimizing cells in module \pulse_gen.
    Consolidated identical input bits for $pmux cell $flatten\control.$procmux$1089:
      Old ports: A=3'000, B={ 6'001010 $flatten\control.$procmux$1084_Y }, Y=$flatten\control.$0\state[2:0]
      New ports: A=2'00, B={ 4'0110 $flatten\control.$procmux$1084_Y [1] 1'0 }, Y=$flatten\control.$0\state[2:0] [1:0]
      New connections: $flatten\control.$0\state[2:0] [2] = 1'0
    Consolidated identical input bits for $mux cell $flatten\pulses.$ternary$pulses.v:234$63:
      Old ports: A=$flatten\pulses.$ternary$pulses.v:239$62_Y [6:0], B={ $auto$wreduce.cc:454:run$1819 [6:1] \control.pre_att [0] }, Y=$flatten\pulses.$ternary$pulses.v:234$63_Y [6:0]
      New ports: A=$flatten\pulses.$ternary$pulses.v:239$62_Y [6:1], B=$auto$wreduce.cc:454:run$1819 [6:1], Y=$flatten\pulses.$ternary$pulses.v:234$63_Y [6:1]
      New connections: $flatten\pulses.$ternary$pulses.v:234$63_Y [0] = \control.pre_att [0]
  Optimizing cells in module \pulse_gen.
    Consolidated identical input bits for $mux cell $flatten\pulses.$procmux$1342:
      Old ports: A=$flatten\pulses.$ternary$pulses.v:234$63_Y [6:0], B=\control.pre_att, Y=$flatten\pulses.$0\pre_att_val[6:0]
      New ports: A=$flatten\pulses.$ternary$pulses.v:234$63_Y [6:1], B=\control.pre_att [6:1], Y=$flatten\pulses.$0\pre_att_val[6:0] [6:1]
      New connections: $flatten\pulses.$0\pre_att_val[6:0] [0] = \control.pre_att [0]
  Optimizing cells in module \pulse_gen.
Performed a total of 13 changes.

6.32.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pulse_gen'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

6.32.6. Executing OPT_DFF pass (perform DFF optimizations).

6.32.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_gen..
Removed 1 unused cells and 3 unused wires.
<suppressed ~2 debug messages>

6.32.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_gen.

6.32.9. Rerunning OPT passes. (Maybe there is more to do..)

6.32.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \pulse_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~25 debug messages>

6.32.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \pulse_gen.
Performed a total of 0 changes.

6.32.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pulse_gen'.
Removed a total of 0 cells.

6.32.13. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $auto$opt_dff.cc:764:run$1731 ($dffe) from module pulse_gen.
Setting constant 0-bit at position 2 on $auto$opt_dff.cc:764:run$1713 ($dffe) from module pulse_gen.

6.32.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_gen..

6.32.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_gen.
<suppressed ~5 debug messages>

6.32.16. Rerunning OPT passes. (Maybe there is more to do..)

6.32.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \pulse_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~25 debug messages>

6.32.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \pulse_gen.
Performed a total of 0 changes.

6.32.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pulse_gen'.
Removed a total of 0 cells.

6.32.20. Executing OPT_DFF pass (perform DFF optimizations).

6.32.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_gen..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

6.32.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_gen.

6.32.23. Rerunning OPT passes. (Maybe there is more to do..)

6.32.24. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \pulse_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~25 debug messages>

6.32.25. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \pulse_gen.
Performed a total of 0 changes.

6.32.26. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pulse_gen'.
Removed a total of 0 cells.

6.32.27. Executing OPT_DFF pass (perform DFF optimizations).

6.32.28. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_gen..

6.32.29. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_gen.

6.32.30. Finished OPT passes. (There is nothing left to do.)

6.33. Executing TECHMAP pass (map to technology primitives).

6.33.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

6.33.2. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ecp5/arith_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ecp5/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_ecp5_alu'.
Successfully finished Verilog frontend.

6.33.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $dffe.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $ne.
Using template $paramod\_80_ecp5_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=32\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $sdffe.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $sdff.
Using extmapper simplemap for cells of type $sdffce.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $lut.
Using template $paramod\_80_ecp5_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=11\B_WIDTH=1\Y_WIDTH=11 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=4\B_WIDTH=1\Y_WIDTH=4 for cells of type $alu.
Using extmapper simplemap for cells of type $logic_not.
Using template $paramod\_80_ecp5_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=15\B_WIDTH=1\Y_WIDTH=15 for cells of type $alu.
Using extmapper simplemap for cells of type $mux.
Using template $paramod\_80_ecp5_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=15\B_WIDTH=16\Y_WIDTH=17 for cells of type $alu.
Using template $paramod\_80_ecp5_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=32\B_WIDTH=3\Y_WIDTH=32 for cells of type $alu.
Using extmapper simplemap for cells of type $eq.
Using template $paramod\_90_pmux\WIDTH=2\S_WIDTH=3 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=11\S_WIDTH=2 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=3\S_WIDTH=7 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=15\S_WIDTH=5 for cells of type $pmux.
Using extmapper simplemap for cells of type $dff.
Using template $paramod\_90_pmux\WIDTH=1\S_WIDTH=2 for cells of type $pmux.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=4\Y_WIDTH=4 for cells of type $alu.
Using extmapper maccmap for cells of type $macc.
  add \pulses.cpulse (32 bits, unsigned)
  add \pulses.delay (16 bits, unsigned)
  add \pulses.delay (16 bits, unsigned)
Using template $paramod\_80_ecp5_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=8\B_WIDTH=1\Y_WIDTH=9 for cells of type $alu.
Using extmapper simplemap for cells of type $and.
Using template $paramod$constmap:f1a86313b2935847134cde0e02ff53e41f28add9$paramod$8669418c886d3bd260d664481583c1c71dfc3c9b\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using template $paramod$constmap:65a646296d3e5153eab58e58e05dcc6ed23f3479$paramod$6117e4f67b56bde6aa6a4e39e73a4e382ea036be\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
  add \control.vinput [31:24] (8 bits, unsigned)
  add \control.vinput [7:0] (8 bits, unsigned)
  add \control.vinput [15:8] (8 bits, unsigned)
  add \control.vinput [23:16] (8 bits, unsigned)
Using template $paramod\_80_ecp5_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=24\B_WIDTH=16\Y_WIDTH=24 for cells of type $alu.
Using template $paramod\_80_ecp5_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=24\B_WIDTH=8\Y_WIDTH=24 for cells of type $alu.
Using template $paramod\_80_ecp5_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=8\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
Using template $paramod\_80_ecp5_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
  add \pulses.p1start2 (16 bits, unsigned)
  add \control.delay2 (16 bits, unsigned)
  add \pulses.p1width2 (16 bits, unsigned)
Using template $paramod\_80_ecp5_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=24\B_WIDTH=3\Y_WIDTH=25 for cells of type $alu.
Using template $paramod\_80_ecp5_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=30\B_WIDTH=3\Y_WIDTH=30 for cells of type $alu.
Using template $paramod\_80_ecp5_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=16\B_WIDTH=16\Y_WIDTH=16 for cells of type $alu.
  add \pulses.cpulse (32 bits, unsigned)
  add { \pulses.delay 1'0 } (17 bits, unsigned)
  add 32'11111111111111111111111111111011 (32 bits, unsigned)
Using template $paramod\_80_ecp5_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=8\B_WIDTH=16\Y_WIDTH=17 for cells of type $alu.
Using template $paramod\_80_ecp5_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=16\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
Using extmapper simplemap for cells of type $logic_and.
Using template $paramod\_80_ecp5_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=24\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
Using template $paramod\_80_ecp5_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=16\Y_WIDTH=16 for cells of type $alu.
Using template $paramod\_80_ecp5_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=8\Y_WIDTH=8 for cells of type $alu.
Using template $paramod\_80_ecp5_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=8\B_WIDTH=8\Y_WIDTH=8 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=3\Y_WIDTH=3 for cells of type $alu.
Using template $paramod\_80_ecp5_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=2\B_WIDTH=6\Y_WIDTH=6 for cells of type $alu.
Using template $paramod\_80_ecp5_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=16\B_WIDTH=16\Y_WIDTH=17 for cells of type $alu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=4 for cells of type $lcu.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $logic_or.
Using template $paramod\_90_fa\WIDTH=8 for cells of type $fa.
Using template $paramod\_90_fa\WIDTH=16 for cells of type $fa.
Using template $paramod\_90_fa\WIDTH=32 for cells of type $fa.
Using template $paramod\_90_lcu\WIDTH=3 for cells of type $lcu.
No more expansions possible.
<suppressed ~4522 debug messages>

6.34. Executing OPT pass (performing simple optimizations).

6.34.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_gen.
<suppressed ~3154 debug messages>

6.34.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pulse_gen'.
<suppressed ~2283 debug messages>
Removed a total of 761 cells.

6.34.3. Executing OPT_DFF pass (perform DFF optimizations).
Handling D = Q on $auto$simplemap.cc:559:simplemap_adffe_sdffe_sdffce$3029 ($_SDFFCE_PP0P_) from module pulse_gen (conecting SRST instead).
Setting constant 0-bit at position 0 on $auto$simplemap.cc:559:simplemap_adffe_sdffe_sdffce$3029 ($_SDFFCE_PP0P_) from module pulse_gen.
Handling D = Q on $auto$simplemap.cc:559:simplemap_adffe_sdffe_sdffce$3030 ($_SDFFCE_PP0P_) from module pulse_gen (conecting SRST instead).
Setting constant 0-bit at position 0 on $auto$simplemap.cc:559:simplemap_adffe_sdffe_sdffce$3030 ($_SDFFCE_PP0P_) from module pulse_gen.
Handling D = Q on $auto$simplemap.cc:559:simplemap_adffe_sdffe_sdffce$3031 ($_SDFFCE_PP0P_) from module pulse_gen (conecting SRST instead).
Setting constant 0-bit at position 0 on $auto$simplemap.cc:559:simplemap_adffe_sdffe_sdffce$3031 ($_SDFFCE_PP0P_) from module pulse_gen.

6.34.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_gen..
Removed 2273 unused cells and 3734 unused wires.
<suppressed ~2274 debug messages>

6.34.5. Rerunning OPT passes. (Removed registers in this run.)

6.34.6. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_gen.
<suppressed ~78 debug messages>

6.34.7. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pulse_gen'.
<suppressed ~273 debug messages>
Removed a total of 91 cells.

6.34.8. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $auto$simplemap.cc:442:simplemap_dffe$2702 ($_DFFE_PP_) from module pulse_gen (D = $flatten\control.$procmux$1089.Y_B [1], Q = \control.state [1], rval = 1'0).
Adding SRST signal on $auto$simplemap.cc:442:simplemap_dffe$2701 ($_DFFE_PP_) from module pulse_gen (D = $flatten\control.$procmux$1089.B_AND_S [4], Q = \control.state [0], rval = 1'0).
Adding SRST signal on $auto$simplemap.cc:442:simplemap_dffe$2562 ($_DFFE_PP_) from module pulse_gen (D = $flatten\control.\uart0.$procmux$879.Y_B [2], Q = \control.uart0.recv_state [2], rval = 1'0).
Adding SRST signal on $auto$simplemap.cc:442:simplemap_dffe$2561 ($_DFFE_PP_) from module pulse_gen (D = $flatten\control.\uart0.$procmux$879.Y_B [1], Q = \control.uart0.recv_state [1], rval = 1'0).
Adding SRST signal on $auto$simplemap.cc:442:simplemap_dffe$2560 ($_DFFE_PP_) from module pulse_gen (D = $flatten\control.\uart0.$procmux$879.Y_B [0], Q = \control.uart0.recv_state [0], rval = 1'1).
Adding SRST signal on $auto$simplemap.cc:442:simplemap_dffe$2470 ($_DFFE_PP_) from module pulse_gen (D = \control.uart0.rx_samples [2], Q = \control.uart0.rx_data [7], rval = 1'1).
Adding SRST signal on $auto$simplemap.cc:442:simplemap_dffe$2443 ($_DFFE_PP_) from module pulse_gen (D = $flatten\control.\uart0.$procmux$564.Y_B [1], Q = \control.uart0.tx_state [1], rval = 1'0).
Adding SRST signal on $auto$simplemap.cc:442:simplemap_dffe$2442 ($_DFFE_PP_) from module pulse_gen (D = $flatten\control.\uart0.$procmux$564.Y_B [0], Q = \control.uart0.tx_state [0], rval = 1'1).

6.34.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_gen..
Removed 8 unused cells and 14 unused wires.
<suppressed ~9 debug messages>

6.34.10. Rerunning OPT passes. (Removed registers in this run.)

6.34.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_gen.

6.34.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pulse_gen'.
Removed a total of 0 cells.

6.34.13. Executing OPT_DFF pass (perform DFF optimizations).

6.34.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_gen..

6.34.15. Finished fast OPT passes.

6.35. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_gen..

6.36. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

6.37. Executing TECHMAP pass (map to technology primitives).

6.37.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ecp5/cells_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ecp5/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_DFFE_NP0N_'.
Generating RTLIL representation for module `\$_DFFE_NP1N_'.
Generating RTLIL representation for module `\$_DFFE_PP0N_'.
Generating RTLIL representation for module `\$_DFFE_PP1N_'.
Generating RTLIL representation for module `\$_SDFFE_NP0P_'.
Generating RTLIL representation for module `\$_SDFFE_NP1P_'.
Generating RTLIL representation for module `\$_SDFFE_PP0P_'.
Generating RTLIL representation for module `\$_SDFFE_PP1P_'.
Generating RTLIL representation for module `\$_SDFFE_NP0N_'.
Generating RTLIL representation for module `\$_SDFFE_NP1N_'.
Generating RTLIL representation for module `\$_SDFFE_PP0N_'.
Generating RTLIL representation for module `\$_SDFFE_PP1N_'.
Generating RTLIL representation for module `\FD1P3AX'.
Generating RTLIL representation for module `\FD1P3AY'.
Generating RTLIL representation for module `\FD1P3BX'.
Generating RTLIL representation for module `\FD1P3DX'.
Generating RTLIL representation for module `\FD1P3IX'.
Generating RTLIL representation for module `\FD1P3JX'.
Generating RTLIL representation for module `\FD1S3AX'.
Generating RTLIL representation for module `\FD1S3AY'.
Generating RTLIL representation for module `\FD1S3BX'.
Generating RTLIL representation for module `\FD1S3DX'.
Generating RTLIL representation for module `\FD1S3IX'.
Generating RTLIL representation for module `\FD1S3JX'.
Generating RTLIL representation for module `\IFS1P3BX'.
Generating RTLIL representation for module `\IFS1P3DX'.
Generating RTLIL representation for module `\IFS1P3IX'.
Generating RTLIL representation for module `\IFS1P3JX'.
Generating RTLIL representation for module `\OFS1P3BX'.
Generating RTLIL representation for module `\OFS1P3DX'.
Generating RTLIL representation for module `\OFS1P3IX'.
Generating RTLIL representation for module `\OFS1P3JX'.
Generating RTLIL representation for module `\IB'.
Generating RTLIL representation for module `\IBPU'.
Generating RTLIL representation for module `\IBPD'.
Generating RTLIL representation for module `\OB'.
Generating RTLIL representation for module `\OBZ'.
Generating RTLIL representation for module `\OBZPU'.
Generating RTLIL representation for module `\OBZPD'.
Generating RTLIL representation for module `\OBCO'.
Generating RTLIL representation for module `\BB'.
Generating RTLIL representation for module `\BBPU'.
Generating RTLIL representation for module `\BBPD'.
Generating RTLIL representation for module `\ILVDS'.
Generating RTLIL representation for module `\OLVDS'.
Successfully finished Verilog frontend.

6.37.2. Continuing TECHMAP pass.
Using template $paramod\$_DFFE_PP_\_TECHMAP_WIREINIT_Q_=1'x for cells of type $_DFFE_PP_.
Using template $paramod\$_DFFE_PP_\_TECHMAP_WIREINIT_Q_=1'0 for cells of type $_DFFE_PP_.
Using template $paramod\$_DFFE_PP_\_TECHMAP_WIREINIT_Q_=1'1 for cells of type $_DFFE_PP_.
Using template $paramod\$_DFFE_PN_\_TECHMAP_WIREINIT_Q_=1'x for cells of type $_DFFE_PN_.
Using template $paramod\$_DFF_P_\_TECHMAP_WIREINIT_Q_=1'x for cells of type $_DFF_P_.
Using template \$_SDFFE_PP0P_ for cells of type $_SDFFE_PP0P_.
Using template \$_SDFFE_PP1P_ for cells of type $_SDFFE_PP1P_.
Using template \$_SDFF_PP0_ for cells of type $_SDFF_PP0_.
Using template \$_SDFF_PP1_ for cells of type $_SDFF_PP1_.
No more expansions possible.
<suppressed ~921 debug messages>

6.38. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_gen.

6.39. Executing SIMPLEMAP pass (map simple cells to gate primitives).

6.40. Executing ECP5_GSR pass (implement FF init values).
Handling GSR in pulse_gen.

6.41. Executing ATTRMVCP pass (move or copy attributes).

6.42. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_gen..
Removed 0 unused cells and 3772 unused wires.
<suppressed ~1 debug messages>

6.43. Executing TECHMAP pass (map to technology primitives).

6.43.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ecp5/latches_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ecp5/latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Successfully finished Verilog frontend.

6.43.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

6.44. Executing ABC pass (technology mapping using ABC).

6.44.1. Extracting gate netlist of module `\pulse_gen' to `<abc-temp-dir>/input.blif'..
Extracted 1884 gates and 2510 wires to a netlist network with 624 inputs and 418 outputs.

6.44.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + dress 
ABC: Total number of equiv classes                =     405.
ABC: Participating nodes from both networks       =     877.
ABC: Participating nodes from the first network   =     415. (  60.14 % of nodes)
ABC: Participating nodes from the second network  =     462. (  66.96 % of nodes)
ABC: Node pairs (any polarity)                    =     415. (  60.14 % of names can be moved)
ABC: Node pairs (same polarity)                   =     394. (  57.10 % of names can be moved)
ABC: Total runtime =     0.05 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

6.44.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:      689
ABC RESULTS:        internal signals:     1468
ABC RESULTS:           input signals:      624
ABC RESULTS:          output signals:      418
Removing temp directory.
Removed 0 unused cells and 1347 unused wires.

6.45. Executing TECHMAP pass (map to technology primitives).

6.45.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ecp5/cells_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ecp5/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_DFFE_NP0N_'.
Generating RTLIL representation for module `\$_DFFE_NP1N_'.
Generating RTLIL representation for module `\$_DFFE_PP0N_'.
Generating RTLIL representation for module `\$_DFFE_PP1N_'.
Generating RTLIL representation for module `\$_SDFFE_NP0P_'.
Generating RTLIL representation for module `\$_SDFFE_NP1P_'.
Generating RTLIL representation for module `\$_SDFFE_PP0P_'.
Generating RTLIL representation for module `\$_SDFFE_PP1P_'.
Generating RTLIL representation for module `\$_SDFFE_NP0N_'.
Generating RTLIL representation for module `\$_SDFFE_NP1N_'.
Generating RTLIL representation for module `\$_SDFFE_PP0N_'.
Generating RTLIL representation for module `\$_SDFFE_PP1N_'.
Generating RTLIL representation for module `\FD1P3AX'.
Generating RTLIL representation for module `\FD1P3AY'.
Generating RTLIL representation for module `\FD1P3BX'.
Generating RTLIL representation for module `\FD1P3DX'.
Generating RTLIL representation for module `\FD1P3IX'.
Generating RTLIL representation for module `\FD1P3JX'.
Generating RTLIL representation for module `\FD1S3AX'.
Generating RTLIL representation for module `\FD1S3AY'.
Generating RTLIL representation for module `\FD1S3BX'.
Generating RTLIL representation for module `\FD1S3DX'.
Generating RTLIL representation for module `\FD1S3IX'.
Generating RTLIL representation for module `\FD1S3JX'.
Generating RTLIL representation for module `\IFS1P3BX'.
Generating RTLIL representation for module `\IFS1P3DX'.
Generating RTLIL representation for module `\IFS1P3IX'.
Generating RTLIL representation for module `\IFS1P3JX'.
Generating RTLIL representation for module `\OFS1P3BX'.
Generating RTLIL representation for module `\OFS1P3DX'.
Generating RTLIL representation for module `\OFS1P3IX'.
Generating RTLIL representation for module `\OFS1P3JX'.
Generating RTLIL representation for module `\IB'.
Generating RTLIL representation for module `\IBPU'.
Generating RTLIL representation for module `\IBPD'.
Generating RTLIL representation for module `\OB'.
Generating RTLIL representation for module `\OBZ'.
Generating RTLIL representation for module `\OBZPU'.
Generating RTLIL representation for module `\OBZPD'.
Generating RTLIL representation for module `\OBCO'.
Generating RTLIL representation for module `\BB'.
Generating RTLIL representation for module `\BBPU'.
Generating RTLIL representation for module `\BBPD'.
Generating RTLIL representation for module `\ILVDS'.
Generating RTLIL representation for module `\OLVDS'.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

6.45.2. Continuing TECHMAP pass.
Using template $paramod\$lut\WIDTH=2\LUT=4'0100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1000 for cells of type $lut.
Using template $paramod$53afc4693cdd4770ebaebeb0ab6c288fde062f75\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=1 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=32'10000000100000001000000011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10000000 for cells of type $lut.
Using template $paramod$50551b8d943b0c170a72faa9739a5a88f4abce2d\$lut for cells of type $lut.
Using template $paramod$2415ae731198fab63542cb33ec0423f052901ef2\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=234881024 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1001000000001001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=65536 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10101100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011000000001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000111000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=16777216 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11110001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=32'11111111111111110000000000000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111100000001 for cells of type $lut.
Using template $paramod$b1bd2a921ec0f1ea0cc7578a2bcf32d761c7f62f\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011000010111011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=32'10010000000000000000000000000000 for cells of type $lut.
Using template $paramod$3dd1cfeaac2399e8e1df42382a37ba2eafacb216\$lut for cells of type $lut.
Using template $paramod$9c1fdb72bfab429eb035e50b86046f0edb412905\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=32'10010000000010010000000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=218103808 for cells of type $lut.
Using template $paramod$5fba6fa4affd3d8cb90b92595f737467c857f3c8\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000011110100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1001000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=32'11111111111111110111111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000011100111100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11100001 for cells of type $lut.
Using template $paramod$2112a70fa1dfed7009af2d1b2a9304edd7f76cef\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=1073741824 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=2147418112 for cells of type $lut.
Using template $paramod$812d8d45339a84a9b93434f61741fbb4af7ae2da\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=218103821 for cells of type $lut.
Using template $paramod$f8bdca125e424c8e9c5f5e84960e0e034e7c473c\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1101000000000000 for cells of type $lut.
Using template $paramod$89a7c44637a153ae876a5df3b846d5543893af1c\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000011101111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00001011 for cells of type $lut.
Using template $paramod$fc4ca8f0b7150809e177c4fa12feccd73bbbb2e3\$lut for cells of type $lut.
Using template $paramod$74303b63fa170e00cba212e866b4c6c39b46b2d1\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10010110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=32'11111110111010101010100010000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=32'11101000000101110001011111101000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1001011000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11101000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=1\LUT=2'01 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111000000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111111110000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1001011001101001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110100000010111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0110100110010110 for cells of type $lut.
Using template $paramod$629bea346f0daddb39cb1ebf17c36b3d1144d5d1\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=33023 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000011111111 for cells of type $lut.
Using template $paramod$2ddb5b5cad1eda4b448691edd161080bb92bfe50\$lut for cells of type $lut.
Using template $paramod$561e376e62fd0ae35c0d0864d2d69979f67e9294\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111110000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=32'11111111111111110100000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=32'11110000000000001000100010001000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=32'11111111111111111000000011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111111100000000 for cells of type $lut.
Using template $paramod$d611654eaf2cfdde5476b49ff7dde7a3d8cbca2c\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=32'11010000000000000000000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=32'11111111100011111111111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=32'11110000111111110100010001000100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000001101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00011100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111000011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100111110100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11101111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010001111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000011100000000 for cells of type $lut.
Using template $paramod$57619346c001bba14f685682aaa48a843cd5a7a5\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010000000111111 for cells of type $lut.
Using template $paramod$43d36707918893cdc94f3173e86faa45633b8ce7\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100110111111100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=32'10000000000000000000000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000011111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000000000100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=65296 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000001001111 for cells of type $lut.
Using template $paramod$34761ec4d1c147b684bec192cbb6fb046dbf7610\$lut for cells of type $lut.
Using template $paramod$f275b2d97237f5f7d3462ef47444def2125c8869\$lut for cells of type $lut.
No more expansions possible.
<suppressed ~2111 debug messages>

6.46. Executing OPT_LUT_INS pass (discard unused LUT inputs).
Optimizing LUTs in pulse_gen.
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14497.lut2 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14497.lut4 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14497.lut5 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14497.lut6 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14514.lut1 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14514.lut2 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14571.lut1 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14571.lut2 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14607.lut2 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14607.lut3 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14612.lut2 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14661.lut2 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14661.lut3 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14812.lut2 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14828.lut3 (4 -> 1)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14828.lut4 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14828.lut5 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14828.lut6 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14828.lut7 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14845.lut1 (4 -> 1)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14845.lut3 (4 -> 1)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14845.lut4 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14845.lut5 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14845.lut6 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14845.lut7 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14846.lut1 (4 -> 1)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14846.lut3 (4 -> 1)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14846.lut4 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14846.lut5 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14846.lut6 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14846.lut7 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14842.lut1 (4 -> 1)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14842.lut3 (4 -> 1)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14842.lut4 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14842.lut5 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14842.lut6 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14842.lut7 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14843.lut1 (4 -> 1)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14843.lut3 (4 -> 1)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14843.lut4 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14843.lut5 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14843.lut6 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14843.lut7 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14896.lut2 (4 -> 1)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14896.lut3 (4 -> 1)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14896.lut4 (4 -> 1)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14896.lut5 (4 -> 1)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14896.lut6 (4 -> 1)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14915.lut1 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14906.lut2 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14901.lut7 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14897.lut7 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14898.lut7 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14936.lut2 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14936.lut3 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14936.lut4 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14936.lut5 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14936.lut6 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14941.lut2 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14941.lut3 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14938.lut1 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14938.lut2 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14938.lut3 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14938.lut4 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14938.lut5 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14938.lut6 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14944.lut2 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14944.lut3 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14944.lut4 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14944.lut5 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14944.lut6 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14944.lut7 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14934.lut2 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14934.lut3 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14934.lut4 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14934.lut5 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14934.lut6 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14934.lut7 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14929.lut2 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14929.lut3 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14929.lut4 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14929.lut5 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14929.lut6 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14899.lut2 (4 -> 3)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14899.lut3 (4 -> 3)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14874.lut2 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14865.lut2 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14844.lut3 (4 -> 1)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14844.lut4 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14844.lut5 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14844.lut6 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14844.lut7 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14829.lut2 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14546.lut2 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14562.lut2 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14566.lut2 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14533.lut2 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14533.lut3 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14491.lut2 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14491.lut3 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14491.lut4 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14491.lut5 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14491.lut7 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14492.lut1 (4 -> 3)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14493.lut1 (4 -> 3)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14485.lut1 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14485.lut2 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14485.lut3 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14485.lut5 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14485.lut6 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14485.lut7 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14489.lut1 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14489.lut2 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14489.lut3 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14485.lut0 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14490.lut1 (4 -> 3)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14488.lut1 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14491.lut0 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14491.lut1 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14497.lut1 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14497.lut0 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14499.lut0 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14498.lut1 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14513.lut0 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14514.lut0 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14535.lut1 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14533.lut0 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14542.lut0 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14546.lut0 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14552.lut0 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14556.lut0 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14558.lut0 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14562.lut1 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14562.lut0 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14566.lut1 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14570.lut0 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14571.lut0 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14578.lut0 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14584.lut0 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14597.lut0 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14546.lut1 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14607.lut0 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14612.lut1 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14612.lut0 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14616.lut0 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14644.lut0 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14647.lut0 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14634.lut1 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14829.lut1 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14651.lut0 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14655.lut0 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14661.lut0 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14664.lut0 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14666.lut0 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14797.lut1 (4 -> 2)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14797.lut0 (4 -> 2)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14812.lut1 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14812.lut0 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14822.lut0 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14828.lut1 (4 -> 1)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14829.lut0 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14830.lut0 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14832.lut0 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14847.lut0 (4 -> 1)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14844.lut1 (4 -> 1)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14858.lut0 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14863.lut0 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14865.lut1 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14868.lut0 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14870.lut0 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14874.lut0 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14910.lut1 (4 -> 2)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14874.lut1 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14896.lut1 (4 -> 1)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14896.lut0 (4 -> 1)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14905.lut1 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14899.lut1 (4 -> 3)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14906.lut0 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14922.lut1 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14910.lut0 (4 -> 2)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14906.lut1 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14936.lut1 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14929.lut0 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14934.lut0 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14929.lut1 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14936.lut0 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14938.lut0 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14941.lut0 (4 -> 0)
  Optimizing lut $abc$14483$auto$blifparse.cc:498:parse_blif$14944.lut0 (4 -> 0)
Removed 0 unused cells and 1519 unused wires.

6.47. Executing AUTONAME pass.
Renamed 63253 objects in module pulse_gen (116 iterations).
<suppressed ~3455 debug messages>

6.48. Executing HIERARCHY pass (managing design hierarchy).

6.48.1. Analyzing design hierarchy..
Top module:  \pulse_gen

6.48.2. Analyzing design hierarchy..
Top module:  \pulse_gen
Removed 0 unused modules.

6.49. Printing statistics.

=== pulse_gen ===

   Number of wires:               1157
   Number of wire bits:           6104
   Number of public wires:        1157
   Number of public wire bits:    6104
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2467
     CCU2C                         529
     EHXPLLL                         1
     L6MUX21                        71
     LUT4                          908
     PFUMX                         157
     TRELLIS_FF                    801

6.50. Executing CHECK pass (checking for obvious problems).
checking module pulse_gen..
found and reported 0 problems.

6.51. Executing JSON backend.

Warnings: 7 unique messages, 7 total
End of script. Logfile hash: 16b0df9e49, CPU: user 2.88s system 0.14s, MEM: 268.59 MB peak
Yosys 0.9+3683 (git sha1 b7d46be4, clang 10.0.0-4ubuntu1 -fPIC -Os)
Time spent: 15% 1x autoname (0 sec), 14% 8x techmap (0 sec), ...
