
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Wolf <claire@symbioticeda.com>          |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9+3683 (git sha1 b7d46be4, clang 10.0.0-4ubuntu1 -fPIC -Os)


-- Parsing `pulse_gen.v' using frontend `verilog' --

1. Executing Verilog-2005 frontend: pulse_gen.v
Parsing Verilog input from `pulse_gen.v' to AST representation.
Generating RTLIL representation for module `\pulse_gen'.
Successfully finished Verilog frontend.

-- Parsing `pulses.v' using frontend `verilog' --

2. Executing Verilog-2005 frontend: pulses.v
Parsing Verilog input from `pulses.v' to AST representation.
Generating RTLIL representation for module `\pulses'.
Successfully finished Verilog frontend.

-- Parsing `pulse_control.v' using frontend `verilog' --

3. Executing Verilog-2005 frontend: pulse_control.v
Parsing Verilog input from `pulse_control.v' to AST representation.
Generating RTLIL representation for module `\pulse_control'.
Successfully finished Verilog frontend.

-- Parsing `uart.v' using frontend `verilog' --

4. Executing Verilog-2005 frontend: uart.v
Parsing Verilog input from `uart.v' to AST representation.
Generating RTLIL representation for module `\uart'.
Successfully finished Verilog frontend.

-- Parsing `ecppll.v' using frontend `verilog' --

5. Executing Verilog-2005 frontend: ecppll.v
Parsing Verilog input from `ecppll.v' to AST representation.
Generating RTLIL representation for module `\pll'.
Successfully finished Verilog frontend.

-- Running command `synth_ecp5 -json pulse_gen.json -top pulse_gen' --

6. Executing SYNTH_ECP5 pass.

6.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ecp5/cells_sim.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ecp5/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\LUT4'.
Generating RTLIL representation for module `\$__ABC9_LUT5'.
Generating RTLIL representation for module `\$__ABC9_LUT6'.
Generating RTLIL representation for module `\$__ABC9_LUT7'.
Generating RTLIL representation for module `\L6MUX21'.
Generating RTLIL representation for module `\CCU2C'.
Generating RTLIL representation for module `\TRELLIS_RAM16X2'.
Generating RTLIL representation for module `\PFUMX'.
Generating RTLIL representation for module `\TRELLIS_DPR16X4'.
Generating RTLIL representation for module `\DPR16X4C'.
Generating RTLIL representation for module `\LUT2'.
Generating RTLIL representation for module `\TRELLIS_FF'.
Generating RTLIL representation for module `\TRELLIS_IO'.
Generating RTLIL representation for module `\INV'.
Generating RTLIL representation for module `\TRELLIS_SLICE'.
Generating RTLIL representation for module `\DP16KD'.
Generating RTLIL representation for module `\FD1P3AX'.
Generating RTLIL representation for module `\FD1P3AY'.
Generating RTLIL representation for module `\FD1P3BX'.
Generating RTLIL representation for module `\FD1P3DX'.
Generating RTLIL representation for module `\FD1P3IX'.
Generating RTLIL representation for module `\FD1P3JX'.
Generating RTLIL representation for module `\FD1S3AX'.
Generating RTLIL representation for module `\FD1S3AY'.
Generating RTLIL representation for module `\FD1S3BX'.
Generating RTLIL representation for module `\FD1S3DX'.
Generating RTLIL representation for module `\FD1S3IX'.
Generating RTLIL representation for module `\FD1S3JX'.
Generating RTLIL representation for module `\IFS1P3BX'.
Generating RTLIL representation for module `\IFS1P3DX'.
Generating RTLIL representation for module `\IFS1P3IX'.
Generating RTLIL representation for module `\IFS1P3JX'.
Generating RTLIL representation for module `\OFS1P3BX'.
Generating RTLIL representation for module `\OFS1P3DX'.
Generating RTLIL representation for module `\OFS1P3IX'.
Generating RTLIL representation for module `\OFS1P3JX'.
Generating RTLIL representation for module `\IB'.
Generating RTLIL representation for module `\IBPU'.
Generating RTLIL representation for module `\IBPD'.
Generating RTLIL representation for module `\OB'.
Generating RTLIL representation for module `\OBZ'.
Generating RTLIL representation for module `\OBZPU'.
Generating RTLIL representation for module `\OBZPD'.
Generating RTLIL representation for module `\OBCO'.
Generating RTLIL representation for module `\BB'.
Generating RTLIL representation for module `\BBPU'.
Generating RTLIL representation for module `\BBPD'.
Generating RTLIL representation for module `\ILVDS'.
Generating RTLIL representation for module `\OLVDS'.
Successfully finished Verilog frontend.

6.2. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ecp5/cells_bb.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ecp5/cells_bb.v' to AST representation.
Generating RTLIL representation for module `\MULT18X18D'.
Generating RTLIL representation for module `\ALU54B'.
Generating RTLIL representation for module `\EHXPLLL'.
Generating RTLIL representation for module `\DTR'.
Generating RTLIL representation for module `\OSCG'.
Generating RTLIL representation for module `\USRMCLK'.
Generating RTLIL representation for module `\JTAGG'.
Generating RTLIL representation for module `\DELAYF'.
Generating RTLIL representation for module `\DELAYG'.
Generating RTLIL representation for module `\IDDRX1F'.
Generating RTLIL representation for module `\IDDRX2F'.
Generating RTLIL representation for module `\IDDR71B'.
Generating RTLIL representation for module `\IDDRX2DQA'.
Generating RTLIL representation for module `\ODDRX1F'.
Generating RTLIL representation for module `\ODDRX2F'.
Generating RTLIL representation for module `\ODDR71B'.
Generating RTLIL representation for module `\OSHX2A'.
Generating RTLIL representation for module `\ODDRX2DQA'.
Generating RTLIL representation for module `\ODDRX2DQSB'.
Generating RTLIL representation for module `\TSHX2DQA'.
Generating RTLIL representation for module `\TSHX2DQSA'.
Generating RTLIL representation for module `\DQSBUFM'.
Generating RTLIL representation for module `\DDRDLLA'.
Generating RTLIL representation for module `\CLKDIVF'.
Generating RTLIL representation for module `\ECLKSYNCB'.
Generating RTLIL representation for module `\ECLKBRIDGECS'.
Generating RTLIL representation for module `\DCCA'.
Generating RTLIL representation for module `\DCUA'.
Generating RTLIL representation for module `\EXTREFB'.
Generating RTLIL representation for module `\PCSCLKDIV'.
Generating RTLIL representation for module `\PUR'.
Generating RTLIL representation for module `\GSR'.
Generating RTLIL representation for module `\SGSR'.
Generating RTLIL representation for module `\PDPW16KD'.
Successfully finished Verilog frontend.

6.3. Executing HIERARCHY pass (managing design hierarchy).

6.3.1. Analyzing design hierarchy..
Top module:  \pulse_gen
Used module:     \pulses
Used module:     \pulse_control
Used module:         \uart
Used module:     \pll

6.3.2. Analyzing design hierarchy..
Top module:  \pulse_gen
Used module:     \pulses
Used module:     \pulse_control
Used module:         \uart
Used module:     \pll
Removed 0 unused modules.

6.4. Executing PROC pass (convert processes to netlists).

6.4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:213$305'.
Cleaned up 1 empty switch.

6.4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:350$385 in module TRELLIS_FF.
Removed 2 dead cases from process $proc$uart.v:135$130 in module uart.
Marked 17 switch rules as full_case in process $proc$uart.v:135$130 in module uart.
Removed 1 dead cases from process $proc$pulse_control.v:149$72 in module pulse_control.
Marked 5 switch rules as full_case in process $proc$pulse_control.v:149$72 in module pulse_control.
Marked 2 switch rules as full_case in process $proc$pulses.v:183$12 in module pulses.
Removed a total of 3 dead cases.

6.4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 1 redundant assignment.
Promoted 72 assignments to connections.

6.4.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\TRELLIS_FF.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:0$389'.
  Set init value: \Q = 1'0
Found init rule in `\uart.$proc$uart.v:106$159'.
  Set init value: \tx_state = 2'00
Found init rule in `\uart.$proc$uart.v:105$158'.
  Set init value: \tx_out = 1'1
Found init rule in `\uart.$proc$uart.v:101$157'.
  Set init value: \recv_state = 3'000
Found init rule in `\pulse_control.$proc$pulse_control.v:146$123'.
  Set init value: \state = 3'000
Found init rule in `\pulse_control.$proc$pulse_control.v:130$122'.
  Set init value: \readcount = 6'000000
Found init rule in `\pulse_control.$proc$pulse_control.v:129$121'.
  Set init value: \readstate = 2'00
Found init rule in `\pulse_control.$proc$pulse_control.v:127$119'.
  Set init value: \writestate = 1'0
Found init rule in `\pulse_control.$proc$pulse_control.v:63$118'.
  Set init value: \post_att = 7'1111111
Found init rule in `\pulse_control.$proc$pulse_control.v:62$117'.
  Set init value: \pre_att = 7'0000011
Found init rule in `\pulse_control.$proc$pulse_control.v:57$116'.
  Set init value: \recv_set = 1'0
Found init rule in `\pulse_control.$proc$pulse_control.v:56$115'.
  Set init value: \nut_wid = 8'00000000
Found init rule in `\pulse_control.$proc$pulse_control.v:55$114'.
  Set init value: \nut_del = 16'0000000000000000
Found init rule in `\pulse_control.$proc$pulse_control.v:54$113'.
  Set init value: \rx_done = 1'0
Found init rule in `\pulse_control.$proc$pulse_control.v:53$112'.
  Set init value: \block = 1'1
Found init rule in `\pulse_control.$proc$pulse_control.v:52$111'.
  Set init value: \cpmg = 8'00000001
Found init rule in `\pulse_control.$proc$pulse_control.v:51$110'.
  Set init value: \pulse_block_half = 16'0000000000000101
Found init rule in `\pulse_control.$proc$pulse_control.v:50$109'.
  Set init value: \pulse_block = 8'00001010
Found init rule in `\pulse_control.$proc$pulse_control.v:49$108'.
  Set init value: \p1start2 = 16'0000000001100100
Found init rule in `\pulse_control.$proc$pulse_control.v:48$107'.
  Set init value: \p2width2 = 16'0000000000000000
Found init rule in `\pulse_control.$proc$pulse_control.v:47$106'.
  Set init value: \delay2 = 16'0000000011001000
Found init rule in `\pulse_control.$proc$pulse_control.v:46$105'.
  Set init value: \p1width2 = 16'0000000001101110
Found init rule in `\pulse_control.$proc$pulse_control.v:45$104'.
  Set init value: \p2width = 16'0000000000011110
Found init rule in `\pulse_control.$proc$pulse_control.v:44$103'.
  Set init value: \delay = 16'0000000011001000
Found init rule in `\pulse_control.$proc$pulse_control.v:43$102'.
  Set init value: \p1width = 16'0000000000011110
Found init rule in `\pulse_control.$proc$pulse_control.v:42$101'.
  Set init value: \period = 10000
Found init rule in `\pulses.$proc$pulses.v:111$68'.
  Set init value: \ccount = 8'00000000
Found init rule in `\pulses.$proc$pulses.v:64$67'.
  Set init value: \cw = 1'0
Found init rule in `\pulses.$proc$pulses.v:54$65'.
  Set init value: \counter = 0

6.4.5. Executing PROC_ARST pass (detect async resets in processes).

6.4.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\TRELLIS_FF.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:0$389'.
Creating decoders for process `\TRELLIS_FF.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:350$385'.
     1/1: $0\Q[0:0]
Creating decoders for process `\DPR16X4C.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:0$382'.
Creating decoders for process `\DPR16X4C.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:285$361'.
     1/3: $0$memwr$\ram$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:287$360_EN[3:0]$364
     2/3: $0$memwr$\ram$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:287$360_DATA[3:0]$363
     3/3: $0$memwr$\ram$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:287$360_ADDR[3:0]$362
Creating decoders for process `\TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:0$328'.
Creating decoders for process `\TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:221$306'.
     1/3: $0$memwr$\mem$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:223$304_EN[3:0]$309
     2/3: $0$memwr$\mem$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:223$304_DATA[3:0]$308
     3/3: $0$memwr$\mem$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:223$304_ADDR[3:0]$307
Creating decoders for process `\TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:213$305'.
Creating decoders for process `\uart.$proc$uart.v:106$159'.
Creating decoders for process `\uart.$proc$uart.v:105$158'.
Creating decoders for process `\uart.$proc$uart.v:101$157'.
Creating decoders for process `\uart.$proc$uart.v:135$130'.
     1/57: $5\tx_state[1:0]
     2/57: $5\tx_clk[10:0]
     3/57: $4\tx_data[7:0]
     4/57: $4\tx_out[0:0]
     5/57: $4\tx_bits_remaining[3:0]
     6/57: $3\tx_data[7:0]
     7/57: $3\tx_bits_remaining[3:0]
     8/57: $4\tx_state[1:0]
     9/57: $3\tx_out[0:0]
    10/57: $4\tx_clk[10:0]
    11/57: $3\tx_state[1:0]
    12/57: $2\tx_bits_remaining[3:0]
    13/57: $2\tx_out[0:0]
    14/57: $3\tx_clk[10:0]
    15/57: $2\tx_data[7:0]
    16/57: $1\tx_data[7:0]
    17/57: $1\tx_bits_remaining[3:0]
    18/57: $2\tx_state[1:0]
    19/57: $1\tx_out[0:0]
    20/57: $2\tx_clk[10:0]
    21/57: $9\recv_state[2:0]
    22/57: $8\recv_state[2:0]
    23/57: $8\rx_clk[14:0]
    24/57: $3\rx_data[7:0]
    25/57: $7\recv_state[2:0]
    26/57: $7\rx_clk[14:0]
    27/57: $4\rx_bits_remaining[3:0]
    28/57: $5\rx_sample_countdown[3:0]
    29/57: $6\rx_samples[3:0]
    30/57: $2\rx_data[7:0]
    31/57: $5\rx_samples[3:0]
    32/57: $6\recv_state[2:0]
    33/57: $4\rx_sample_countdown[3:0]
    34/57: $6\rx_clk[14:0]
    35/57: $4\rx_samples[3:0]
    36/57: $3\rx_sample_countdown[3:0]
    37/57: $3\rx_samples[3:0]
    38/57: $5\recv_state[2:0]
    39/57: $3\rx_bits_remaining[3:0]
    40/57: $5\rx_clk[14:0]
    41/57: $2\rx_bits_remaining[3:0]
    42/57: $4\recv_state[2:0]
    43/57: $4\rx_clk[14:0]
    44/57: $2\rx_sample_countdown[3:0]
    45/57: $2\rx_samples[3:0]
    46/57: $3\recv_state[2:0]
    47/57: $3\rx_clk[14:0]
    48/57: $2\recv_state[2:0]
    49/57: $2\rx_clk[14:0]
    50/57: $1\rx_data[7:0]
    51/57: $1\rx_bits_remaining[3:0]
    52/57: $1\rx_sample_countdown[3:0]
    53/57: $1\rx_samples[3:0]
    54/57: $1\tx_clk[10:0]
    55/57: $1\rx_clk[14:0]
    56/57: $1\tx_state[1:0]
    57/57: $1\recv_state[2:0]
Creating decoders for process `\pulse_control.$proc$pulse_control.v:146$123'.
Creating decoders for process `\pulse_control.$proc$pulse_control.v:130$122'.
Creating decoders for process `\pulse_control.$proc$pulse_control.v:129$121'.
Creating decoders for process `\pulse_control.$proc$pulse_control.v:128$120'.
Creating decoders for process `\pulse_control.$proc$pulse_control.v:127$119'.
Creating decoders for process `\pulse_control.$proc$pulse_control.v:63$118'.
Creating decoders for process `\pulse_control.$proc$pulse_control.v:62$117'.
Creating decoders for process `\pulse_control.$proc$pulse_control.v:57$116'.
Creating decoders for process `\pulse_control.$proc$pulse_control.v:56$115'.
Creating decoders for process `\pulse_control.$proc$pulse_control.v:55$114'.
Creating decoders for process `\pulse_control.$proc$pulse_control.v:54$113'.
Creating decoders for process `\pulse_control.$proc$pulse_control.v:53$112'.
Creating decoders for process `\pulse_control.$proc$pulse_control.v:52$111'.
Creating decoders for process `\pulse_control.$proc$pulse_control.v:51$110'.
Creating decoders for process `\pulse_control.$proc$pulse_control.v:50$109'.
Creating decoders for process `\pulse_control.$proc$pulse_control.v:49$108'.
Creating decoders for process `\pulse_control.$proc$pulse_control.v:48$107'.
Creating decoders for process `\pulse_control.$proc$pulse_control.v:47$106'.
Creating decoders for process `\pulse_control.$proc$pulse_control.v:46$105'.
Creating decoders for process `\pulse_control.$proc$pulse_control.v:45$104'.
Creating decoders for process `\pulse_control.$proc$pulse_control.v:44$103'.
Creating decoders for process `\pulse_control.$proc$pulse_control.v:43$102'.
Creating decoders for process `\pulse_control.$proc$pulse_control.v:42$101'.
Creating decoders for process `\pulse_control.$proc$pulse_control.v:149$72'.
     1/39: $2\rx_done[0:0]
     2/39: $4$bitselwrite$data$pulse_control.v:164$71[31:0]$83
     3/39: $4$bitselwrite$mask$pulse_control.v:164$70[31:0]$82
     4/39: $4\vinput[31:0]
     5/39: $3$bitselwrite$data$pulse_control.v:164$71[31:0]$80
     6/39: $3$bitselwrite$mask$pulse_control.v:164$70[31:0]$79
     7/39: $3\vinput[31:0]
     8/39: $2$bitselwrite$data$pulse_control.v:164$71[31:0]$78
     9/39: $2$bitselwrite$mask$pulse_control.v:164$70[31:0]$77
    10/39: $2\vinput[31:0]
    11/39: $1$bitselwrite$data$pulse_control.v:164$71[31:0]$76
    12/39: $1$bitselwrite$mask$pulse_control.v:164$70[31:0]$75
    13/39: $1\vinput[31:0]
    14/39: $1\voutput[7:0]
    15/39: $1\rx_done[0:0]
    16/39: $0\state[2:0]
    17/39: $0\readcount[5:0]
    18/39: $0\readstate[1:0]
    19/39: $0\writestate[0:0]
    20/39: $0\vcontrol[7:0]
    21/39: $0\tx_byte[7:0]
    22/39: $0\transmit[0:0]
    23/39: $0\recv_set[0:0]
    24/39: $0\cpmg[7:0]
    25/39: $0\pulse_block_half[15:0]
    26/39: $0\pulse_block[7:0]
    27/39: $0\block[0:0]
    28/39: $0\nut_wid[7:0]
    29/39: $0\nut_del[15:0]
    30/39: $0\p2width2[15:0]
    31/39: $0\delay2[15:0]
    32/39: $0\p1width2[15:0]
    33/39: $0\p1start2[15:0]
    34/39: $0\p2width[15:0]
    35/39: $0\delay[15:0]
    36/39: $0\p1width[15:0]
    37/39: $0\period[31:0]
    38/39: $0\post_att[6:0]
    39/39: $0\pre_att[6:0]
Creating decoders for process `\pulses.$proc$pulses.v:117$69'.
Creating decoders for process `\pulses.$proc$pulses.v:111$68'.
Creating decoders for process `\pulses.$proc$pulses.v:64$67'.
Creating decoders for process `\pulses.$proc$pulses.v:63$66'.
Creating decoders for process `\pulses.$proc$pulses.v:54$65'.
Creating decoders for process `\pulses.$proc$pulses.v:183$12'.
     1/17: $0\counter[31:0]
     2/17: $0\cblock_on[31:0]
     3/17: $0\cblock_delay[31:0]
     4/17: $0\cpulse[31:0]
     5/17: $0\cdelay[31:0]
     6/17: $0\ccount[7:0]
     7/17: $0\nutation_pulse_stop[23:0]
     8/17: $0\nutation_pulse_start[23:0]
     9/17: $0\sync_down[15:0]
    10/17: $0\inh[0:0]
    11/17: $0\nut_pulse[0:0]
    12/17: $0\pulse2[0:0]
    13/17: $0\pulse[0:0]
    14/17: $0\sync[0:0]
    15/17: $0\pulses[0:0]
    16/17: $0\post_att_val[6:0]
    17/17: $0\pre_att_val[6:0]
Creating decoders for process `\pulses.$proc$pulses.v:130$1'.

6.4.7. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\pulse_control.\writecount' from process `\pulse_control.$proc$pulse_control.v:128$120'.
No latch inferred for signal `\pulses.\xfer_bits' from process `\pulses.$proc$pulses.v:117$69'.
No latch inferred for signal `\pulses.\rec' from process `\pulses.$proc$pulses.v:63$66'.

6.4.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\TRELLIS_FF.\Q' using process `\TRELLIS_FF.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:350$385'.
  created $dff cell `$procdff$1567' with positive edge clock.
Creating register for signal `\DPR16X4C.\i' using process `\DPR16X4C.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:0$382'.
  created direct connection (no actual register cell created).
Creating register for signal `\DPR16X4C.$memwr$\ram$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:287$360_ADDR' using process `\DPR16X4C.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:285$361'.
  created $dff cell `$procdff$1568' with positive edge clock.
Creating register for signal `\DPR16X4C.$memwr$\ram$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:287$360_DATA' using process `\DPR16X4C.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:285$361'.
  created $dff cell `$procdff$1569' with positive edge clock.
Creating register for signal `\DPR16X4C.$memwr$\ram$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:287$360_EN' using process `\DPR16X4C.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:285$361'.
  created $dff cell `$procdff$1570' with positive edge clock.
Creating register for signal `\TRELLIS_DPR16X4.\i' using process `\TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:0$328'.
  created direct connection (no actual register cell created).
Creating register for signal `\TRELLIS_DPR16X4.$memwr$\mem$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:223$304_ADDR' using process `\TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:221$306'.
  created $dff cell `$procdff$1571' with positive edge clock.
Creating register for signal `\TRELLIS_DPR16X4.$memwr$\mem$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:223$304_DATA' using process `\TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:221$306'.
  created $dff cell `$procdff$1572' with positive edge clock.
Creating register for signal `\TRELLIS_DPR16X4.$memwr$\mem$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:223$304_EN' using process `\TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:221$306'.
  created $dff cell `$procdff$1573' with positive edge clock.
Creating register for signal `\TRELLIS_DPR16X4.\muxwre' using process `\TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:213$305'.
  created direct connection (no actual register cell created).
Creating register for signal `\uart.\rx_samples' using process `\uart.$proc$uart.v:135$130'.
  created $dff cell `$procdff$1574' with positive edge clock.
Creating register for signal `\uart.\rx_sample_countdown' using process `\uart.$proc$uart.v:135$130'.
  created $dff cell `$procdff$1575' with positive edge clock.
Creating register for signal `\uart.\rx_clk' using process `\uart.$proc$uart.v:135$130'.
  created $dff cell `$procdff$1576' with positive edge clock.
Creating register for signal `\uart.\tx_clk' using process `\uart.$proc$uart.v:135$130'.
  created $dff cell `$procdff$1577' with positive edge clock.
Creating register for signal `\uart.\recv_state' using process `\uart.$proc$uart.v:135$130'.
  created $dff cell `$procdff$1578' with positive edge clock.
Creating register for signal `\uart.\rx_bits_remaining' using process `\uart.$proc$uart.v:135$130'.
  created $dff cell `$procdff$1579' with positive edge clock.
Creating register for signal `\uart.\rx_data' using process `\uart.$proc$uart.v:135$130'.
  created $dff cell `$procdff$1580' with positive edge clock.
Creating register for signal `\uart.\tx_out' using process `\uart.$proc$uart.v:135$130'.
  created $dff cell `$procdff$1581' with positive edge clock.
Creating register for signal `\uart.\tx_state' using process `\uart.$proc$uart.v:135$130'.
  created $dff cell `$procdff$1582' with positive edge clock.
Creating register for signal `\uart.\tx_bits_remaining' using process `\uart.$proc$uart.v:135$130'.
  created $dff cell `$procdff$1583' with positive edge clock.
Creating register for signal `\uart.\tx_data' using process `\uart.$proc$uart.v:135$130'.
  created $dff cell `$procdff$1584' with positive edge clock.
Creating register for signal `\pulse_control.\pre_att' using process `\pulse_control.$proc$pulse_control.v:149$72'.
  created $dff cell `$procdff$1585' with positive edge clock.
Creating register for signal `\pulse_control.\post_att' using process `\pulse_control.$proc$pulse_control.v:149$72'.
  created $dff cell `$procdff$1586' with positive edge clock.
Creating register for signal `\pulse_control.\period' using process `\pulse_control.$proc$pulse_control.v:149$72'.
  created $dff cell `$procdff$1587' with positive edge clock.
Creating register for signal `\pulse_control.\p1width' using process `\pulse_control.$proc$pulse_control.v:149$72'.
  created $dff cell `$procdff$1588' with positive edge clock.
Creating register for signal `\pulse_control.\delay' using process `\pulse_control.$proc$pulse_control.v:149$72'.
  created $dff cell `$procdff$1589' with positive edge clock.
Creating register for signal `\pulse_control.\p2width' using process `\pulse_control.$proc$pulse_control.v:149$72'.
  created $dff cell `$procdff$1590' with positive edge clock.
Creating register for signal `\pulse_control.\p1start2' using process `\pulse_control.$proc$pulse_control.v:149$72'.
  created $dff cell `$procdff$1591' with positive edge clock.
Creating register for signal `\pulse_control.\p1width2' using process `\pulse_control.$proc$pulse_control.v:149$72'.
  created $dff cell `$procdff$1592' with positive edge clock.
Creating register for signal `\pulse_control.\delay2' using process `\pulse_control.$proc$pulse_control.v:149$72'.
  created $dff cell `$procdff$1593' with positive edge clock.
Creating register for signal `\pulse_control.\p2width2' using process `\pulse_control.$proc$pulse_control.v:149$72'.
  created $dff cell `$procdff$1594' with positive edge clock.
Creating register for signal `\pulse_control.\nut_del' using process `\pulse_control.$proc$pulse_control.v:149$72'.
  created $dff cell `$procdff$1595' with positive edge clock.
Creating register for signal `\pulse_control.\nut_wid' using process `\pulse_control.$proc$pulse_control.v:149$72'.
  created $dff cell `$procdff$1596' with positive edge clock.
Creating register for signal `\pulse_control.\block' using process `\pulse_control.$proc$pulse_control.v:149$72'.
  created $dff cell `$procdff$1597' with positive edge clock.
Creating register for signal `\pulse_control.\pulse_block' using process `\pulse_control.$proc$pulse_control.v:149$72'.
  created $dff cell `$procdff$1598' with positive edge clock.
Creating register for signal `\pulse_control.\pulse_block_half' using process `\pulse_control.$proc$pulse_control.v:149$72'.
  created $dff cell `$procdff$1599' with positive edge clock.
Creating register for signal `\pulse_control.\cpmg' using process `\pulse_control.$proc$pulse_control.v:149$72'.
  created $dff cell `$procdff$1600' with positive edge clock.
Creating register for signal `\pulse_control.\rx_done' using process `\pulse_control.$proc$pulse_control.v:149$72'.
  created $dff cell `$procdff$1601' with positive edge clock.
Creating register for signal `\pulse_control.\recv_set' using process `\pulse_control.$proc$pulse_control.v:149$72'.
  created $dff cell `$procdff$1602' with positive edge clock.
Creating register for signal `\pulse_control.\transmit' using process `\pulse_control.$proc$pulse_control.v:149$72'.
  created $dff cell `$procdff$1603' with positive edge clock.
Creating register for signal `\pulse_control.\tx_byte' using process `\pulse_control.$proc$pulse_control.v:149$72'.
  created $dff cell `$procdff$1604' with positive edge clock.
Creating register for signal `\pulse_control.\vinput' using process `\pulse_control.$proc$pulse_control.v:149$72'.
  created $dff cell `$procdff$1605' with positive edge clock.
Creating register for signal `\pulse_control.\vcontrol' using process `\pulse_control.$proc$pulse_control.v:149$72'.
  created $dff cell `$procdff$1606' with positive edge clock.
Creating register for signal `\pulse_control.\voutput' using process `\pulse_control.$proc$pulse_control.v:149$72'.
  created $dff cell `$procdff$1607' with positive edge clock.
Creating register for signal `\pulse_control.\writestate' using process `\pulse_control.$proc$pulse_control.v:149$72'.
  created $dff cell `$procdff$1608' with positive edge clock.
Creating register for signal `\pulse_control.\readstate' using process `\pulse_control.$proc$pulse_control.v:149$72'.
  created $dff cell `$procdff$1609' with positive edge clock.
Creating register for signal `\pulse_control.\readcount' using process `\pulse_control.$proc$pulse_control.v:149$72'.
  created $dff cell `$procdff$1610' with positive edge clock.
Creating register for signal `\pulse_control.\state' using process `\pulse_control.$proc$pulse_control.v:149$72'.
  created $dff cell `$procdff$1611' with positive edge clock.
Creating register for signal `\pulse_control.$bitselwrite$mask$pulse_control.v:164$70' using process `\pulse_control.$proc$pulse_control.v:149$72'.
  created $dff cell `$procdff$1612' with positive edge clock.
Creating register for signal `\pulse_control.$bitselwrite$data$pulse_control.v:164$71' using process `\pulse_control.$proc$pulse_control.v:149$72'.
  created $dff cell `$procdff$1613' with positive edge clock.
Creating register for signal `\pulses.\pre_att_val' using process `\pulses.$proc$pulses.v:183$12'.
  created $dff cell `$procdff$1614' with positive edge clock.
Creating register for signal `\pulses.\post_att_val' using process `\pulses.$proc$pulses.v:183$12'.
  created $dff cell `$procdff$1615' with positive edge clock.
Creating register for signal `\pulses.\pulses' using process `\pulses.$proc$pulses.v:183$12'.
  created $dff cell `$procdff$1616' with positive edge clock.
Creating register for signal `\pulses.\counter' using process `\pulses.$proc$pulses.v:183$12'.
  created $dff cell `$procdff$1617' with positive edge clock.
Creating register for signal `\pulses.\sync' using process `\pulses.$proc$pulses.v:183$12'.
  created $dff cell `$procdff$1618' with positive edge clock.
Creating register for signal `\pulses.\pulse' using process `\pulses.$proc$pulses.v:183$12'.
  created $dff cell `$procdff$1619' with positive edge clock.
Creating register for signal `\pulses.\pulse2' using process `\pulses.$proc$pulses.v:183$12'.
  created $dff cell `$procdff$1620' with positive edge clock.
Creating register for signal `\pulses.\nut_pulse' using process `\pulses.$proc$pulses.v:183$12'.
  created $dff cell `$procdff$1621' with positive edge clock.
Creating register for signal `\pulses.\inh' using process `\pulses.$proc$pulses.v:183$12'.
  created $dff cell `$procdff$1622' with positive edge clock.
Creating register for signal `\pulses.\sync_down' using process `\pulses.$proc$pulses.v:183$12'.
  created $dff cell `$procdff$1623' with positive edge clock.
Creating register for signal `\pulses.\nutation_pulse_start' using process `\pulses.$proc$pulses.v:183$12'.
  created $dff cell `$procdff$1624' with positive edge clock.
Creating register for signal `\pulses.\nutation_pulse_stop' using process `\pulses.$proc$pulses.v:183$12'.
  created $dff cell `$procdff$1625' with positive edge clock.
Creating register for signal `\pulses.\ccount' using process `\pulses.$proc$pulses.v:183$12'.
  created $dff cell `$procdff$1626' with positive edge clock.
Creating register for signal `\pulses.\cdelay' using process `\pulses.$proc$pulses.v:183$12'.
  created $dff cell `$procdff$1627' with positive edge clock.
Creating register for signal `\pulses.\cpulse' using process `\pulses.$proc$pulses.v:183$12'.
  created $dff cell `$procdff$1628' with positive edge clock.
Creating register for signal `\pulses.\cblock_delay' using process `\pulses.$proc$pulses.v:183$12'.
  created $dff cell `$procdff$1629' with positive edge clock.
Creating register for signal `\pulses.\cblock_on' using process `\pulses.$proc$pulses.v:183$12'.
  created $dff cell `$procdff$1630' with positive edge clock.
Creating register for signal `\pulses.\period' using process `\pulses.$proc$pulses.v:130$1'.
  created $dff cell `$procdff$1631' with positive edge clock.
Creating register for signal `\pulses.\p1width' using process `\pulses.$proc$pulses.v:130$1'.
  created $dff cell `$procdff$1632' with positive edge clock.
Creating register for signal `\pulses.\delay' using process `\pulses.$proc$pulses.v:130$1'.
  created $dff cell `$procdff$1633' with positive edge clock.
Creating register for signal `\pulses.\p2width' using process `\pulses.$proc$pulses.v:130$1'.
  created $dff cell `$procdff$1634' with positive edge clock.
Creating register for signal `\pulses.\p1start2' using process `\pulses.$proc$pulses.v:130$1'.
  created $dff cell `$procdff$1635' with positive edge clock.
Creating register for signal `\pulses.\p1width2' using process `\pulses.$proc$pulses.v:130$1'.
  created $dff cell `$procdff$1636' with positive edge clock.
Creating register for signal `\pulses.\p2width2' using process `\pulses.$proc$pulses.v:130$1'.
  created $dff cell `$procdff$1637' with positive edge clock.
Creating register for signal `\pulses.\block' using process `\pulses.$proc$pulses.v:130$1'.
  created $dff cell `$procdff$1638' with positive edge clock.
Creating register for signal `\pulses.\pulse_block' using process `\pulses.$proc$pulses.v:130$1'.
  created $dff cell `$procdff$1639' with positive edge clock.
Creating register for signal `\pulses.\pulse_block_half' using process `\pulses.$proc$pulses.v:130$1'.
  created $dff cell `$procdff$1640' with positive edge clock.
Creating register for signal `\pulses.\cpmg' using process `\pulses.$proc$pulses.v:130$1'.
  created $dff cell `$procdff$1641' with positive edge clock.
Creating register for signal `\pulses.\cw' using process `\pulses.$proc$pulses.v:130$1'.
  created $dff cell `$procdff$1642' with positive edge clock.
Creating register for signal `\pulses.\p2start2' using process `\pulses.$proc$pulses.v:130$1'.
  created $dff cell `$procdff$1643' with positive edge clock.
Creating register for signal `\pulses.\p2stop2' using process `\pulses.$proc$pulses.v:130$1'.
  created $dff cell `$procdff$1644' with positive edge clock.
Creating register for signal `\pulses.\p2start' using process `\pulses.$proc$pulses.v:130$1'.
  created $dff cell `$procdff$1645' with positive edge clock.
Creating register for signal `\pulses.\sdown' using process `\pulses.$proc$pulses.v:130$1'.
  created $dff cell `$procdff$1646' with positive edge clock.
Creating register for signal `\pulses.\block_off' using process `\pulses.$proc$pulses.v:130$1'.
  created $dff cell `$procdff$1647' with positive edge clock.
Creating register for signal `\pulses.\block_on' using process `\pulses.$proc$pulses.v:130$1'.
  created $dff cell `$procdff$1648' with positive edge clock.
Creating register for signal `\pulses.\nutation_pulse_width' using process `\pulses.$proc$pulses.v:130$1'.
  created $dff cell `$procdff$1649' with positive edge clock.
Creating register for signal `\pulses.\nutation_pulse_delay' using process `\pulses.$proc$pulses.v:130$1'.
  created $dff cell `$procdff$1650' with positive edge clock.

6.4.9. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `TRELLIS_FF.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:0$389'.
Found and cleaned up 2 empty switches in `\TRELLIS_FF.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:350$385'.
Removing empty process `TRELLIS_FF.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:350$385'.
Removing empty process `DPR16X4C.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:0$382'.
Found and cleaned up 1 empty switch in `\DPR16X4C.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:285$361'.
Removing empty process `DPR16X4C.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:285$361'.
Removing empty process `TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:0$328'.
Found and cleaned up 1 empty switch in `\TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:221$306'.
Removing empty process `TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:221$306'.
Removing empty process `TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:213$305'.
Removing empty process `uart.$proc$uart.v:106$159'.
Removing empty process `uart.$proc$uart.v:105$158'.
Removing empty process `uart.$proc$uart.v:101$157'.
Found and cleaned up 17 empty switches in `\uart.$proc$uart.v:135$130'.
Removing empty process `uart.$proc$uart.v:135$130'.
Removing empty process `pulse_control.$proc$pulse_control.v:146$123'.
Removing empty process `pulse_control.$proc$pulse_control.v:130$122'.
Removing empty process `pulse_control.$proc$pulse_control.v:129$121'.
Removing empty process `pulse_control.$proc$pulse_control.v:128$120'.
Removing empty process `pulse_control.$proc$pulse_control.v:127$119'.
Removing empty process `pulse_control.$proc$pulse_control.v:63$118'.
Removing empty process `pulse_control.$proc$pulse_control.v:62$117'.
Removing empty process `pulse_control.$proc$pulse_control.v:57$116'.
Removing empty process `pulse_control.$proc$pulse_control.v:56$115'.
Removing empty process `pulse_control.$proc$pulse_control.v:55$114'.
Removing empty process `pulse_control.$proc$pulse_control.v:54$113'.
Removing empty process `pulse_control.$proc$pulse_control.v:53$112'.
Removing empty process `pulse_control.$proc$pulse_control.v:52$111'.
Removing empty process `pulse_control.$proc$pulse_control.v:51$110'.
Removing empty process `pulse_control.$proc$pulse_control.v:50$109'.
Removing empty process `pulse_control.$proc$pulse_control.v:49$108'.
Removing empty process `pulse_control.$proc$pulse_control.v:48$107'.
Removing empty process `pulse_control.$proc$pulse_control.v:47$106'.
Removing empty process `pulse_control.$proc$pulse_control.v:46$105'.
Removing empty process `pulse_control.$proc$pulse_control.v:45$104'.
Removing empty process `pulse_control.$proc$pulse_control.v:44$103'.
Removing empty process `pulse_control.$proc$pulse_control.v:43$102'.
Removing empty process `pulse_control.$proc$pulse_control.v:42$101'.
Found and cleaned up 9 empty switches in `\pulse_control.$proc$pulse_control.v:149$72'.
Removing empty process `pulse_control.$proc$pulse_control.v:149$72'.
Removing empty process `pulses.$proc$pulses.v:117$69'.
Removing empty process `pulses.$proc$pulses.v:111$68'.
Removing empty process `pulses.$proc$pulses.v:64$67'.
Removing empty process `pulses.$proc$pulses.v:63$66'.
Removing empty process `pulses.$proc$pulses.v:54$65'.
Found and cleaned up 5 empty switches in `\pulses.$proc$pulses.v:183$12'.
Removing empty process `pulses.$proc$pulses.v:183$12'.
Removing empty process `pulses.$proc$pulses.v:130$1'.
Cleaned up 35 empty switches.

6.5. Executing FLATTEN pass (flatten design).
Deleting now unused module pll.
Deleting now unused module uart.
Deleting now unused module pulse_control.
Deleting now unused module pulses.
<suppressed ~4 debug messages>

6.6. Executing TRIBUF pass.

6.7. Executing DEMINOUT pass (demote inout ports to input or output).

6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_gen.
<suppressed ~124 debug messages>

6.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_gen..
Removed 65 unused cells and 375 unused wires.
<suppressed ~81 debug messages>

6.10. Executing CHECK pass (checking for obvious problems).
checking module pulse_gen..
found and reported 0 problems.

6.11. Executing OPT pass (performing simple optimizations).

6.11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_gen.

6.11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pulse_gen'.
<suppressed ~654 debug messages>
Removed a total of 218 cells.

6.11.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \pulse_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port A of cell $flatten\control.$procmux$1116: \control.writestate -> 1'0
      Replacing known input bits on port B of cell $flatten\control.$procmux$1114: \control.writestate -> 1'1
      Replacing known input bits on port B of cell $flatten\control.$procmux$1118: \control.writestate -> 1'0
  Analyzing evaluation results.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$476.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$483.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$490.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$498.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$506.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$514.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$522.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$530.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$563.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$573.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$575.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$585.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$587.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$597.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$599.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$608.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$617.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$626.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$635.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$644.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$653.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$664.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$666.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$676.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$686.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$696.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$706.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$718.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$720.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$732.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$734.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$746.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$748.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$760.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$762.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$774.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$776.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$787.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$798.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$809.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$820.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$831.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$843.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$855.
    dead port 2/2 on $mux $flatten\control.$procmux$1006.
    dead port 2/2 on $mux $flatten\control.$procmux$1008.
    dead port 2/2 on $mux $flatten\control.$procmux$1035.
    dead port 2/2 on $mux $flatten\control.$procmux$968.
    dead port 2/2 on $mux $flatten\control.$procmux$970.
    dead port 2/2 on $mux $flatten\control.$procmux$972.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$413.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$415.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$423.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$425.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$433.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$435.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$443.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$445.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$453.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$455.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$462.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$469.
Removed 62 multiplexer ports.
<suppressed ~55 debug messages>

6.11.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \pulse_gen.
    New ctrl vector for $pmux cell $flatten\control.$procmux$1082: { $flatten\control.$procmux$1009_CMP $auto$opt_reduce.cc:134:opt_mux$1652 }
    New ctrl vector for $pmux cell $flatten\control.\uart0.$procmux$532: { $flatten\control.\uart0.$procmux$499_CMP $flatten\control.\uart0.$procmux$416_CMP $auto$opt_reduce.cc:134:opt_mux$1654 }
    New ctrl vector for $pmux cell $flatten\control.\uart0.$procmux$537: { $flatten\control.\uart0.$procmux$499_CMP $flatten\control.\uart0.$procmux$416_CMP $auto$opt_reduce.cc:134:opt_mux$1656 }
    New ctrl vector for $pmux cell $flatten\control.\uart0.$procmux$547: { $flatten\control.\uart0.$procmux$499_CMP $flatten\control.\uart0.$procmux$416_CMP $auto$opt_reduce.cc:134:opt_mux$1658 }
    New ctrl vector for $pmux cell $flatten\control.\uart0.$procmux$866: { $flatten\control.\uart0.$procmux$844_CMP $flatten\control.\uart0.$procmux$721_CMP $flatten\control.\uart0.$procmux$667_CMP $flatten\control.\uart0.$procmux$576_CMP $flatten\control.\uart0.$procmux$860_CMP $auto$opt_reduce.cc:134:opt_mux$1660 }
    New ctrl vector for $pmux cell $flatten\control.\uart0.$procmux$875: { $flatten\control.\uart0.$procmux$576_CMP $auto$opt_reduce.cc:134:opt_mux$1662 }
    New ctrl vector for $pmux cell $flatten\control.\uart0.$procmux$884: { $flatten\control.\uart0.$procmux$721_CMP $flatten\control.\uart0.$procmux$576_CMP $auto$opt_reduce.cc:134:opt_mux$1664 }
    New ctrl vector for $pmux cell $flatten\control.\uart0.$procmux$893: { $flatten\control.\uart0.$procmux$721_CMP $flatten\control.\uart0.$procmux$667_CMP $flatten\control.\uart0.$procmux$576_CMP $auto$opt_reduce.cc:134:opt_mux$1666 }
    New ctrl vector for $pmux cell $flatten\control.\uart0.$procmux$902: { $flatten\control.\uart0.$procmux$721_CMP $flatten\control.\uart0.$procmux$667_CMP $flatten\control.\uart0.$procmux$576_CMP $auto$opt_reduce.cc:134:opt_mux$1668 }
    New ctrl vector for $pmux cell $flatten\control.\uart0.$procmux$552: { $flatten\control.\uart0.$procmux$499_CMP $flatten\control.\uart0.$procmux$416_CMP $auto$opt_reduce.cc:134:opt_mux$1670 }
  Optimizing cells in module \pulse_gen.
Performed a total of 10 changes.

6.11.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pulse_gen'.
<suppressed ~12 debug messages>
Removed a total of 4 cells.

6.11.6. Executing OPT_DFF pass (perform DFF optimizations).

6.11.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_gen..
Removed 0 unused cells and 284 unused wires.
<suppressed ~1 debug messages>

6.11.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_gen.

6.11.9. Rerunning OPT passes. (Maybe there is more to do..)

6.11.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \pulse_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~55 debug messages>

6.11.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \pulse_gen.
Performed a total of 0 changes.

6.11.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pulse_gen'.
Removed a total of 0 cells.

6.11.13. Executing OPT_DFF pass (perform DFF optimizations).

6.11.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_gen..

6.11.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_gen.

6.11.16. Finished OPT passes. (There is nothing left to do.)

6.12. Executing FSM pass (extract and optimize FSM).

6.12.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking pulse_gen.control.readstate as FSM state register:
    Register has an initialization value.
Not marking pulse_gen.control.state as FSM state register:
    Register has an initialization value.
    Circuit seems to be self-resetting.
Not marking pulse_gen.control.uart0.recv_state as FSM state register:
    Register has an initialization value.
    Circuit seems to be self-resetting.
Not marking pulse_gen.control.uart0.tx_state as FSM state register:
    Users of register don't seem to benefit from recoding.
    Register has an initialization value.
    Circuit seems to be self-resetting.

6.12.2. Executing FSM_EXTRACT pass (extracting FSM from design).

6.12.3. Executing FSM_OPT pass (simple optimizations of FSMs).

6.12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_gen..

6.12.5. Executing FSM_OPT pass (simple optimizations of FSMs).

6.12.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

6.12.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

6.12.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

6.13. Executing OPT pass (performing simple optimizations).

6.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_gen.

6.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pulse_gen'.
Removed a total of 0 cells.

6.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \pulse_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~55 debug messages>

6.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \pulse_gen.
Performed a total of 0 changes.

6.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pulse_gen'.
Removed a total of 0 cells.

6.13.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $flatten\pulses.$procdff$1630 ($dff) from module pulse_gen (D = $flatten\pulses.$procmux$1338_Y, Q = \pulses.cblock_on).
Adding EN signal on $flatten\pulses.$procdff$1629 ($dff) from module pulse_gen (D = $flatten\pulses.$procmux$1361_Y, Q = \pulses.cblock_delay).
Adding EN signal on $flatten\pulses.$procdff$1628 ($dff) from module pulse_gen (D = $flatten\pulses.$procmux$1381_Y, Q = \pulses.cpulse).
Adding EN signal on $flatten\pulses.$procdff$1627 ($dff) from module pulse_gen (D = $flatten\pulses.$procmux$1401_Y, Q = \pulses.cdelay).
Adding EN signal on $flatten\pulses.$procdff$1626 ($dff) from module pulse_gen (D = $flatten\pulses.$procmux$1422_Y, Q = \pulses.ccount).
Adding SRST signal on $auto$opt_dff.cc:764:run$1761 ($dffe) from module pulse_gen (D = $flatten\pulses.$procmux$1420_Y, Q = \pulses.ccount, rval = 8'00000000).
Adding EN signal on $flatten\pulses.$procdff$1625 ($dff) from module pulse_gen (D = $flatten\pulses.$sub$pulses.v:187$14_Y [23:0], Q = \pulses.nutation_pulse_stop).
Adding EN signal on $flatten\pulses.$procdff$1624 ($dff) from module pulse_gen (D = $flatten\pulses.$sub$pulses.v:187$15_Y [23:0], Q = \pulses.nutation_pulse_start).
Adding EN signal on $flatten\pulses.$procdff$1623 ($dff) from module pulse_gen (D = $flatten\pulses.$procmux$1448_Y, Q = \pulses.sync_down).
Adding EN signal on $flatten\pulses.$procdff$1622 ($dff) from module pulse_gen (D = $flatten\pulses.$procmux$1475_Y, Q = \pulses.inh).
Adding SRST signal on $auto$opt_dff.cc:764:run$1796 ($dffe) from module pulse_gen (D = $flatten\pulses.$procmux$1472_Y, Q = \pulses.inh, rval = 1'0).
Adding EN signal on $flatten\pulses.$procdff$1621 ($dff) from module pulse_gen (D = $flatten\pulses.$ternary$pulses.v:190$20_Y [0], Q = \pulses.nut_pulse).
Adding SRST signal on $auto$opt_dff.cc:764:run$1798 ($dffe) from module pulse_gen (D = $flatten\pulses.$ternary$pulses.v:191$19_Y [0], Q = \pulses.nut_pulse, rval = 1'0).
Adding EN signal on $flatten\pulses.$procdff$1620 ($dff) from module pulse_gen (D = $flatten\pulses.$ternary$pulses.v:193$28_Y [0], Q = \pulses.pulse2).
Adding SRST signal on $auto$opt_dff.cc:764:run$1800 ($dffe) from module pulse_gen (D = $flatten\pulses.$ternary$pulses.v:194$27_Y [0], Q = \pulses.pulse2, rval = 1'0).
Adding EN signal on $flatten\pulses.$procdff$1619 ($dff) from module pulse_gen (D = $flatten\pulses.$logic_or$pulses.v:310$64_Y, Q = \pulses.pulse).
Adding EN signal on $flatten\pulses.$procdff$1618 ($dff) from module pulse_gen (D = $flatten\pulses.$procmux$1503_Y, Q = \pulses.sync).
Adding SRST signal on $flatten\pulses.$procdff$1617 ($dff) from module pulse_gen (D = $flatten\pulses.$add$pulses.v:309$62_Y, Q = \pulses.counter, rval = 0).
Adding EN signal on $flatten\pulses.$procdff$1616 ($dff) from module pulse_gen (D = $flatten\pulses.$procmux$1523_Y, Q = \pulses.pulses).
Adding SRST signal on $auto$opt_dff.cc:764:run$1833 ($dffe) from module pulse_gen (D = $flatten\pulses.$procmux$1518_Y, Q = \pulses.pulses, rval = 1'1).
Adding EN signal on $flatten\pulses.$procdff$1615 ($dff) from module pulse_gen (D = $flatten\pulses.$procmux$1547_Y, Q = \pulses.post_att_val).
Adding EN signal on $flatten\pulses.$procdff$1614 ($dff) from module pulse_gen (D = $flatten\pulses.$procmux$1563_Y, Q = \pulses.pre_att_val).
Adding EN signal on $flatten\control.\uart0.$procdff$1584 ($dff) from module pulse_gen (D = $flatten\control.\uart0.$0\tx_data[7:0], Q = \control.uart0.tx_data).
Adding EN signal on $flatten\control.\uart0.$procdff$1583 ($dff) from module pulse_gen (D = $flatten\control.\uart0.$0\tx_bits_remaining[3:0], Q = \control.uart0.tx_bits_remaining).
Adding EN signal on $flatten\control.\uart0.$procdff$1582 ($dff) from module pulse_gen (D = $flatten\control.\uart0.$0\tx_state[1:0], Q = \control.uart0.tx_state).
Adding EN signal on $flatten\control.\uart0.$procdff$1581 ($dff) from module pulse_gen (D = $flatten\control.\uart0.$0\tx_out[0:0], Q = \control.uart0.tx_out).
Adding EN signal on $flatten\control.\uart0.$procdff$1580 ($dff) from module pulse_gen (D = $flatten\control.\uart0.$0\rx_data[7:0], Q = \control.uart0.rx_data).
Adding EN signal on $flatten\control.\uart0.$procdff$1579 ($dff) from module pulse_gen (D = $flatten\control.\uart0.$0\rx_bits_remaining[3:0], Q = \control.uart0.rx_bits_remaining).
Adding EN signal on $flatten\control.\uart0.$procdff$1578 ($dff) from module pulse_gen (D = $flatten\control.\uart0.$0\recv_state[2:0], Q = \control.uart0.recv_state).
Adding EN signal on $flatten\control.\uart0.$procdff$1575 ($dff) from module pulse_gen (D = $flatten\control.\uart0.$0\rx_sample_countdown[3:0], Q = \control.uart0.rx_sample_countdown).
Adding EN signal on $flatten\control.\uart0.$procdff$1574 ($dff) from module pulse_gen (D = $flatten\control.\uart0.$0\rx_samples[3:0], Q = \control.uart0.rx_samples).
Adding EN signal on $flatten\control.$procdff$1611 ($dff) from module pulse_gen (D = $flatten\control.$0\state[2:0], Q = \control.state).
Adding EN signal on $flatten\control.$procdff$1610 ($dff) from module pulse_gen (D = $flatten\control.$0\readcount[5:0], Q = \control.readcount).
Adding EN signal on $flatten\control.$procdff$1609 ($dff) from module pulse_gen (D = $flatten\control.$procmux$1102_Y, Q = \control.readstate).
Adding EN signal on $flatten\control.$procdff$1608 ($dff) from module pulse_gen (D = $flatten\control.$0\writestate[0:0], Q = \control.writestate).
Adding EN signal on $flatten\control.$procdff$1607 ($dff) from module pulse_gen (D = $flatten\control.$add$pulse_control.v:181$96_Y, Q = \control.voutput).
Adding EN signal on $flatten\control.$procdff$1606 ($dff) from module pulse_gen (D = \control.uart0.rx_data, Q = \control.vcontrol).
Adding EN signal on $flatten\control.$procdff$1605 ($dff) from module pulse_gen (D = $flatten\control.$or$pulse_control.v:0$91_Y, Q = \control.vinput).
Adding EN signal on $flatten\control.$procdff$1604 ($dff) from module pulse_gen (D = \control.voutput, Q = \control.tx_byte).
Adding EN signal on $flatten\control.$procdff$1603 ($dff) from module pulse_gen (D = $flatten\control.$0\transmit[0:0], Q = \control.transmit).
Adding EN signal on $flatten\control.$procdff$1602 ($dff) from module pulse_gen (D = 1'1, Q = \control.recv_set).
Adding EN signal on $flatten\control.$procdff$1600 ($dff) from module pulse_gen (D = \control.vinput [7:0], Q = \control.cpmg).
Adding EN signal on $flatten\control.$procdff$1598 ($dff) from module pulse_gen (D = \control.vinput [15:8], Q = \control.pulse_block).
Adding EN signal on $flatten\control.$procdff$1597 ($dff) from module pulse_gen (D = \control.vinput [0], Q = \control.block).
Adding EN signal on $flatten\control.$procdff$1596 ($dff) from module pulse_gen (D = \control.vinput [7:0], Q = \control.nut_wid).
Adding EN signal on $flatten\control.$procdff$1595 ($dff) from module pulse_gen (D = \control.vinput [31:16], Q = \control.nut_del).
Adding EN signal on $flatten\control.$procdff$1594 ($dff) from module pulse_gen (D = \control.vinput [31:16], Q = \control.p2width2).
Adding EN signal on $flatten\control.$procdff$1593 ($dff) from module pulse_gen (D = \control.vinput [31:16], Q = \control.delay2).
Adding EN signal on $flatten\control.$procdff$1592 ($dff) from module pulse_gen (D = $flatten\control.$add$pulse_control.v:195$97_Y, Q = \control.p1width2).
Adding EN signal on $flatten\control.$procdff$1591 ($dff) from module pulse_gen (D = \control.vinput [31:16], Q = \control.p1start2).
Adding EN signal on $flatten\control.$procdff$1590 ($dff) from module pulse_gen (D = \control.vinput [15:0], Q = \control.p2width).
Adding EN signal on $flatten\control.$procdff$1589 ($dff) from module pulse_gen (D = \control.vinput [15:0], Q = \control.delay).
Adding EN signal on $flatten\control.$procdff$1588 ($dff) from module pulse_gen (D = \control.vinput [15:0], Q = \control.p1width).
Adding EN signal on $flatten\control.$procdff$1587 ($dff) from module pulse_gen (D = \control.vinput, Q = \control.period).
Adding EN signal on $flatten\control.$procdff$1586 ($dff) from module pulse_gen (D = \control.vinput [14:8], Q = \control.post_att).
Adding EN signal on $flatten\control.$procdff$1585 ($dff) from module pulse_gen (D = \control.vinput [6:0], Q = \control.pre_att).

6.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_gen..
Removed 76 unused cells and 76 unused wires.
<suppressed ~77 debug messages>

6.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_gen.
<suppressed ~22 debug messages>

6.13.9. Rerunning OPT passes. (Maybe there is more to do..)

6.13.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \pulse_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~31 debug messages>

6.13.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \pulse_gen.
    New ctrl vector for $pmux cell $flatten\control.\uart0.$procmux$532: { $flatten\control.\uart0.$procmux$499_CMP $flatten\control.\uart0.$procmux$416_CMP }
    New ctrl vector for $pmux cell $flatten\control.\uart0.$procmux$537: { $flatten\control.\uart0.$procmux$499_CMP $flatten\control.\uart0.$procmux$416_CMP }
    New ctrl vector for $pmux cell $flatten\control.\uart0.$procmux$547: { $flatten\control.\uart0.$procmux$499_CMP $flatten\control.\uart0.$procmux$416_CMP }
    New ctrl vector for $pmux cell $flatten\control.\uart0.$procmux$875: $flatten\control.\uart0.$procmux$576_CMP
    New ctrl vector for $pmux cell $flatten\control.\uart0.$procmux$884: { $flatten\control.\uart0.$procmux$721_CMP $flatten\control.\uart0.$procmux$576_CMP }
    New ctrl vector for $pmux cell $flatten\control.\uart0.$procmux$893: { $flatten\control.\uart0.$procmux$721_CMP $flatten\control.\uart0.$procmux$667_CMP $flatten\control.\uart0.$procmux$576_CMP }
    New ctrl vector for $pmux cell $flatten\control.\uart0.$procmux$902: { $flatten\control.\uart0.$procmux$721_CMP $flatten\control.\uart0.$procmux$667_CMP $flatten\control.\uart0.$procmux$576_CMP }
  Optimizing cells in module \pulse_gen.
Performed a total of 7 changes.

6.13.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pulse_gen'.
<suppressed ~258 debug messages>
Removed a total of 86 cells.

6.13.13. Executing OPT_DFF pass (perform DFF optimizations).

6.13.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_gen..
Removed 0 unused cells and 86 unused wires.
<suppressed ~1 debug messages>

6.13.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_gen.

6.13.16. Rerunning OPT passes. (Maybe there is more to do..)

6.13.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \pulse_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~31 debug messages>

6.13.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \pulse_gen.
Performed a total of 0 changes.

6.13.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pulse_gen'.
Removed a total of 0 cells.

6.13.20. Executing OPT_DFF pass (perform DFF optimizations).

6.13.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_gen..

6.13.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_gen.

6.13.23. Finished OPT passes. (There is nothing left to do.)

6.14. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 9) from port B of cell pulse_gen.$auto$opt_dff.cc:218:make_patterns_logic$1783 ($ne).
Removed top 1 bits (of 7) from port B of cell pulse_gen.$auto$opt_dff.cc:218:make_patterns_logic$1806 ($ne).
Removed top 1 bits (of 6) from port B of cell pulse_gen.$auto$opt_dff.cc:218:make_patterns_logic$1826 ($ne).
Removed top 1 bits (of 5) from port B of cell pulse_gen.$auto$opt_dff.cc:218:make_patterns_logic$1828 ($ne).
Removed top 1 bits (of 2) from port B of cell pulse_gen.$auto$opt_dff.cc:218:make_patterns_logic$1866 ($ne).
Removed top 1 bits (of 5) from port B of cell pulse_gen.$auto$opt_dff.cc:218:make_patterns_logic$1716 ($ne).
Removed top 2 bits (of 3) from mux cell pulse_gen.$flatten\control.\uart0.$ternary$uart.v:193$142 ($mux).
Removed top 30 bits (of 32) from port B of cell pulse_gen.$flatten\control.\uart0.$gt$uart.v:201$144 ($gt).
Removed top 2 bits (of 3) from mux cell pulse_gen.$flatten\control.\uart0.$ternary$uart.v:226$148 ($mux).
Removed top 1 bits (of 2) from mux cell pulse_gen.$flatten\control.\uart0.$ternary$uart.v:301$155 ($mux).
Removed top 1 bits (of 2) from port B of cell pulse_gen.$flatten\control.\uart0.$procmux$416_CMP0 ($eq).
Removed top 1 bits (of 11) from mux cell pulse_gen.$flatten\control.\uart0.$procmux$421 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$431 ($mux).
Removed top 1 bits (of 8) from port B of cell pulse_gen.$auto$opt_dff.cc:218:make_patterns_logic$1674 ($ne).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$451 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$460 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$467 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$474 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$481 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$496 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$504 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$512 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$528 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$561 ($mux).
Removed top 1 bits (of 3) from port B of cell pulse_gen.$flatten\control.\uart0.$procmux$576_CMP0 ($eq).
Removed top 5 bits (of 15) from mux cell pulse_gen.$flatten\control.\uart0.$procmux$583 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$606 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$624 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$633 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$642 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$651 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$662 ($mux).
Removed top 1 bits (of 3) from port B of cell pulse_gen.$flatten\control.\uart0.$procmux$667_CMP0 ($eq).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$674 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$684 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$704 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$716 ($mux).
Removed top 2 bits (of 3) from port B of cell pulse_gen.$flatten\control.\uart0.$procmux$721_CMP0 ($eq).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$730 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$758 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$785 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$796 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$818 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$829 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$841 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$875 ($mux).
Removed top 5 bits (of 8) from port B of cell pulse_gen.$flatten\control.$procmux$1310_CMP0 ($eq).
Removed top 7 bits (of 8) from port B of cell pulse_gen.$flatten\control.$procmux$1304_CMP0 ($eq).
Removed top 6 bits (of 8) from port B of cell pulse_gen.$flatten\control.$procmux$1250_CMP0 ($eq).
Removed top 6 bits (of 8) from port B of cell pulse_gen.$flatten\control.$procmux$1226_CMP0 ($eq).
Removed top 5 bits (of 8) from port B of cell pulse_gen.$flatten\control.$procmux$1209_CMP0 ($eq).
Removed top 5 bits (of 8) from port B of cell pulse_gen.$flatten\control.$procmux$1193_CMP0 ($eq).
Removed top 5 bits (of 8) from port B of cell pulse_gen.$flatten\control.$procmux$1175_CMP0 ($eq).
Removed cell pulse_gen.$flatten\control.$procmux$1152 ($mux).
Removed cell pulse_gen.$flatten\control.$procmux$1148 ($mux).
Removed cell pulse_gen.$flatten\control.$procmux$1108 ($mux).
Removed top 1 bits (of 2) from mux cell pulse_gen.$flatten\control.$procmux$1106 ($mux).
Removed top 1 bits (of 2) from port B of cell pulse_gen.$flatten\control.$procmux$1103_CMP0 ($eq).
Removed cell pulse_gen.$flatten\control.$procmux$1100 ($mux).
Removed cell pulse_gen.$flatten\control.$procmux$1093 ($mux).
Removed cell pulse_gen.$flatten\control.$procmux$1091 ($mux).
Removed cell pulse_gen.$flatten\control.$procmux$1078 ($mux).
Removed cell pulse_gen.$flatten\control.$procmux$1076 ($mux).
Removed cell pulse_gen.$flatten\control.$procmux$1074 ($mux).
Removed top 1 bits (of 3) from port B of cell pulse_gen.$flatten\control.$procmux$1068_CMP0 ($eq).
Removed cell pulse_gen.$flatten\control.$procmux$1064 ($mux).
Removed cell pulse_gen.$flatten\control.$procmux$1060 ($mux).
Removed top 2 bits (of 3) from port B of cell pulse_gen.$flatten\control.$procmux$1055_CMP0 ($eq).
Removed top 28 bits (of 32) from port B of cell pulse_gen.$flatten\control.$add$pulse_control.v:165$92 ($add).
Removed top 26 bits (of 32) from port Y of cell pulse_gen.$flatten\control.$add$pulse_control.v:165$92 ($add).
Removed top 26 bits (of 32) from port B of cell pulse_gen.$flatten\control.$shl$pulse_control.v:0$88 ($shl).
Removed top 24 bits (of 32) from port Y of cell pulse_gen.$flatten\control.$and$pulse_control.v:0$86 ($and).
Removed top 26 bits (of 32) from port B of cell pulse_gen.$flatten\control.$shl$pulse_control.v:0$85 ($shl).
Removed top 1 bits (of 3) from port B of cell pulse_gen.$auto$opt_dff.cc:218:make_patterns_logic$1969 ($ne).
Removed top 1 bits (of 2) from port B of cell pulse_gen.$auto$opt_dff.cc:218:make_patterns_logic$1965 ($ne).
Removed top 2 bits (of 3) from port B of cell pulse_gen.$auto$opt_dff.cc:218:make_patterns_logic$1959 ($ne).
Removed top 1 bits (of 2) from port B of cell pulse_gen.$auto$opt_dff.cc:218:make_patterns_logic$1987 ($ne).
Removed cell pulse_gen.$flatten\pulses.$procmux$1558 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1542 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1540 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1538 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1536 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1530 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1528 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1514 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1512 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1498 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1496 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1494 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1492 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1470 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1468 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1466 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1464 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1458 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1456 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1446 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1444 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1442 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1440 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1420 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1418 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1416 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1414 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1412 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1410 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1399 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1397 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1395 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1393 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1379 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1377 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1375 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1373 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1359 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1357 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1355 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1353 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1351 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1349 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1347 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1336 ($mux).
Removed top 16 bits (of 32) from port B of cell pulse_gen.$flatten\pulses.$procmux$1337_CMP0 ($eq).
Removed cell pulse_gen.$flatten\pulses.$procmux$1334 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1332 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1330 ($mux).
Removed top 16 bits (of 32) from port B of cell pulse_gen.$flatten\pulses.$procmux$1331_CMP0 ($eq).
Removed cell pulse_gen.$flatten\pulses.$procmux$1328 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1326 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1324 ($mux).
Removed top 31 bits (of 32) from port B of cell pulse_gen.$flatten\pulses.$add$pulses.v:309$62 ($add).
Removed top 29 bits (of 32) from port B of cell pulse_gen.$flatten\pulses.$sub$pulses.v:300$60 ($sub).
Removed top 7 bits (of 32) from port Y of cell pulse_gen.$flatten\pulses.$sub$pulses.v:300$60 ($sub).
Removed top 31 bits (of 32) from port B of cell pulse_gen.$flatten\pulses.$add$pulses.v:297$59 ($add).
Removed top 24 bits (of 32) from port Y of cell pulse_gen.$flatten\pulses.$add$pulses.v:297$59 ($add).
Removed top 29 bits (of 32) from port B of cell pulse_gen.$flatten\pulses.$sub$pulses.v:292$58 ($sub).
Removed top 15 bits (of 32) from port B of cell pulse_gen.$flatten\pulses.$add$pulses.v:292$57 ($add).
Removed cell pulse_gen.$flatten\pulses.$ternary$pulses.v:275$52 ($mux).
Removed top 31 bits (of 32) from port B of cell pulse_gen.$flatten\pulses.$sub$pulses.v:275$49 ($sub).
Removed top 23 bits (of 32) from port Y of cell pulse_gen.$flatten\pulses.$sub$pulses.v:275$49 ($sub).
Removed top 28 bits (of 32) from port B of cell pulse_gen.$flatten\pulses.$add$pulses.v:264$48 ($add).
Removed top 16 bits (of 32) from port Y of cell pulse_gen.$flatten\pulses.$add$pulses.v:264$48 ($add).
Removed top 16 bits (of 32) from port A of cell pulse_gen.$flatten\pulses.$add$pulses.v:264$48 ($add).
Removed cell pulse_gen.$flatten\pulses.$ternary$pulses.v:254$41 ($mux).
Removed top 29 bits (of 32) from port B of cell pulse_gen.$flatten\pulses.$sub$pulses.v:241$38 ($sub).
Removed top 15 bits (of 32) from port B of cell pulse_gen.$flatten\pulses.$add$pulses.v:241$37 ($add).
Removed top 28 bits (of 32) from port B of cell pulse_gen.$flatten\pulses.$sub$pulses.v:238$32 ($sub).
Removed top 15 bits (of 32) from port Y of cell pulse_gen.$flatten\pulses.$sub$pulses.v:238$32 ($sub).
Removed top 15 bits (of 32) from port Y of cell pulse_gen.$flatten\pulses.$add$pulses.v:237$31 ($add).
Removed top 31 bits (of 32) from mux cell pulse_gen.$flatten\pulses.$ternary$pulses.v:201$30 ($mux).
Removed top 31 bits (of 32) from mux cell pulse_gen.$flatten\pulses.$ternary$pulses.v:194$27 ($mux).
Removed top 31 bits (of 32) from mux cell pulse_gen.$flatten\pulses.$ternary$pulses.v:195$26 ($mux).
Removed top 31 bits (of 32) from mux cell pulse_gen.$flatten\pulses.$ternary$pulses.v:196$25 ($mux).
Removed top 31 bits (of 32) from mux cell pulse_gen.$flatten\pulses.$ternary$pulses.v:191$19 ($mux).
Removed top 8 bits (of 32) from port Y of cell pulse_gen.$flatten\pulses.$sub$pulses.v:187$15 ($sub).
Removed top 8 bits (of 32) from port A of cell pulse_gen.$flatten\pulses.$sub$pulses.v:187$15 ($sub).
Removed top 8 bits (of 32) from port Y of cell pulse_gen.$flatten\pulses.$sub$pulses.v:187$14 ($sub).
Removed top 8 bits (of 32) from port A of cell pulse_gen.$flatten\pulses.$sub$pulses.v:187$14 ($sub).
Removed top 28 bits (of 32) from port B of cell pulse_gen.$flatten\pulses.$add$pulses.v:165$7 ($add).
Removed top 16 bits (of 32) from port Y of cell pulse_gen.$flatten\pulses.$add$pulses.v:165$7 ($add).
Removed top 16 bits (of 32) from port A of cell pulse_gen.$flatten\pulses.$add$pulses.v:165$7 ($add).
Removed top 16 bits (of 32) from port Y of cell pulse_gen.$flatten\pulses.$add$pulses.v:165$6 ($add).
Removed top 26 bits (of 32) from wire pulse_gen.$flatten\control.$add$pulse_control.v:165$92_Y.
Removed top 24 bits (of 32) from wire pulse_gen.$flatten\control.$and$pulse_control.v:0$86_Y.
Removed top 1 bits (of 2) from wire pulse_gen.$flatten\control.$procmux$1106_Y.
Removed top 1 bits (of 8) from wire pulse_gen.$flatten\control.\uart0.$3\tx_data[7:0].
Removed top 1 bits (of 8) from wire pulse_gen.$flatten\control.\uart0.$4\tx_data[7:0].
Removed top 1 bits (of 11) from wire pulse_gen.$flatten\control.\uart0.$5\tx_clk[10:0].
Removed top 2 bits (of 3) from wire pulse_gen.$flatten\control.\uart0.$6\recv_state[2:0].
Removed top 5 bits (of 15) from wire pulse_gen.$flatten\control.\uart0.$8\rx_clk[14:0].
Removed top 2 bits (of 3) from wire pulse_gen.$flatten\control.\uart0.$ternary$uart.v:193$142_Y.
Removed top 1 bits (of 2) from wire pulse_gen.$flatten\control.\uart0.$ternary$uart.v:301$155_Y.
Removed top 16 bits (of 32) from wire pulse_gen.$flatten\pulses.$add$pulses.v:165$6_Y.
Removed top 15 bits (of 32) from wire pulse_gen.$flatten\pulses.$add$pulses.v:237$31_Y.
Removed top 8 bits (of 32) from wire pulse_gen.$flatten\pulses.$sub$pulses.v:187$14_Y.
Removed top 8 bits (of 32) from wire pulse_gen.$flatten\pulses.$sub$pulses.v:187$15_Y.
Removed top 31 bits (of 32) from wire pulse_gen.$flatten\pulses.$ternary$pulses.v:191$19_Y.
Removed top 31 bits (of 32) from wire pulse_gen.$flatten\pulses.$ternary$pulses.v:195$26_Y.

6.15. Executing PEEPOPT pass (run peephole optimizers).

6.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_gen..
Removed 0 unused cells and 110 unused wires.
<suppressed ~1 debug messages>

6.17. Executing SHARE pass (SAT-based resource sharing).

6.18. Executing TECHMAP pass (map to technology primitives).

6.18.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

6.18.2. Continuing TECHMAP pass.
Using template $paramod$5c6790619fdd520f2101529d9884f145abb8b880\_90_lut_cmp_ for cells of type $gt.
No more expansions possible.
<suppressed ~170 debug messages>

6.19. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_gen.
<suppressed ~2 debug messages>

6.20. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_gen..
Removed 0 unused cells and 5 unused wires.
<suppressed ~1 debug messages>

6.21. Executing TECHMAP pass (map to technology primitives).

6.21.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/mul2dsp.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/mul2dsp.v' to AST representation.
Generating RTLIL representation for module `\_80_mul'.
Generating RTLIL representation for module `\_90_soft_mul'.
Successfully finished Verilog frontend.

6.21.2. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ecp5/dsp_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ecp5/dsp_map.v' to AST representation.
Generating RTLIL representation for module `\$__MUL18X18'.
Successfully finished Verilog frontend.

6.21.3. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~5 debug messages>

6.22. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module pulse_gen:
  creating $macc model for $flatten\control.$add$pulse_control.v:165$92 ($add).
  creating $macc model for $flatten\control.$add$pulse_control.v:181$94 ($add).
  creating $macc model for $flatten\control.$add$pulse_control.v:181$95 ($add).
  creating $macc model for $flatten\control.$add$pulse_control.v:181$96 ($add).
  creating $macc model for $flatten\control.$add$pulse_control.v:195$97 ($add).
  creating $macc model for $flatten\control.\uart0.$add$uart.v:189$139 ($add).
  creating $macc model for $flatten\control.\uart0.$sub$uart.v:145$132 ($sub).
  creating $macc model for $flatten\control.\uart0.$sub$uart.v:149$134 ($sub).
  creating $macc model for $flatten\control.\uart0.$sub$uart.v:192$140 ($sub).
  creating $macc model for $flatten\control.\uart0.$sub$uart.v:210$145 ($sub).
  creating $macc model for $flatten\control.\uart0.$sub$uart.v:283$153 ($sub).
  creating $macc model for $flatten\pulses.$add$pulses.v:162$2 ($add).
  creating $macc model for $flatten\pulses.$add$pulses.v:163$3 ($add).
  creating $macc model for $flatten\pulses.$add$pulses.v:163$4 ($add).
  creating $macc model for $flatten\pulses.$add$pulses.v:164$5 ($add).
  creating $macc model for $flatten\pulses.$add$pulses.v:165$6 ($add).
  creating $macc model for $flatten\pulses.$add$pulses.v:165$7 ($add).
  creating $macc model for $flatten\pulses.$add$pulses.v:237$31 ($add).
  creating $macc model for $flatten\pulses.$add$pulses.v:240$34 ($add).
  creating $macc model for $flatten\pulses.$add$pulses.v:241$37 ($add).
  creating $macc model for $flatten\pulses.$add$pulses.v:262$43 ($add).
  creating $macc model for $flatten\pulses.$add$pulses.v:262$44 ($add).
  creating $macc model for $flatten\pulses.$add$pulses.v:263$47 ($add).
  creating $macc model for $flatten\pulses.$add$pulses.v:264$48 ($add).
  creating $macc model for $flatten\pulses.$add$pulses.v:291$55 ($add).
  creating $macc model for $flatten\pulses.$add$pulses.v:292$57 ($add).
  creating $macc model for $flatten\pulses.$add$pulses.v:297$59 ($add).
  creating $macc model for $flatten\pulses.$add$pulses.v:309$62 ($add).
  creating $macc model for $flatten\pulses.$sub$pulses.v:187$14 ($sub).
  creating $macc model for $flatten\pulses.$sub$pulses.v:187$15 ($sub).
  creating $macc model for $flatten\pulses.$sub$pulses.v:238$32 ($sub).
  creating $macc model for $flatten\pulses.$sub$pulses.v:241$38 ($sub).
  creating $macc model for $flatten\pulses.$sub$pulses.v:275$49 ($sub).
  creating $macc model for $flatten\pulses.$sub$pulses.v:292$58 ($sub).
  creating $macc model for $flatten\pulses.$sub$pulses.v:300$60 ($sub).
  merging $macc model for $flatten\pulses.$add$pulses.v:292$57 into $flatten\pulses.$sub$pulses.v:292$58.
  merging $macc model for $flatten\pulses.$add$pulses.v:241$37 into $flatten\pulses.$sub$pulses.v:241$38.
  merging $macc model for $flatten\pulses.$add$pulses.v:262$43 into $flatten\pulses.$add$pulses.v:262$44.
  merging $macc model for $flatten\pulses.$add$pulses.v:165$6 into $flatten\pulses.$add$pulses.v:165$7.
  merging $macc model for $flatten\pulses.$add$pulses.v:163$3 into $flatten\pulses.$add$pulses.v:163$4.
  merging $macc model for $flatten\control.$add$pulse_control.v:181$95 into $flatten\control.$add$pulse_control.v:181$96.
  merging $macc model for $flatten\control.$add$pulse_control.v:181$94 into $flatten\control.$add$pulse_control.v:181$96.
  creating $alu model for $macc $flatten\pulses.$add$pulses.v:309$62.
  creating $alu model for $macc $flatten\pulses.$add$pulses.v:297$59.
  creating $alu model for $macc $flatten\pulses.$sub$pulses.v:187$14.
  creating $alu model for $macc $flatten\pulses.$add$pulses.v:291$55.
  creating $alu model for $macc $flatten\pulses.$add$pulses.v:264$48.
  creating $alu model for $macc $flatten\pulses.$add$pulses.v:263$47.
  creating $alu model for $macc $flatten\pulses.$sub$pulses.v:238$32.
  creating $alu model for $macc $flatten\pulses.$sub$pulses.v:187$15.
  creating $alu model for $macc $flatten\pulses.$add$pulses.v:240$34.
  creating $alu model for $macc $flatten\pulses.$add$pulses.v:237$31.
  creating $alu model for $macc $flatten\pulses.$add$pulses.v:164$5.
  creating $alu model for $macc $flatten\pulses.$sub$pulses.v:275$49.
  creating $alu model for $macc $flatten\pulses.$add$pulses.v:162$2.
  creating $alu model for $macc $flatten\control.\uart0.$sub$uart.v:283$153.
  creating $alu model for $macc $flatten\control.\uart0.$sub$uart.v:210$145.
  creating $alu model for $macc $flatten\control.\uart0.$sub$uart.v:192$140.
  creating $alu model for $macc $flatten\control.\uart0.$sub$uart.v:149$134.
  creating $alu model for $macc $flatten\control.\uart0.$sub$uart.v:145$132.
  creating $alu model for $macc $flatten\control.\uart0.$add$uart.v:189$139.
  creating $alu model for $macc $flatten\control.$add$pulse_control.v:195$97.
  creating $alu model for $macc $flatten\pulses.$sub$pulses.v:300$60.
  creating $alu model for $macc $flatten\control.$add$pulse_control.v:165$92.
  creating $macc cell for $flatten\pulses.$sub$pulses.v:241$38: $auto$alumacc.cc:365:replace_macc$2087
  creating $macc cell for $flatten\pulses.$add$pulses.v:262$44: $auto$alumacc.cc:365:replace_macc$2088
  creating $macc cell for $flatten\control.$add$pulse_control.v:181$96: $auto$alumacc.cc:365:replace_macc$2089
  creating $macc cell for $flatten\pulses.$sub$pulses.v:292$58: $auto$alumacc.cc:365:replace_macc$2090
  creating $macc cell for $flatten\pulses.$add$pulses.v:165$7: $auto$alumacc.cc:365:replace_macc$2091
  creating $macc cell for $flatten\pulses.$add$pulses.v:163$4: $auto$alumacc.cc:365:replace_macc$2092
  creating $alu model for $flatten\pulses.$lt$pulses.v:190$17 ($lt): new $alu
  creating $alu model for $flatten\pulses.$lt$pulses.v:191$18 ($lt): new $alu
  creating $alu model for $flatten\pulses.$lt$pulses.v:193$21 ($lt): new $alu
  creating $alu model for $flatten\pulses.$lt$pulses.v:194$22 ($lt): new $alu
  creating $alu model for $flatten\pulses.$lt$pulses.v:195$23 ($lt): new $alu
  creating $alu model for $flatten\pulses.$lt$pulses.v:196$24 ($lt): new $alu
  creating $alu model for $flatten\pulses.$lt$pulses.v:201$29 ($lt): new $alu
  creating $alu model for $flatten\pulses.$lt$pulses.v:254$39 ($lt): new $alu
  creating $alu model for $flatten\pulses.$lt$pulses.v:287$54 ($lt): new $alu
  creating $alu model for $flatten\pulses.$lt$pulses.v:309$61 ($lt): new $alu
  creating $alu model for $flatten\pulses.$eq$pulses.v:275$50 ($eq): merged with $flatten\pulses.$lt$pulses.v:287$54.
  creating $alu cell for $flatten\pulses.$lt$pulses.v:309$61: $auto$alumacc.cc:485:replace_alu$2103
  creating $alu cell for $flatten\pulses.$lt$pulses.v:287$54, $flatten\pulses.$eq$pulses.v:275$50: $auto$alumacc.cc:485:replace_alu$2108
  creating $alu cell for $flatten\pulses.$lt$pulses.v:254$39: $auto$alumacc.cc:485:replace_alu$2115
  creating $alu cell for $flatten\pulses.$lt$pulses.v:201$29: $auto$alumacc.cc:485:replace_alu$2120
  creating $alu cell for $flatten\pulses.$lt$pulses.v:196$24: $auto$alumacc.cc:485:replace_alu$2131
  creating $alu cell for $flatten\pulses.$lt$pulses.v:195$23: $auto$alumacc.cc:485:replace_alu$2142
  creating $alu cell for $flatten\pulses.$lt$pulses.v:194$22: $auto$alumacc.cc:485:replace_alu$2153
  creating $alu cell for $flatten\pulses.$lt$pulses.v:193$21: $auto$alumacc.cc:485:replace_alu$2164
  creating $alu cell for $flatten\pulses.$lt$pulses.v:191$18: $auto$alumacc.cc:485:replace_alu$2175
  creating $alu cell for $flatten\pulses.$lt$pulses.v:190$17: $auto$alumacc.cc:485:replace_alu$2186
  creating $alu cell for $flatten\control.$add$pulse_control.v:165$92: $auto$alumacc.cc:485:replace_alu$2197
  creating $alu cell for $flatten\pulses.$sub$pulses.v:300$60: $auto$alumacc.cc:485:replace_alu$2200
  creating $alu cell for $flatten\control.$add$pulse_control.v:195$97: $auto$alumacc.cc:485:replace_alu$2203
  creating $alu cell for $flatten\control.\uart0.$add$uart.v:189$139: $auto$alumacc.cc:485:replace_alu$2206
  creating $alu cell for $flatten\control.\uart0.$sub$uart.v:145$132: $auto$alumacc.cc:485:replace_alu$2209
  creating $alu cell for $flatten\control.\uart0.$sub$uart.v:149$134: $auto$alumacc.cc:485:replace_alu$2212
  creating $alu cell for $flatten\control.\uart0.$sub$uart.v:192$140: $auto$alumacc.cc:485:replace_alu$2215
  creating $alu cell for $flatten\control.\uart0.$sub$uart.v:210$145: $auto$alumacc.cc:485:replace_alu$2218
  creating $alu cell for $flatten\control.\uart0.$sub$uart.v:283$153: $auto$alumacc.cc:485:replace_alu$2221
  creating $alu cell for $flatten\pulses.$sub$pulses.v:275$49: $auto$alumacc.cc:485:replace_alu$2224
  creating $alu cell for $flatten\pulses.$add$pulses.v:164$5: $auto$alumacc.cc:485:replace_alu$2227
  creating $alu cell for $flatten\pulses.$add$pulses.v:162$2: $auto$alumacc.cc:485:replace_alu$2230
  creating $alu cell for $flatten\pulses.$add$pulses.v:237$31: $auto$alumacc.cc:485:replace_alu$2233
  creating $alu cell for $flatten\pulses.$add$pulses.v:240$34: $auto$alumacc.cc:485:replace_alu$2236
  creating $alu cell for $flatten\pulses.$sub$pulses.v:187$15: $auto$alumacc.cc:485:replace_alu$2239
  creating $alu cell for $flatten\pulses.$sub$pulses.v:238$32: $auto$alumacc.cc:485:replace_alu$2242
  creating $alu cell for $flatten\pulses.$add$pulses.v:263$47: $auto$alumacc.cc:485:replace_alu$2245
  creating $alu cell for $flatten\pulses.$add$pulses.v:264$48: $auto$alumacc.cc:485:replace_alu$2248
  creating $alu cell for $flatten\pulses.$add$pulses.v:291$55: $auto$alumacc.cc:485:replace_alu$2251
  creating $alu cell for $flatten\pulses.$sub$pulses.v:187$14: $auto$alumacc.cc:485:replace_alu$2254
  creating $alu cell for $flatten\pulses.$add$pulses.v:297$59: $auto$alumacc.cc:485:replace_alu$2257
  creating $alu cell for $flatten\pulses.$add$pulses.v:309$62: $auto$alumacc.cc:485:replace_alu$2260
  created 32 $alu and 6 $macc cells.

6.23. Executing OPT pass (performing simple optimizations).

6.23.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_gen.
<suppressed ~8 debug messages>

6.23.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pulse_gen'.
Removed a total of 0 cells.

6.23.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \pulse_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~30 debug messages>

6.23.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \pulse_gen.
    New ctrl vector for $pmux cell $flatten\control.\uart0.$procmux$893: { $flatten\control.\uart0.$procmux$667_CMP $auto$opt_reduce.cc:134:opt_mux$2264 }
    New ctrl vector for $pmux cell $flatten\control.\uart0.$procmux$902: { $flatten\control.\uart0.$procmux$667_CMP $auto$opt_reduce.cc:134:opt_mux$2266 }
  Optimizing cells in module \pulse_gen.
Performed a total of 2 changes.

6.23.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pulse_gen'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

6.23.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $auto$opt_dff.cc:764:run$1742 ($dffe) from module pulse_gen (D = $flatten\pulses.$add$pulses.v:262$44_Y [31:17], Q = \pulses.cdelay [31:17], rval = 15'000000000000000).

6.23.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_gen..
Removed 15 unused cells and 28 unused wires.
<suppressed ~16 debug messages>

6.23.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_gen.

6.23.9. Rerunning OPT passes. (Maybe there is more to do..)

6.23.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \pulse_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~30 debug messages>

6.23.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \pulse_gen.
Performed a total of 0 changes.

6.23.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pulse_gen'.
Removed a total of 0 cells.

6.23.13. Executing OPT_DFF pass (perform DFF optimizations).

6.23.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_gen..

6.23.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_gen.

6.23.16. Finished OPT passes. (There is nothing left to do.)

6.24. Executing MEMORY pass.

6.24.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

6.24.2. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

6.24.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_gen..

6.24.4. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

6.24.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_gen..

6.24.6. Executing MEMORY_COLLECT pass (generating $mem cells).

6.25. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_gen..

6.26. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).

6.27. Executing TECHMAP pass (map to technology primitives).

6.27.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ecp5/brams_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ecp5/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__ECP5_DP16KD'.
Generating RTLIL representation for module `\$__ECP5_PDPW16KD'.
Successfully finished Verilog frontend.

6.27.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

6.28. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).

6.29. Executing TECHMAP pass (map to technology primitives).

6.29.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ecp5/lutrams_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ecp5/lutrams_map.v' to AST representation.
Generating RTLIL representation for module `\$__TRELLIS_DPR16X4'.
Successfully finished Verilog frontend.

6.29.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

6.30. Executing OPT pass (performing simple optimizations).

6.30.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_gen.
<suppressed ~45 debug messages>

6.30.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pulse_gen'.
Removed a total of 0 cells.

6.30.3. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $auto$opt_dff.cc:764:run$2020 ($dffe) from module pulse_gen (D = $flatten\control.$procmux$1150_Y, Q = \control.transmit, rval = 1'0).
Adding SRST signal on $auto$opt_dff.cc:764:run$1993 ($dffe) from module pulse_gen (D = $flatten\control.$procmux$1116_Y, Q = \control.writestate, rval = 1'0).
Adding SRST signal on $auto$opt_dff.cc:764:run$1990 ($dffe) from module pulse_gen (D = $auto$wreduce.cc:454:run$2071 [0], Q = \control.readstate [0], rval = 1'0).
Adding SRST signal on $auto$opt_dff.cc:764:run$1981 ($dffe) from module pulse_gen (D = $auto$wreduce.cc:454:run$2069 [5:0], Q = \control.readcount, rval = 6'000000).
Adding SRST signal on $auto$opt_dff.cc:764:run$1957 ($dffe) from module pulse_gen (D = $flatten\control.\uart0.$4\rx_samples[3:0], Q = \control.uart0.rx_samples, rval = 4'0000).
Adding SRST signal on $auto$opt_dff.cc:764:run$1942 ($dffe) from module pulse_gen (D = $flatten\control.\uart0.$4\rx_sample_countdown[3:0], Q = \control.uart0.rx_sample_countdown, rval = 4'0101).
Adding SRST signal on $auto$opt_dff.cc:764:run$1916 ($dffe) from module pulse_gen (D = $flatten\control.\uart0.$4\rx_bits_remaining[3:0], Q = \control.uart0.rx_bits_remaining, rval = 4'1000).
Adding SRST signal on $auto$opt_dff.cc:764:run$1898 ($dffe) from module pulse_gen (D = $flatten\control.\uart0.$3\tx_out[0:0], Q = \control.uart0.tx_out, rval = 1'0).
Adding SRST signal on $auto$opt_dff.cc:764:run$1882 ($dffe) from module pulse_gen (D = $flatten\control.\uart0.$3\tx_bits_remaining[3:0], Q = \control.uart0.tx_bits_remaining, rval = 4'1000).
Adding SRST signal on $auto$opt_dff.cc:764:run$1871 ($dffe) from module pulse_gen (D = \control.tx_byte [7], Q = \control.uart0.tx_data [7], rval = 1'0).

6.30.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_gen..
Removed 10 unused cells and 15 unused wires.
<suppressed ~11 debug messages>

6.30.5. Rerunning OPT passes. (Removed registers in this run.)

6.30.6. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_gen.

6.30.7. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pulse_gen'.
Removed a total of 0 cells.

6.30.8. Executing OPT_DFF pass (perform DFF optimizations).

6.30.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_gen..

6.30.10. Finished fast OPT passes.

6.31. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

6.32. Executing OPT pass (performing simple optimizations).

6.32.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_gen.

6.32.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pulse_gen'.
Removed a total of 0 cells.

6.32.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \pulse_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~26 debug messages>

6.32.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \pulse_gen.
    Consolidated identical input bits for $mux cell $flatten\control.$procmux$1062:
      Old ports: A=3'010, B=3'000, Y=$flatten\control.$procmux$1062_Y
      New ports: A=1'1, B=1'0, Y=$flatten\control.$procmux$1062_Y [1]
      New connections: { $flatten\control.$procmux$1062_Y [2] $flatten\control.$procmux$1062_Y [0] } = 2'00
    Consolidated identical input bits for $mux cell $flatten\control.$procmux$1102:
      Old ports: A={ 1'0 $auto$wreduce.cc:454:run$2071 [0] }, B=2'00, Y=$flatten\control.$procmux$1102_Y
      New ports: A=$auto$wreduce.cc:454:run$2071 [0], B=1'0, Y=$flatten\control.$procmux$1102_Y [0]
      New connections: $flatten\control.$procmux$1102_Y [1] = 1'0
    Consolidated identical input bits for $mux cell $flatten\control.\uart0.$procmux$421:
      Old ports: A=10'1000100000, B=10'0011100010, Y=$auto$wreduce.cc:454:run$2074 [9:0]
      New ports: A=2'10, B=2'01, Y={ $auto$wreduce.cc:454:run$2074 [9] $auto$wreduce.cc:454:run$2074 [1] }
      New connections: { $auto$wreduce.cc:454:run$2074 [8:2] $auto$wreduce.cc:454:run$2074 [0] } = { 1'0 $auto$wreduce.cc:454:run$2074 [1] $auto$wreduce.cc:454:run$2074 [1] 5'10000 }
    Consolidated identical input bits for $mux cell $flatten\control.\uart0.$procmux$571:
      Old ports: A=3'100, B=3'010, Y=$flatten\control.\uart0.$7\recv_state[2:0]
      New ports: A=2'10, B=2'01, Y=$flatten\control.\uart0.$7\recv_state[2:0] [2:1]
      New connections: $flatten\control.\uart0.$7\recv_state[2:0] [0] = 1'0
    Consolidated identical input bits for $mux cell $flatten\control.\uart0.$procmux$583:
      Old ports: A=10'1001110001, B=10'0111010100, Y=$auto$wreduce.cc:454:run$2076 [9:0]
      New ports: A=2'01, B=2'10, Y={ $auto$wreduce.cc:454:run$2076 [2] $auto$wreduce.cc:454:run$2076 [0] }
      New connections: { $auto$wreduce.cc:454:run$2076 [9:3] $auto$wreduce.cc:454:run$2076 [1] } = { $auto$wreduce.cc:454:run$2076 [0] $auto$wreduce.cc:454:run$2076 [2] $auto$wreduce.cc:454:run$2076 [2] 1'1 $auto$wreduce.cc:454:run$2076 [0] 3'100 }
    Consolidated identical input bits for $mux cell $flatten\control.\uart0.$procmux$595:
      Old ports: A={ 1'0 \control.uart0.rx_data [7:1] }, B={ 1'1 \control.uart0.rx_data [7:1] }, Y=$flatten\control.\uart0.$0\rx_data[7:0]
      New ports: A=1'0, B=1'1, Y=$flatten\control.\uart0.$0\rx_data[7:0] [7]
      New connections: $flatten\control.\uart0.$0\rx_data[7:0] [6:0] = \control.uart0.rx_data [7:1]
    Consolidated identical input bits for $mux cell $flatten\control.\uart0.$procmux$744:
      Old ports: A=3'010, B=3'110, Y=$flatten\control.\uart0.$4\recv_state[2:0]
      New ports: A=1'0, B=1'1, Y=$flatten\control.\uart0.$4\recv_state[2:0] [2]
      New connections: $flatten\control.\uart0.$4\recv_state[2:0] [1:0] = 2'10
    Consolidated identical input bits for $mux cell $flatten\control.\uart0.$ternary$uart.v:247$150:
      Old ports: A=3'000, B=3'101, Y=$flatten\control.\uart0.$ternary$uart.v:247$150_Y
      New ports: A=1'0, B=1'1, Y=$flatten\control.\uart0.$ternary$uart.v:247$150_Y [0]
      New connections: $flatten\control.\uart0.$ternary$uart.v:247$150_Y [2:1] = { $flatten\control.\uart0.$ternary$uart.v:247$150_Y [0] 1'0 }
    Consolidated identical input bits for $mux cell $flatten\control.\uart0.$ternary$uart.v:306$156:
      Old ports: A=2'00, B=2'11, Y=$flatten\control.\uart0.$ternary$uart.v:306$156_Y
      New ports: A=1'0, B=1'1, Y=$flatten\control.\uart0.$ternary$uart.v:306$156_Y [0]
      New connections: $flatten\control.\uart0.$ternary$uart.v:306$156_Y [1] = $flatten\control.\uart0.$ternary$uart.v:306$156_Y [0]
  Optimizing cells in module \pulse_gen.
    Consolidated identical input bits for $pmux cell $flatten\control.$procmux$1067:
      Old ports: A=3'000, B={ 6'001010 $flatten\control.$procmux$1062_Y }, Y=$flatten\control.$0\state[2:0]
      New ports: A=2'00, B={ 4'0110 $flatten\control.$procmux$1062_Y [1] 1'0 }, Y=$flatten\control.$0\state[2:0] [1:0]
      New connections: $flatten\control.$0\state[2:0] [2] = 1'0
  Optimizing cells in module \pulse_gen.
Performed a total of 10 changes.

6.32.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pulse_gen'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

6.32.6. Executing OPT_DFF pass (perform DFF optimizations).

6.32.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_gen..
Removed 1 unused cells and 3 unused wires.
<suppressed ~2 debug messages>

6.32.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_gen.

6.32.9. Rerunning OPT passes. (Maybe there is more to do..)

6.32.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \pulse_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~26 debug messages>

6.32.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \pulse_gen.
Performed a total of 0 changes.

6.32.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pulse_gen'.
Removed a total of 0 cells.

6.32.13. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $auto$opt_dff.cc:764:run$1990 ($dffe) from module pulse_gen.
Setting constant 0-bit at position 2 on $auto$opt_dff.cc:764:run$1972 ($dffe) from module pulse_gen.

6.32.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_gen..

6.32.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_gen.
<suppressed ~5 debug messages>

6.32.16. Rerunning OPT passes. (Maybe there is more to do..)

6.32.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \pulse_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~26 debug messages>

6.32.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \pulse_gen.
Performed a total of 0 changes.

6.32.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pulse_gen'.
Removed a total of 0 cells.

6.32.20. Executing OPT_DFF pass (perform DFF optimizations).

6.32.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_gen..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

6.32.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_gen.

6.32.23. Rerunning OPT passes. (Maybe there is more to do..)

6.32.24. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \pulse_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~26 debug messages>

6.32.25. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \pulse_gen.
Performed a total of 0 changes.

6.32.26. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pulse_gen'.
Removed a total of 0 cells.

6.32.27. Executing OPT_DFF pass (perform DFF optimizations).

6.32.28. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_gen..

6.32.29. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_gen.

6.32.30. Finished OPT passes. (There is nothing left to do.)

6.33. Executing TECHMAP pass (map to technology primitives).

6.33.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

6.33.2. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ecp5/arith_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ecp5/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_ecp5_alu'.
Successfully finished Verilog frontend.

6.33.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $dffe.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $sdff.
Using extmapper simplemap for cells of type $sdffce.
Using extmapper simplemap for cells of type $lut.
Using template $paramod\_80_ecp5_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=11\B_WIDTH=1\Y_WIDTH=11 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=4\B_WIDTH=1\Y_WIDTH=4 for cells of type $alu.
Using extmapper simplemap for cells of type $logic_not.
Using template $paramod\_80_ecp5_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=15\B_WIDTH=1\Y_WIDTH=15 for cells of type $alu.
Using extmapper simplemap for cells of type $mux.
Using template $paramod\_80_ecp5_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=8\B_WIDTH=1\Y_WIDTH=9 for cells of type $alu.
Using extmapper simplemap for cells of type $eq.
Using template $paramod\_90_pmux\WIDTH=2\S_WIDTH=3 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=11\S_WIDTH=2 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=3\S_WIDTH=7 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=15\S_WIDTH=5 for cells of type $pmux.
Using extmapper simplemap for cells of type $dff.
Using template $paramod\_90_pmux\WIDTH=1\S_WIDTH=2 for cells of type $pmux.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=4\Y_WIDTH=4 for cells of type $alu.
Using extmapper maccmap for cells of type $macc.
  add \pulses.cpulse (32 bits, unsigned)
  add { \pulses.delay 1'0 } (17 bits, unsigned)
  add 32'11111111111111111111111111111011 (32 bits, unsigned)
Using template $paramod\_80_ecp5_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=24\B_WIDTH=3\Y_WIDTH=25 for cells of type $alu.
Using extmapper simplemap for cells of type $and.
Using template $paramod$constmap:f1a86313b2935847134cde0e02ff53e41f28add9$paramod$8669418c886d3bd260d664481583c1c71dfc3c9b\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using template $paramod$constmap:65a646296d3e5153eab58e58e05dcc6ed23f3479$paramod$6117e4f67b56bde6aa6a4e39e73a4e382ea036be\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
  add { $flatten\pulses.$sub$pulses.v:238$32_Y [31] $flatten\pulses.$sub$pulses.v:238$32_Y [31] $flatten\pulses.$sub$pulses.v:238$32_Y [31] $flatten\pulses.$sub$pulses.v:238$32_Y [31] $flatten\pulses.$sub$pulses.v:238$32_Y [31] $flatten\pulses.$sub$pulses.v:238$32_Y [31] $flatten\pulses.$sub$pulses.v:238$32_Y [31] $flatten\pulses.$sub$pulses.v:238$32_Y [31] $flatten\pulses.$sub$pulses.v:238$32_Y [31] $flatten\pulses.$sub$pulses.v:238$32_Y [31] $flatten\pulses.$sub$pulses.v:238$32_Y [31] $flatten\pulses.$sub$pulses.v:238$32_Y [31] $flatten\pulses.$sub$pulses.v:238$32_Y [31] $flatten\pulses.$sub$pulses.v:238$32_Y [31] $flatten\pulses.$sub$pulses.v:238$32_Y [31] $flatten\pulses.$sub$pulses.v:238$32_Y [31] $flatten\pulses.$sub$pulses.v:238$32_Y [15:1] \pulses.sdown [0] } (32 bits, unsigned)
  add { \pulses.delay 1'0 } (17 bits, unsigned)
  add 32'11111111111111111111111111111011 (32 bits, unsigned)
Using template $paramod\_80_ecp5_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=32\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
Using extmapper simplemap for cells of type $logic_or.
Using template $paramod\_80_ecp5_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=8\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
Using template $paramod\_80_ecp5_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=16\B_WIDTH=16\Y_WIDTH=16 for cells of type $alu.
Using template $paramod\_80_ecp5_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
  add \pulses.p2start (16 bits, unsigned)
  add \pulses.p2width (16 bits, unsigned)
  add 16'0000000000001010 (16 bits, unsigned)
Using template $paramod\_80_ecp5_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=24\B_WIDTH=16\Y_WIDTH=24 for cells of type $alu.
Using template $paramod\_80_ecp5_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=8\B_WIDTH=8\Y_WIDTH=8 for cells of type $alu.
Using template $paramod\_80_ecp5_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=3\B_WIDTH=15\Y_WIDTH=15 for cells of type $alu.
  add \control.vinput [31:24] (8 bits, unsigned)
  add \control.vinput [7:0] (8 bits, unsigned)
  add \control.vinput [15:8] (8 bits, unsigned)
  add \control.vinput [23:16] (8 bits, unsigned)
Using template $paramod\_80_ecp5_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=16\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
  add \pulses.cpulse (32 bits, unsigned)
  add \pulses.delay (16 bits, unsigned)
  add \pulses.delay (16 bits, unsigned)
Using template $paramod\_80_ecp5_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=24\B_WIDTH=8\Y_WIDTH=24 for cells of type $alu.
Using template $paramod\_80_ecp5_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=15\B_WIDTH=3\Y_WIDTH=16 for cells of type $alu.
Using template $paramod\_80_ecp5_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=24\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=3\Y_WIDTH=3 for cells of type $alu.
Using template $paramod\_80_ecp5_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=8\Y_WIDTH=8 for cells of type $alu.
  add \pulses.p1start2 (16 bits, unsigned)
  add \control.delay2 (16 bits, unsigned)
  add \pulses.p1width2 (16 bits, unsigned)
Using template $paramod\_80_ecp5_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=16\B_WIDTH=16\Y_WIDTH=17 for cells of type $alu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=4 for cells of type $lcu.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $logic_and.
Using template $paramod\_90_fa\WIDTH=32 for cells of type $fa.
Using template $paramod\_90_fa\WIDTH=16 for cells of type $fa.
Using template $paramod\_90_fa\WIDTH=8 for cells of type $fa.
Using template $paramod\_90_lcu\WIDTH=3 for cells of type $lcu.
No more expansions possible.
<suppressed ~3843 debug messages>

6.34. Executing OPT pass (performing simple optimizations).

6.34.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_gen.
<suppressed ~2944 debug messages>

6.34.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pulse_gen'.
<suppressed ~2283 debug messages>
Removed a total of 761 cells.

6.34.3. Executing OPT_DFF pass (perform DFF optimizations).
Handling D = Q on $auto$simplemap.cc:559:simplemap_adffe_sdffe_sdffce$5327 ($_SDFFCE_PP0P_) from module pulse_gen (conecting SRST instead).
Setting constant 0-bit at position 0 on $auto$simplemap.cc:559:simplemap_adffe_sdffe_sdffce$5327 ($_SDFFCE_PP0P_) from module pulse_gen.
Handling D = Q on $auto$simplemap.cc:559:simplemap_adffe_sdffe_sdffce$5328 ($_SDFFCE_PP0P_) from module pulse_gen (conecting SRST instead).
Setting constant 0-bit at position 0 on $auto$simplemap.cc:559:simplemap_adffe_sdffe_sdffce$5328 ($_SDFFCE_PP0P_) from module pulse_gen.
Handling D = Q on $auto$simplemap.cc:559:simplemap_adffe_sdffe_sdffce$5329 ($_SDFFCE_PP0P_) from module pulse_gen (conecting SRST instead).
Setting constant 0-bit at position 0 on $auto$simplemap.cc:559:simplemap_adffe_sdffe_sdffce$5329 ($_SDFFCE_PP0P_) from module pulse_gen.

6.34.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_gen..
Removed 1512 unused cells and 3075 unused wires.
<suppressed ~1513 debug messages>

6.34.5. Rerunning OPT passes. (Removed registers in this run.)

6.34.6. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_gen.
<suppressed ~82 debug messages>

6.34.7. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pulse_gen'.
<suppressed ~273 debug messages>
Removed a total of 91 cells.

6.34.8. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $auto$simplemap.cc:442:simplemap_dffe$5433 ($_DFFE_PP_) from module pulse_gen (D = $flatten\control.\uart0.$procmux$857.Y_B [2], Q = \control.uart0.recv_state [2], rval = 1'0).
Adding SRST signal on $auto$simplemap.cc:442:simplemap_dffe$5432 ($_DFFE_PP_) from module pulse_gen (D = $flatten\control.\uart0.$procmux$857.Y_B [1], Q = \control.uart0.recv_state [1], rval = 1'0).
Adding SRST signal on $auto$simplemap.cc:442:simplemap_dffe$5431 ($_DFFE_PP_) from module pulse_gen (D = $flatten\control.\uart0.$procmux$857.Y_B [0], Q = \control.uart0.recv_state [0], rval = 1'1).
Adding SRST signal on $auto$simplemap.cc:442:simplemap_dffe$5247 ($_DFFE_PP_) from module pulse_gen (D = $flatten\control.$procmux$1067.Y_B [1], Q = \control.state [1], rval = 1'0).
Adding SRST signal on $auto$simplemap.cc:442:simplemap_dffe$5246 ($_DFFE_PP_) from module pulse_gen (D = $flatten\control.$procmux$1067.B_AND_S [4], Q = \control.state [0], rval = 1'0).
Adding SRST signal on $auto$simplemap.cc:442:simplemap_dffe$2852 ($_DFFE_PP_) from module pulse_gen (D = \control.uart0.rx_samples [2], Q = \control.uart0.rx_data [7], rval = 1'1).
Adding SRST signal on $auto$simplemap.cc:442:simplemap_dffe$2826 ($_DFFE_PP_) from module pulse_gen (D = $flatten\control.\uart0.$procmux$542.Y_B [1], Q = \control.uart0.tx_state [1], rval = 1'0).
Adding SRST signal on $auto$simplemap.cc:442:simplemap_dffe$2825 ($_DFFE_PP_) from module pulse_gen (D = $flatten\control.\uart0.$procmux$542.Y_B [0], Q = \control.uart0.tx_state [0], rval = 1'1).

6.34.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_gen..
Removed 8 unused cells and 14 unused wires.
<suppressed ~9 debug messages>

6.34.10. Rerunning OPT passes. (Removed registers in this run.)

6.34.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_gen.

6.34.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pulse_gen'.
Removed a total of 0 cells.

6.34.13. Executing OPT_DFF pass (perform DFF optimizations).

6.34.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_gen..

6.34.15. Finished fast OPT passes.

6.35. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_gen..

6.36. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

6.37. Executing TECHMAP pass (map to technology primitives).

6.37.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ecp5/cells_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ecp5/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_DFFE_NP0N_'.
Generating RTLIL representation for module `\$_DFFE_NP1N_'.
Generating RTLIL representation for module `\$_DFFE_PP0N_'.
Generating RTLIL representation for module `\$_DFFE_PP1N_'.
Generating RTLIL representation for module `\$_SDFFE_NP0P_'.
Generating RTLIL representation for module `\$_SDFFE_NP1P_'.
Generating RTLIL representation for module `\$_SDFFE_PP0P_'.
Generating RTLIL representation for module `\$_SDFFE_PP1P_'.
Generating RTLIL representation for module `\$_SDFFE_NP0N_'.
Generating RTLIL representation for module `\$_SDFFE_NP1N_'.
Generating RTLIL representation for module `\$_SDFFE_PP0N_'.
Generating RTLIL representation for module `\$_SDFFE_PP1N_'.
Generating RTLIL representation for module `\FD1P3AX'.
Generating RTLIL representation for module `\FD1P3AY'.
Generating RTLIL representation for module `\FD1P3BX'.
Generating RTLIL representation for module `\FD1P3DX'.
Generating RTLIL representation for module `\FD1P3IX'.
Generating RTLIL representation for module `\FD1P3JX'.
Generating RTLIL representation for module `\FD1S3AX'.
Generating RTLIL representation for module `\FD1S3AY'.
Generating RTLIL representation for module `\FD1S3BX'.
Generating RTLIL representation for module `\FD1S3DX'.
Generating RTLIL representation for module `\FD1S3IX'.
Generating RTLIL representation for module `\FD1S3JX'.
Generating RTLIL representation for module `\IFS1P3BX'.
Generating RTLIL representation for module `\IFS1P3DX'.
Generating RTLIL representation for module `\IFS1P3IX'.
Generating RTLIL representation for module `\IFS1P3JX'.
Generating RTLIL representation for module `\OFS1P3BX'.
Generating RTLIL representation for module `\OFS1P3DX'.
Generating RTLIL representation for module `\OFS1P3IX'.
Generating RTLIL representation for module `\OFS1P3JX'.
Generating RTLIL representation for module `\IB'.
Generating RTLIL representation for module `\IBPU'.
Generating RTLIL representation for module `\IBPD'.
Generating RTLIL representation for module `\OB'.
Generating RTLIL representation for module `\OBZ'.
Generating RTLIL representation for module `\OBZPU'.
Generating RTLIL representation for module `\OBZPD'.
Generating RTLIL representation for module `\OBCO'.
Generating RTLIL representation for module `\BB'.
Generating RTLIL representation for module `\BBPU'.
Generating RTLIL representation for module `\BBPD'.
Generating RTLIL representation for module `\ILVDS'.
Generating RTLIL representation for module `\OLVDS'.
Successfully finished Verilog frontend.

6.37.2. Continuing TECHMAP pass.
Using template $paramod\$_DFFE_PP_\_TECHMAP_WIREINIT_Q_=1'x for cells of type $_DFFE_PP_.
Using template \$_SDFFE_PP0P_ for cells of type $_SDFFE_PP0P_.
Using template $paramod\$_DFFE_PN_\_TECHMAP_WIREINIT_Q_=1'x for cells of type $_DFFE_PN_.
Using template $paramod\$_DFF_P_\_TECHMAP_WIREINIT_Q_=1'x for cells of type $_DFF_P_.
Using template $paramod\$_DFFE_PP_\_TECHMAP_WIREINIT_Q_=1'0 for cells of type $_DFFE_PP_.
Using template $paramod\$_DFFE_PP_\_TECHMAP_WIREINIT_Q_=1'1 for cells of type $_DFFE_PP_.
Using template \$_SDFFE_PP1P_ for cells of type $_SDFFE_PP1P_.
Using template \$_SDFF_PP0_ for cells of type $_SDFF_PP0_.
Using template \$_SDFFE_PP0N_ for cells of type $_SDFFE_PP0N_.
No more expansions possible.
<suppressed ~933 debug messages>

6.38. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_gen.

6.39. Executing SIMPLEMAP pass (map simple cells to gate primitives).

6.40. Executing ECP5_GSR pass (implement FF init values).
Handling GSR in pulse_gen.

6.41. Executing ATTRMVCP pass (move or copy attributes).

6.42. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_gen..
Removed 0 unused cells and 3862 unused wires.
<suppressed ~1 debug messages>

6.43. Executing TECHMAP pass (map to technology primitives).

6.43.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ecp5/latches_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ecp5/latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Successfully finished Verilog frontend.

6.43.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

6.44. Executing ABC pass (technology mapping using ABC).

6.44.1. Extracting gate netlist of module `\pulse_gen' to `<abc-temp-dir>/input.blif'..
Extracted 2201 gates and 3035 wires to a netlist network with 832 inputs and 493 outputs.

6.44.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + dress 
ABC: Total number of equiv classes                =     513.
ABC: Participating nodes from both networks       =    1108.
ABC: Participating nodes from the first network   =     522. (  63.43 % of nodes)
ABC: Participating nodes from the second network  =     586. (  71.20 % of nodes)
ABC: Node pairs (any polarity)                    =     522. (  63.43 % of names can be moved)
ABC: Node pairs (same polarity)                   =     488. (  59.30 % of names can be moved)
ABC: Total runtime =     0.08 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

6.44.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:      822
ABC RESULTS:        internal signals:     1710
ABC RESULTS:           input signals:      832
ABC RESULTS:          output signals:      493
Removing temp directory.
Removed 0 unused cells and 1620 unused wires.

6.45. Executing TECHMAP pass (map to technology primitives).

6.45.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ecp5/cells_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ecp5/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_DFFE_NP0N_'.
Generating RTLIL representation for module `\$_DFFE_NP1N_'.
Generating RTLIL representation for module `\$_DFFE_PP0N_'.
Generating RTLIL representation for module `\$_DFFE_PP1N_'.
Generating RTLIL representation for module `\$_SDFFE_NP0P_'.
Generating RTLIL representation for module `\$_SDFFE_NP1P_'.
Generating RTLIL representation for module `\$_SDFFE_PP0P_'.
Generating RTLIL representation for module `\$_SDFFE_PP1P_'.
Generating RTLIL representation for module `\$_SDFFE_NP0N_'.
Generating RTLIL representation for module `\$_SDFFE_NP1N_'.
Generating RTLIL representation for module `\$_SDFFE_PP0N_'.
Generating RTLIL representation for module `\$_SDFFE_PP1N_'.
Generating RTLIL representation for module `\FD1P3AX'.
Generating RTLIL representation for module `\FD1P3AY'.
Generating RTLIL representation for module `\FD1P3BX'.
Generating RTLIL representation for module `\FD1P3DX'.
Generating RTLIL representation for module `\FD1P3IX'.
Generating RTLIL representation for module `\FD1P3JX'.
Generating RTLIL representation for module `\FD1S3AX'.
Generating RTLIL representation for module `\FD1S3AY'.
Generating RTLIL representation for module `\FD1S3BX'.
Generating RTLIL representation for module `\FD1S3DX'.
Generating RTLIL representation for module `\FD1S3IX'.
Generating RTLIL representation for module `\FD1S3JX'.
Generating RTLIL representation for module `\IFS1P3BX'.
Generating RTLIL representation for module `\IFS1P3DX'.
Generating RTLIL representation for module `\IFS1P3IX'.
Generating RTLIL representation for module `\IFS1P3JX'.
Generating RTLIL representation for module `\OFS1P3BX'.
Generating RTLIL representation for module `\OFS1P3DX'.
Generating RTLIL representation for module `\OFS1P3IX'.
Generating RTLIL representation for module `\OFS1P3JX'.
Generating RTLIL representation for module `\IB'.
Generating RTLIL representation for module `\IBPU'.
Generating RTLIL representation for module `\IBPD'.
Generating RTLIL representation for module `\OB'.
Generating RTLIL representation for module `\OBZ'.
Generating RTLIL representation for module `\OBZPU'.
Generating RTLIL representation for module `\OBZPD'.
Generating RTLIL representation for module `\OBCO'.
Generating RTLIL representation for module `\BB'.
Generating RTLIL representation for module `\BBPU'.
Generating RTLIL representation for module `\BBPD'.
Generating RTLIL representation for module `\ILVDS'.
Generating RTLIL representation for module `\OLVDS'.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

6.45.2. Continuing TECHMAP pass.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000000001 for cells of type $lut.
Using template $paramod$746424d0983081829316163db34337ccf8ceb1ee\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1001000000001001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=1 for cells of type $lut.
Using template $paramod$53afc4693cdd4770ebaebeb0ab6c288fde062f75\$lut for cells of type $lut.
Using template $paramod$e10ca4aca4e4c8627be5bb912095a9253494b061\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=65536 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011000010111011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=32'10000000000000000000000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00000001 for cells of type $lut.
Using template $paramod$89a7c44637a153ae876a5df3b846d5543893af1c\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11101111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11110100 for cells of type $lut.
Using template $paramod$f8bdca125e424c8e9c5f5e84960e0e034e7c473c\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011000000001011 for cells of type $lut.
Using template $paramod$5fba6fa4affd3d8cb90b92595f737467c857f3c8\$lut for cells of type $lut.
Using template $paramod$5547587bde2f1ca8d884d89fe5b90567ab8bb30e\$lut for cells of type $lut.
Using template $paramod$92d8a6bf0577f339ccf8b56ff3a24cabc17203fc\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111000000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010000000111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1001000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=47883 for cells of type $lut.
Using template $paramod$f78689128b22f4dca36b8e3adbad7168cdba8784\$lut for cells of type $lut.
Using template $paramod$3dd1cfeaac2399e8e1df42382a37ba2eafacb216\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00001101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=32'10010000000000000000000000000000 for cells of type $lut.
Using template $paramod$57619346c001bba14f685682aaa48a843cd5a7a5\$lut for cells of type $lut.
Using template $paramod$3589102619ca3cb2a7aa44f7d5da1ce3960c3450\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=16639 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10101100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=2147418112 for cells of type $lut.
Using template $paramod$9c1fdb72bfab429eb035e50b86046f0edb412905\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=32'10010000000010010000000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=32'10110000000000000000000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011000000000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=32'10000000100000001000000011111111 for cells of type $lut.
Using template $paramod$0d7a58a2521c9f7f639d5074fac2fc6fc0481634\$lut for cells of type $lut.
Using template $paramod$b5cd238a527d851ba52055b76f8b8313ff4d0a1d\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=32'11101111000011110000111100001111 for cells of type $lut.
Using template $paramod$2ddb5b5cad1eda4b448691edd161080bb92bfe50\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00010000 for cells of type $lut.
Using template $paramod$a637596af774d69f53cf39d7f2079142ea83b397\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111111110100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10010110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=32'11111110111010101010100010000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=32'11101000000101110001011111101000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11101000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=1\LUT=2'01 for cells of type $lut.
Using template $paramod$dc8c2960d49b9744c9316a10f5cda7dc93b63caf\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111111110000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11100001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1001011000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0110100110010110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01101001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=401139735 for cells of type $lut.
Using template $paramod$56f3e246421b6b29fd066d86d01fc72a1f44c94f\$lut for cells of type $lut.
Using template $paramod$05b7e8229d9a7a31e653ac7a3cef172aa16e73f1\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=32'11111111000100000001000000010000 for cells of type $lut.
Using template $paramod$d15f39da4cdda7162c5b1d8de7c7e77e72dbe4aa\$lut for cells of type $lut.
Using template $paramod$fcd45dac87ecaf8167f012f6f6d6fa7b369dedb8\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=65408 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000001001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=32'11111111000000001111111111110100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=32'11111111111111110000000011111110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000011111110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111001011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111100010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=32'10001111100011111111111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00011100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000011100111100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100111110100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=32'11111111010100110000000011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111000011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001000000000000 for cells of type $lut.
Using template $paramod$7b0e90364e815a4f852d1e2756ae8a5cd5cc152a\$lut for cells of type $lut.
Using template $paramod$5ff0f2346f18bc3d6d73391db3fd8eb0c48c4d68\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=1090519105 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=218103821 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=32'11111111111111110001000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100110111111100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011111100000000 for cells of type $lut.
Using template $paramod$2112a70fa1dfed7009af2d1b2a9304edd7f76cef\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=1073741824 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=32'11111111010000000000000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=268400503 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=1090519040 for cells of type $lut.
Using template $paramod$898e48637bc4b974fd02ac07b81fd0d72f50e9da\$lut for cells of type $lut.
Using template $paramod$8b6e222df5d3f2dc69d974f505c91f00d3d68b3a\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111110011001101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=32'11111101000011000000110000001100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=32'11111111111100001111111101000100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=32'11111111100000000000000000000000 for cells of type $lut.
Using template $paramod$a46cc54babd5fdc6573be9fe92e21e48245467d3\$lut for cells of type $lut.
Using template $paramod$34761ec4d1c147b684bec192cbb6fb046dbf7610\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01011100 for cells of type $lut.
Using template $paramod$242e27531e0d236607c11f95e82bd77e86dcb1ed\$lut for cells of type $lut.
No more expansions possible.
<suppressed ~2373 debug messages>

6.46. Executing OPT_LUT_INS pass (discard unused LUT inputs).
Optimizing LUTs in pulse_gen.
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$13957.lut3 (4 -> 1)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14042.lut2 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14043.lut2 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14052.lut1 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14052.lut2 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14067.lut1 (4 -> 2)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14123.lut2 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14123.lut3 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14124.lut1 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14124.lut2 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14124.lut3 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14124.lut4 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14124.lut5 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14124.lut6 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14132.lut1 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14132.lut2 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14132.lut3 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14132.lut4 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14132.lut5 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14132.lut6 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14138.lut2 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14139.lut2 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14162.lut2 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14213.lut3 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14074.lut1 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14074.lut2 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14112.lut7 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14473.lut1 (4 -> 1)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14469.lut1 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14469.lut2 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14469.lut3 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14469.lut4 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14469.lut5 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14469.lut6 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14479.lut2 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14479.lut3 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14029.lut1 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14029.lut2 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14212.lut2 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14212.lut4 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14212.lut5 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14212.lut6 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14212.lut7 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14159.lut2 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14159.lut3 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14159.lut4 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14159.lut5 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14159.lut6 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14036.lut1 (4 -> 3)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14037.lut1 (4 -> 3)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14034.lut1 (4 -> 3)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14034.lut2 (4 -> 3)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14034.lut3 (4 -> 3)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14721.lut2 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14722.lut2 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14719.lut2 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14723.lut2 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14724.lut2 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14728.lut2 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14725.lut2 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14720.lut1 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14720.lut2 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14464.lut2 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14476.lut2 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14476.lut3 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14057.lut1 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14057.lut2 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14061.lut7 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14058.lut7 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14059.lut7 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$13937.lut1 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$13937.lut3 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$13947.lut2 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$13947.lut3 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$13947.lut5 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$13947.lut6 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$13947.lut7 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14425.lut2 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14420.lut2 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14072.lut7 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$13964.lut2 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$13996.lut2 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14115.lut2 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14203.lut2 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14205.lut2 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14209.lut1 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14209.lut2 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14206.lut2 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14146.lut7 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14088.lut2 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14089.lut1 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14089.lut2 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14090.lut1 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14090.lut2 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14104.lut2 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14105.lut1 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14105.lut2 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14108.lut2 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14109.lut1 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14109.lut2 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14086.lut2 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14060.lut2 (4 -> 3)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14060.lut3 (4 -> 3)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14035.lut2 (4 -> 3)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14035.lut3 (4 -> 3)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$13978.lut2 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$13978.lut3 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$13978.lut4 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$13978.lut5 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$13978.lut6 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$13979.lut1 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$13979.lut2 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$13979.lut3 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$13980.lut1 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$13941.lut2 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$13941.lut3 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$13941.lut4 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$13941.lut5 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$13941.lut6 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$13941.lut7 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$13937.lut0 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$13947.lut1 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$13941.lut1 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$13942.lut1 (4 -> 3)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$13947.lut0 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$13954.lut1 (4 -> 3)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$13957.lut1 (4 -> 1)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$13957.lut0 (4 -> 1)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14201.lut1 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$13981.lut1 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$13964.lut0 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$13971.lut0 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$13964.lut1 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$13976.lut0 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$13978.lut1 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$13978.lut0 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$13996.lut1 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$13998.lut0 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14015.lut0 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14021.lut0 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14042.lut1 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14029.lut0 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14035.lut1 (4 -> 3)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14042.lut0 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14043.lut0 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14043.lut1 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14052.lut0 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14057.lut0 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14064.lut0 (4 -> 2)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14060.lut1 (4 -> 3)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14068.lut1 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14067.lut0 (4 -> 3)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14071.lut0 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14725.lut1 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14074.lut0 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14075.lut0 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14081.lut0 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14087.lut0 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14086.lut1 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14088.lut1 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14093.lut0 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14099.lut0 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14104.lut1 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14105.lut0 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14108.lut1 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14113.lut0 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14115.lut1 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14119.lut0 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14203.lut1 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14123.lut0 (4 -> 1)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14124.lut0 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14125.lut0 (4 -> 2)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14128.lut0 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14138.lut1 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14132.lut0 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14125.lut1 (4 -> 2)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14139.lut1 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14140.lut0 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14162.lut1 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14147.lut0 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14159.lut0 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14162.lut0 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14155.lut1 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14185.lut0 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14192.lut1 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14203.lut0 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14205.lut1 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14212.lut0 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14213.lut0 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14213.lut1 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14239.lut0 (4 -> 1)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14265.lut1 (4 -> 3)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14265.lut0 (4 -> 1)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14409.lut0 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14413.lut0 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14420.lut1 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14422.lut0 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14423.lut0 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14425.lut0 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14432.lut0 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14425.lut1 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14445.lut0 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14446.lut0 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14450.lut0 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14464.lut0 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14469.lut0 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14471.lut0 (4 -> 1)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14476.lut1 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14470.lut1 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14464.lut1 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14463.lut1 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14479.lut1 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14159.lut1 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14497.lut0 (4 -> 3)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14212.lut1 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14721.lut1 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14722.lut1 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14719.lut0 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14720.lut0 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14721.lut0 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14722.lut0 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14723.lut0 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14724.lut0 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14725.lut0 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14719.lut1 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14728.lut0 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14724.lut1 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14723.lut1 (4 -> 0)
  Optimizing lut $abc$13935$auto$blifparse.cc:498:parse_blif$14728.lut1 (4 -> 0)
Removed 0 unused cells and 1830 unused wires.

6.47. Executing AUTONAME pass.
Renamed 98289 objects in module pulse_gen (163 iterations).
<suppressed ~3711 debug messages>

6.48. Executing HIERARCHY pass (managing design hierarchy).

6.48.1. Analyzing design hierarchy..
Top module:  \pulse_gen

6.48.2. Analyzing design hierarchy..
Top module:  \pulse_gen
Removed 0 unused modules.

6.49. Printing statistics.

=== pulse_gen ===

   Number of wires:               1275
   Number of wire bits:           5655
   Number of public wires:        1275
   Number of public wire bits:    5655
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2601
     CCU2C                         389
     EHXPLLL                         1
     L6MUX21                        87
     LUT4                         1105
     PFUMX                         206
     TRELLIS_FF                    813

6.50. Executing CHECK pass (checking for obvious problems).
checking module pulse_gen..
found and reported 0 problems.

6.51. Executing JSON backend.

End of script. Logfile hash: 19f61b9060, CPU: user 2.97s system 0.14s, MEM: 268.78 MB peak
Yosys 0.9+3683 (git sha1 b7d46be4, clang 10.0.0-4ubuntu1 -fPIC -Os)
Time spent: 18% 1x autoname (0 sec), 15% 1x abc (0 sec), ...
