
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Wolf <claire@symbioticeda.com>          |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9+3683 (git sha1 b7d46be4, clang 10.0.0-4ubuntu1 -fPIC -Os)


-- Parsing `pulse_gen.v' using frontend `verilog' --

1. Executing Verilog-2005 frontend: pulse_gen.v
Parsing Verilog input from `pulse_gen.v' to AST representation.
Generating RTLIL representation for module `\pulse_gen'.
Successfully finished Verilog frontend.

-- Parsing `ecppll.v' using frontend `verilog' --

2. Executing Verilog-2005 frontend: ecppll.v
Parsing Verilog input from `ecppll.v' to AST representation.
Generating RTLIL representation for module `\pll'.
Successfully finished Verilog frontend.

-- Parsing `pulse_control.v' using frontend `verilog' --

3. Executing Verilog-2005 frontend: pulse_control.v
Parsing Verilog input from `pulse_control.v' to AST representation.
Generating RTLIL representation for module `\pulse_control'.
Successfully finished Verilog frontend.

-- Parsing `pulses.v' using frontend `verilog' --

4. Executing Verilog-2005 frontend: pulses.v
Parsing Verilog input from `pulses.v' to AST representation.
Generating RTLIL representation for module `\pulses'.
Successfully finished Verilog frontend.

-- Parsing `uart.v' using frontend `verilog' --

5. Executing Verilog-2005 frontend: uart.v
Parsing Verilog input from `uart.v' to AST representation.
Generating RTLIL representation for module `\uart'.
Successfully finished Verilog frontend.

-- Running command `synth_ecp5 -json pulse_gen.json -top pulse_gen' --

6. Executing SYNTH_ECP5 pass.

6.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ecp5/cells_sim.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ecp5/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\LUT4'.
Generating RTLIL representation for module `\$__ABC9_LUT5'.
Generating RTLIL representation for module `\$__ABC9_LUT6'.
Generating RTLIL representation for module `\$__ABC9_LUT7'.
Generating RTLIL representation for module `\L6MUX21'.
Generating RTLIL representation for module `\CCU2C'.
Generating RTLIL representation for module `\TRELLIS_RAM16X2'.
Generating RTLIL representation for module `\PFUMX'.
Generating RTLIL representation for module `\TRELLIS_DPR16X4'.
Generating RTLIL representation for module `\DPR16X4C'.
Generating RTLIL representation for module `\LUT2'.
Generating RTLIL representation for module `\TRELLIS_FF'.
Generating RTLIL representation for module `\TRELLIS_IO'.
Generating RTLIL representation for module `\INV'.
Generating RTLIL representation for module `\TRELLIS_SLICE'.
Generating RTLIL representation for module `\DP16KD'.
Generating RTLIL representation for module `\FD1P3AX'.
Generating RTLIL representation for module `\FD1P3AY'.
Generating RTLIL representation for module `\FD1P3BX'.
Generating RTLIL representation for module `\FD1P3DX'.
Generating RTLIL representation for module `\FD1P3IX'.
Generating RTLIL representation for module `\FD1P3JX'.
Generating RTLIL representation for module `\FD1S3AX'.
Generating RTLIL representation for module `\FD1S3AY'.
Generating RTLIL representation for module `\FD1S3BX'.
Generating RTLIL representation for module `\FD1S3DX'.
Generating RTLIL representation for module `\FD1S3IX'.
Generating RTLIL representation for module `\FD1S3JX'.
Generating RTLIL representation for module `\IFS1P3BX'.
Generating RTLIL representation for module `\IFS1P3DX'.
Generating RTLIL representation for module `\IFS1P3IX'.
Generating RTLIL representation for module `\IFS1P3JX'.
Generating RTLIL representation for module `\OFS1P3BX'.
Generating RTLIL representation for module `\OFS1P3DX'.
Generating RTLIL representation for module `\OFS1P3IX'.
Generating RTLIL representation for module `\OFS1P3JX'.
Generating RTLIL representation for module `\IB'.
Generating RTLIL representation for module `\IBPU'.
Generating RTLIL representation for module `\IBPD'.
Generating RTLIL representation for module `\OB'.
Generating RTLIL representation for module `\OBZ'.
Generating RTLIL representation for module `\OBZPU'.
Generating RTLIL representation for module `\OBZPD'.
Generating RTLIL representation for module `\OBCO'.
Generating RTLIL representation for module `\BB'.
Generating RTLIL representation for module `\BBPU'.
Generating RTLIL representation for module `\BBPD'.
Generating RTLIL representation for module `\ILVDS'.
Generating RTLIL representation for module `\OLVDS'.
Successfully finished Verilog frontend.

6.2. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ecp5/cells_bb.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ecp5/cells_bb.v' to AST representation.
Generating RTLIL representation for module `\MULT18X18D'.
Generating RTLIL representation for module `\ALU54B'.
Generating RTLIL representation for module `\EHXPLLL'.
Generating RTLIL representation for module `\DTR'.
Generating RTLIL representation for module `\OSCG'.
Generating RTLIL representation for module `\USRMCLK'.
Generating RTLIL representation for module `\JTAGG'.
Generating RTLIL representation for module `\DELAYF'.
Generating RTLIL representation for module `\DELAYG'.
Generating RTLIL representation for module `\IDDRX1F'.
Generating RTLIL representation for module `\IDDRX2F'.
Generating RTLIL representation for module `\IDDR71B'.
Generating RTLIL representation for module `\IDDRX2DQA'.
Generating RTLIL representation for module `\ODDRX1F'.
Generating RTLIL representation for module `\ODDRX2F'.
Generating RTLIL representation for module `\ODDR71B'.
Generating RTLIL representation for module `\OSHX2A'.
Generating RTLIL representation for module `\ODDRX2DQA'.
Generating RTLIL representation for module `\ODDRX2DQSB'.
Generating RTLIL representation for module `\TSHX2DQA'.
Generating RTLIL representation for module `\TSHX2DQSA'.
Generating RTLIL representation for module `\DQSBUFM'.
Generating RTLIL representation for module `\DDRDLLA'.
Generating RTLIL representation for module `\CLKDIVF'.
Generating RTLIL representation for module `\ECLKSYNCB'.
Generating RTLIL representation for module `\ECLKBRIDGECS'.
Generating RTLIL representation for module `\DCCA'.
Generating RTLIL representation for module `\DCUA'.
Generating RTLIL representation for module `\EXTREFB'.
Generating RTLIL representation for module `\PCSCLKDIV'.
Generating RTLIL representation for module `\PUR'.
Generating RTLIL representation for module `\GSR'.
Generating RTLIL representation for module `\SGSR'.
Generating RTLIL representation for module `\PDPW16KD'.
Successfully finished Verilog frontend.

6.3. Executing HIERARCHY pass (managing design hierarchy).

6.3.1. Analyzing design hierarchy..
Top module:  \pulse_gen
Used module:     \pulses
Used module:     \pulse_control
Used module:         \uart
Used module:     \pll

6.3.2. Analyzing design hierarchy..
Top module:  \pulse_gen
Used module:     \pulses
Used module:     \pulse_control
Used module:         \uart
Used module:     \pll
Removed 0 unused modules.

6.4. Executing PROC pass (convert processes to netlists).

6.4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:213$307'.
Cleaned up 1 empty switch.

6.4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:350$387 in module TRELLIS_FF.
Removed 2 dead cases from process $proc$uart.v:135$132 in module uart.
Marked 17 switch rules as full_case in process $proc$uart.v:135$132 in module uart.
Marked 2 switch rules as full_case in process $proc$pulses.v:165$56 in module pulses.
Removed 1 dead cases from process $proc$pulse_control.v:136$3 in module pulse_control.
Marked 5 switch rules as full_case in process $proc$pulse_control.v:136$3 in module pulse_control.
Removed a total of 3 dead cases.

6.4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 1 redundant assignment.
Promoted 61 assignments to connections.

6.4.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\TRELLIS_FF.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:0$391'.
  Set init value: \Q = 1'0
Found init rule in `\uart.$proc$uart.v:106$161'.
  Set init value: \tx_state = 2'00
Found init rule in `\uart.$proc$uart.v:105$160'.
  Set init value: \tx_out = 1'1
Found init rule in `\uart.$proc$uart.v:101$159'.
  Set init value: \recv_state = 3'000
Found init rule in `\pulses.$proc$pulses.v:99$124'.
  Set init value: \ccount = 8'00000000
Found init rule in `\pulses.$proc$pulses.v:58$123'.
  Set init value: \cw = 1'0
Found init rule in `\pulses.$proc$pulses.v:49$121'.
  Set init value: \counter = 0
Found init rule in `\pulse_control.$proc$pulse_control.v:133$47'.
  Set init value: \state = 3'000
Found init rule in `\pulse_control.$proc$pulse_control.v:117$46'.
  Set init value: \readcount = 6'000000
Found init rule in `\pulse_control.$proc$pulse_control.v:116$45'.
  Set init value: \readstate = 2'00
Found init rule in `\pulse_control.$proc$pulse_control.v:114$43'.
  Set init value: \writestate = 1'0
Found init rule in `\pulse_control.$proc$pulse_control.v:48$42'.
  Set init value: \recv_set = 1'0
Found init rule in `\pulse_control.$proc$pulse_control.v:47$41'.
  Set init value: \nut_wid = 8'00000000
Found init rule in `\pulse_control.$proc$pulse_control.v:46$40'.
  Set init value: \nut_del = 16'0000000000000000
Found init rule in `\pulse_control.$proc$pulse_control.v:45$39'.
  Set init value: \rx_done = 1'0
Found init rule in `\pulse_control.$proc$pulse_control.v:44$38'.
  Set init value: \block = 1'1
Found init rule in `\pulse_control.$proc$pulse_control.v:43$37'.
  Set init value: \cpmg = 8'00000001
Found init rule in `\pulse_control.$proc$pulse_control.v:42$36'.
  Set init value: \pulse_block_half = 16'0000000000000101
Found init rule in `\pulse_control.$proc$pulse_control.v:41$35'.
  Set init value: \pulse_block = 8'00001010
Found init rule in `\pulse_control.$proc$pulse_control.v:40$34'.
  Set init value: \p2width = 16'0000000000111100
Found init rule in `\pulse_control.$proc$pulse_control.v:39$33'.
  Set init value: \delay = 16'0000000011001000
Found init rule in `\pulse_control.$proc$pulse_control.v:38$32'.
  Set init value: \p1width = 16'0000000000011110
Found init rule in `\pulse_control.$proc$pulse_control.v:37$31'.
  Set init value: \period = 10000

6.4.5. Executing PROC_ARST pass (detect async resets in processes).

6.4.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\TRELLIS_FF.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:0$391'.
Creating decoders for process `\TRELLIS_FF.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:350$387'.
     1/1: $0\Q[0:0]
Creating decoders for process `\DPR16X4C.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:0$384'.
Creating decoders for process `\DPR16X4C.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:285$363'.
     1/3: $0$memwr$\ram$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:287$362_EN[3:0]$366
     2/3: $0$memwr$\ram$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:287$362_DATA[3:0]$365
     3/3: $0$memwr$\ram$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:287$362_ADDR[3:0]$364
Creating decoders for process `\TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:0$330'.
Creating decoders for process `\TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:221$308'.
     1/3: $0$memwr$\mem$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:223$306_EN[3:0]$311
     2/3: $0$memwr$\mem$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:223$306_DATA[3:0]$310
     3/3: $0$memwr$\mem$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:223$306_ADDR[3:0]$309
Creating decoders for process `\TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:213$307'.
Creating decoders for process `\uart.$proc$uart.v:106$161'.
Creating decoders for process `\uart.$proc$uart.v:105$160'.
Creating decoders for process `\uart.$proc$uart.v:101$159'.
Creating decoders for process `\uart.$proc$uart.v:135$132'.
     1/57: $5\tx_state[1:0]
     2/57: $5\tx_clk[10:0]
     3/57: $4\tx_data[7:0]
     4/57: $4\tx_out[0:0]
     5/57: $4\tx_bits_remaining[3:0]
     6/57: $3\tx_data[7:0]
     7/57: $3\tx_bits_remaining[3:0]
     8/57: $4\tx_state[1:0]
     9/57: $3\tx_out[0:0]
    10/57: $4\tx_clk[10:0]
    11/57: $3\tx_state[1:0]
    12/57: $2\tx_bits_remaining[3:0]
    13/57: $2\tx_out[0:0]
    14/57: $3\tx_clk[10:0]
    15/57: $2\tx_data[7:0]
    16/57: $1\tx_data[7:0]
    17/57: $1\tx_bits_remaining[3:0]
    18/57: $2\tx_state[1:0]
    19/57: $1\tx_out[0:0]
    20/57: $2\tx_clk[10:0]
    21/57: $9\recv_state[2:0]
    22/57: $8\recv_state[2:0]
    23/57: $8\rx_clk[14:0]
    24/57: $3\rx_data[7:0]
    25/57: $7\recv_state[2:0]
    26/57: $7\rx_clk[14:0]
    27/57: $4\rx_bits_remaining[3:0]
    28/57: $5\rx_sample_countdown[3:0]
    29/57: $6\rx_samples[3:0]
    30/57: $2\rx_data[7:0]
    31/57: $5\rx_samples[3:0]
    32/57: $6\recv_state[2:0]
    33/57: $4\rx_sample_countdown[3:0]
    34/57: $6\rx_clk[14:0]
    35/57: $4\rx_samples[3:0]
    36/57: $3\rx_sample_countdown[3:0]
    37/57: $3\rx_samples[3:0]
    38/57: $5\recv_state[2:0]
    39/57: $3\rx_bits_remaining[3:0]
    40/57: $5\rx_clk[14:0]
    41/57: $2\rx_bits_remaining[3:0]
    42/57: $4\recv_state[2:0]
    43/57: $4\rx_clk[14:0]
    44/57: $2\rx_sample_countdown[3:0]
    45/57: $2\rx_samples[3:0]
    46/57: $3\recv_state[2:0]
    47/57: $3\rx_clk[14:0]
    48/57: $2\recv_state[2:0]
    49/57: $2\rx_clk[14:0]
    50/57: $1\rx_data[7:0]
    51/57: $1\rx_bits_remaining[3:0]
    52/57: $1\rx_sample_countdown[3:0]
    53/57: $1\rx_samples[3:0]
    54/57: $1\tx_clk[10:0]
    55/57: $1\rx_clk[14:0]
    56/57: $1\tx_state[1:0]
    57/57: $1\recv_state[2:0]
Creating decoders for process `\pulses.$proc$pulses.v:105$125'.
Creating decoders for process `\pulses.$proc$pulses.v:99$124'.
Creating decoders for process `\pulses.$proc$pulses.v:58$123'.
Creating decoders for process `\pulses.$proc$pulses.v:57$122'.
Creating decoders for process `\pulses.$proc$pulses.v:49$121'.
Creating decoders for process `\pulses.$proc$pulses.v:165$56'.
     1/13: $0\counter[31:0]
     2/13: $0\cblock_on[31:0]
     3/13: $0\cblock_delay[31:0]
     4/13: $0\cpulse[31:0]
     5/13: $0\cdelay[31:0]
     6/13: $0\ccount[7:0]
     7/13: $0\nutation_pulse_stop[23:0]
     8/13: $0\nutation_pulse_start[23:0]
     9/13: $0\inh[0:0]
    10/13: $0\nut_pulse[0:0]
    11/13: $0\pulse[0:0]
    12/13: $0\sync[0:0]
    13/13: $0\pulses[0:0]
Creating decoders for process `\pulses.$proc$pulses.v:117$48'.
Creating decoders for process `\pulse_control.$proc$pulse_control.v:133$47'.
Creating decoders for process `\pulse_control.$proc$pulse_control.v:117$46'.
Creating decoders for process `\pulse_control.$proc$pulse_control.v:116$45'.
Creating decoders for process `\pulse_control.$proc$pulse_control.v:115$44'.
Creating decoders for process `\pulse_control.$proc$pulse_control.v:114$43'.
Creating decoders for process `\pulse_control.$proc$pulse_control.v:48$42'.
Creating decoders for process `\pulse_control.$proc$pulse_control.v:47$41'.
Creating decoders for process `\pulse_control.$proc$pulse_control.v:46$40'.
Creating decoders for process `\pulse_control.$proc$pulse_control.v:45$39'.
Creating decoders for process `\pulse_control.$proc$pulse_control.v:44$38'.
Creating decoders for process `\pulse_control.$proc$pulse_control.v:43$37'.
Creating decoders for process `\pulse_control.$proc$pulse_control.v:42$36'.
Creating decoders for process `\pulse_control.$proc$pulse_control.v:41$35'.
Creating decoders for process `\pulse_control.$proc$pulse_control.v:40$34'.
Creating decoders for process `\pulse_control.$proc$pulse_control.v:39$33'.
Creating decoders for process `\pulse_control.$proc$pulse_control.v:38$32'.
Creating decoders for process `\pulse_control.$proc$pulse_control.v:37$31'.
Creating decoders for process `\pulse_control.$proc$pulse_control.v:136$3'.
     1/34: $2\rx_done[0:0]
     2/34: $4$bitselwrite$data$pulse_control.v:151$2[31:0]$14
     3/34: $4$bitselwrite$mask$pulse_control.v:151$1[31:0]$13
     4/34: $4\vinput[31:0]
     5/34: $3$bitselwrite$data$pulse_control.v:151$2[31:0]$11
     6/34: $3$bitselwrite$mask$pulse_control.v:151$1[31:0]$10
     7/34: $3\vinput[31:0]
     8/34: $2$bitselwrite$data$pulse_control.v:151$2[31:0]$9
     9/34: $2$bitselwrite$mask$pulse_control.v:151$1[31:0]$8
    10/34: $2\vinput[31:0]
    11/34: $1$bitselwrite$data$pulse_control.v:151$2[31:0]$7
    12/34: $1$bitselwrite$mask$pulse_control.v:151$1[31:0]$6
    13/34: $1\vinput[31:0]
    14/34: $1\voutput[7:0]
    15/34: $1\rx_done[0:0]
    16/34: $0\state[2:0]
    17/34: $0\readcount[5:0]
    18/34: $0\readstate[1:0]
    19/34: $0\writestate[0:0]
    20/34: $0\test[7:0]
    21/34: $0\vcontrol[7:0]
    22/34: $0\tx_byte[7:0]
    23/34: $0\transmit[0:0]
    24/34: $0\recv_set[0:0]
    25/34: $0\cpmg[7:0]
    26/34: $0\pulse_block_half[15:0]
    27/34: $0\pulse_block[7:0]
    28/34: $0\block[0:0]
    29/34: $0\nut_wid[7:0]
    30/34: $0\nut_del[15:0]
    31/34: $0\p2width[15:0]
    32/34: $0\delay[15:0]
    33/34: $0\p1width[15:0]
    34/34: $0\period[31:0]

6.4.7. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\pulses.\xfer_bits' from process `\pulses.$proc$pulses.v:105$125'.
No latch inferred for signal `\pulses.\rec' from process `\pulses.$proc$pulses.v:57$122'.
No latch inferred for signal `\pulse_control.\writecount' from process `\pulse_control.$proc$pulse_control.v:115$44'.

6.4.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\TRELLIS_FF.\Q' using process `\TRELLIS_FF.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:350$387'.
  created $dff cell `$procdff$1448' with positive edge clock.
Creating register for signal `\DPR16X4C.\i' using process `\DPR16X4C.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:0$384'.
  created direct connection (no actual register cell created).
Creating register for signal `\DPR16X4C.$memwr$\ram$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:287$362_ADDR' using process `\DPR16X4C.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:285$363'.
  created $dff cell `$procdff$1449' with positive edge clock.
Creating register for signal `\DPR16X4C.$memwr$\ram$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:287$362_DATA' using process `\DPR16X4C.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:285$363'.
  created $dff cell `$procdff$1450' with positive edge clock.
Creating register for signal `\DPR16X4C.$memwr$\ram$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:287$362_EN' using process `\DPR16X4C.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:285$363'.
  created $dff cell `$procdff$1451' with positive edge clock.
Creating register for signal `\TRELLIS_DPR16X4.\i' using process `\TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:0$330'.
  created direct connection (no actual register cell created).
Creating register for signal `\TRELLIS_DPR16X4.$memwr$\mem$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:223$306_ADDR' using process `\TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:221$308'.
  created $dff cell `$procdff$1452' with positive edge clock.
Creating register for signal `\TRELLIS_DPR16X4.$memwr$\mem$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:223$306_DATA' using process `\TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:221$308'.
  created $dff cell `$procdff$1453' with positive edge clock.
Creating register for signal `\TRELLIS_DPR16X4.$memwr$\mem$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:223$306_EN' using process `\TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:221$308'.
  created $dff cell `$procdff$1454' with positive edge clock.
Creating register for signal `\TRELLIS_DPR16X4.\muxwre' using process `\TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:213$307'.
  created direct connection (no actual register cell created).
Creating register for signal `\uart.\rx_samples' using process `\uart.$proc$uart.v:135$132'.
  created $dff cell `$procdff$1455' with positive edge clock.
Creating register for signal `\uart.\rx_sample_countdown' using process `\uart.$proc$uart.v:135$132'.
  created $dff cell `$procdff$1456' with positive edge clock.
Creating register for signal `\uart.\rx_clk' using process `\uart.$proc$uart.v:135$132'.
  created $dff cell `$procdff$1457' with positive edge clock.
Creating register for signal `\uart.\tx_clk' using process `\uart.$proc$uart.v:135$132'.
  created $dff cell `$procdff$1458' with positive edge clock.
Creating register for signal `\uart.\recv_state' using process `\uart.$proc$uart.v:135$132'.
  created $dff cell `$procdff$1459' with positive edge clock.
Creating register for signal `\uart.\rx_bits_remaining' using process `\uart.$proc$uart.v:135$132'.
  created $dff cell `$procdff$1460' with positive edge clock.
Creating register for signal `\uart.\rx_data' using process `\uart.$proc$uart.v:135$132'.
  created $dff cell `$procdff$1461' with positive edge clock.
Creating register for signal `\uart.\tx_out' using process `\uart.$proc$uart.v:135$132'.
  created $dff cell `$procdff$1462' with positive edge clock.
Creating register for signal `\uart.\tx_state' using process `\uart.$proc$uart.v:135$132'.
  created $dff cell `$procdff$1463' with positive edge clock.
Creating register for signal `\uart.\tx_bits_remaining' using process `\uart.$proc$uart.v:135$132'.
  created $dff cell `$procdff$1464' with positive edge clock.
Creating register for signal `\uart.\tx_data' using process `\uart.$proc$uart.v:135$132'.
  created $dff cell `$procdff$1465' with positive edge clock.
Creating register for signal `\pulses.\pulses' using process `\pulses.$proc$pulses.v:165$56'.
  created $dff cell `$procdff$1466' with positive edge clock.
Creating register for signal `\pulses.\counter' using process `\pulses.$proc$pulses.v:165$56'.
  created $dff cell `$procdff$1467' with positive edge clock.
Creating register for signal `\pulses.\sync' using process `\pulses.$proc$pulses.v:165$56'.
  created $dff cell `$procdff$1468' with positive edge clock.
Creating register for signal `\pulses.\pulse' using process `\pulses.$proc$pulses.v:165$56'.
  created $dff cell `$procdff$1469' with positive edge clock.
Creating register for signal `\pulses.\nut_pulse' using process `\pulses.$proc$pulses.v:165$56'.
  created $dff cell `$procdff$1470' with positive edge clock.
Creating register for signal `\pulses.\inh' using process `\pulses.$proc$pulses.v:165$56'.
  created $dff cell `$procdff$1471' with positive edge clock.
Creating register for signal `\pulses.\nutation_pulse_start' using process `\pulses.$proc$pulses.v:165$56'.
  created $dff cell `$procdff$1472' with positive edge clock.
Creating register for signal `\pulses.\nutation_pulse_stop' using process `\pulses.$proc$pulses.v:165$56'.
  created $dff cell `$procdff$1473' with positive edge clock.
Creating register for signal `\pulses.\ccount' using process `\pulses.$proc$pulses.v:165$56'.
  created $dff cell `$procdff$1474' with positive edge clock.
Creating register for signal `\pulses.\cdelay' using process `\pulses.$proc$pulses.v:165$56'.
  created $dff cell `$procdff$1475' with positive edge clock.
Creating register for signal `\pulses.\cpulse' using process `\pulses.$proc$pulses.v:165$56'.
  created $dff cell `$procdff$1476' with positive edge clock.
Creating register for signal `\pulses.\cblock_delay' using process `\pulses.$proc$pulses.v:165$56'.
  created $dff cell `$procdff$1477' with positive edge clock.
Creating register for signal `\pulses.\cblock_on' using process `\pulses.$proc$pulses.v:165$56'.
  created $dff cell `$procdff$1478' with positive edge clock.
Creating register for signal `\pulses.\period' using process `\pulses.$proc$pulses.v:117$48'.
  created $dff cell `$procdff$1479' with positive edge clock.
Creating register for signal `\pulses.\p1width' using process `\pulses.$proc$pulses.v:117$48'.
  created $dff cell `$procdff$1480' with positive edge clock.
Creating register for signal `\pulses.\delay' using process `\pulses.$proc$pulses.v:117$48'.
  created $dff cell `$procdff$1481' with positive edge clock.
Creating register for signal `\pulses.\p2width' using process `\pulses.$proc$pulses.v:117$48'.
  created $dff cell `$procdff$1482' with positive edge clock.
Creating register for signal `\pulses.\block' using process `\pulses.$proc$pulses.v:117$48'.
  created $dff cell `$procdff$1483' with positive edge clock.
Creating register for signal `\pulses.\pulse_block' using process `\pulses.$proc$pulses.v:117$48'.
  created $dff cell `$procdff$1484' with positive edge clock.
Creating register for signal `\pulses.\pulse_block_half' using process `\pulses.$proc$pulses.v:117$48'.
  created $dff cell `$procdff$1485' with positive edge clock.
Creating register for signal `\pulses.\cpmg' using process `\pulses.$proc$pulses.v:117$48'.
  created $dff cell `$procdff$1486' with positive edge clock.
Creating register for signal `\pulses.\cw' using process `\pulses.$proc$pulses.v:117$48'.
  created $dff cell `$procdff$1487' with positive edge clock.
Creating register for signal `\pulses.\p2start' using process `\pulses.$proc$pulses.v:117$48'.
  created $dff cell `$procdff$1488' with positive edge clock.
Creating register for signal `\pulses.\sync_down' using process `\pulses.$proc$pulses.v:117$48'.
  created $dff cell `$procdff$1489' with positive edge clock.
Creating register for signal `\pulses.\block_off' using process `\pulses.$proc$pulses.v:117$48'.
  created $dff cell `$procdff$1490' with positive edge clock.
Creating register for signal `\pulses.\block_on' using process `\pulses.$proc$pulses.v:117$48'.
  created $dff cell `$procdff$1491' with positive edge clock.
Creating register for signal `\pulses.\nutation_pulse_width' using process `\pulses.$proc$pulses.v:117$48'.
  created $dff cell `$procdff$1492' with positive edge clock.
Creating register for signal `\pulses.\nutation_pulse_delay' using process `\pulses.$proc$pulses.v:117$48'.
  created $dff cell `$procdff$1493' with positive edge clock.
Creating register for signal `\pulse_control.\period' using process `\pulse_control.$proc$pulse_control.v:136$3'.
  created $dff cell `$procdff$1494' with positive edge clock.
Creating register for signal `\pulse_control.\p1width' using process `\pulse_control.$proc$pulse_control.v:136$3'.
  created $dff cell `$procdff$1495' with positive edge clock.
Creating register for signal `\pulse_control.\delay' using process `\pulse_control.$proc$pulse_control.v:136$3'.
  created $dff cell `$procdff$1496' with positive edge clock.
Creating register for signal `\pulse_control.\p2width' using process `\pulse_control.$proc$pulse_control.v:136$3'.
  created $dff cell `$procdff$1497' with positive edge clock.
Creating register for signal `\pulse_control.\nut_del' using process `\pulse_control.$proc$pulse_control.v:136$3'.
  created $dff cell `$procdff$1498' with positive edge clock.
Creating register for signal `\pulse_control.\nut_wid' using process `\pulse_control.$proc$pulse_control.v:136$3'.
  created $dff cell `$procdff$1499' with positive edge clock.
Creating register for signal `\pulse_control.\block' using process `\pulse_control.$proc$pulse_control.v:136$3'.
  created $dff cell `$procdff$1500' with positive edge clock.
Creating register for signal `\pulse_control.\pulse_block' using process `\pulse_control.$proc$pulse_control.v:136$3'.
  created $dff cell `$procdff$1501' with positive edge clock.
Creating register for signal `\pulse_control.\pulse_block_half' using process `\pulse_control.$proc$pulse_control.v:136$3'.
  created $dff cell `$procdff$1502' with positive edge clock.
Creating register for signal `\pulse_control.\cpmg' using process `\pulse_control.$proc$pulse_control.v:136$3'.
  created $dff cell `$procdff$1503' with positive edge clock.
Creating register for signal `\pulse_control.\rx_done' using process `\pulse_control.$proc$pulse_control.v:136$3'.
  created $dff cell `$procdff$1504' with positive edge clock.
Creating register for signal `\pulse_control.\recv_set' using process `\pulse_control.$proc$pulse_control.v:136$3'.
  created $dff cell `$procdff$1505' with positive edge clock.
Creating register for signal `\pulse_control.\transmit' using process `\pulse_control.$proc$pulse_control.v:136$3'.
  created $dff cell `$procdff$1506' with positive edge clock.
Creating register for signal `\pulse_control.\tx_byte' using process `\pulse_control.$proc$pulse_control.v:136$3'.
  created $dff cell `$procdff$1507' with positive edge clock.
Creating register for signal `\pulse_control.\vinput' using process `\pulse_control.$proc$pulse_control.v:136$3'.
  created $dff cell `$procdff$1508' with positive edge clock.
Creating register for signal `\pulse_control.\vcontrol' using process `\pulse_control.$proc$pulse_control.v:136$3'.
  created $dff cell `$procdff$1509' with positive edge clock.
Creating register for signal `\pulse_control.\voutput' using process `\pulse_control.$proc$pulse_control.v:136$3'.
  created $dff cell `$procdff$1510' with positive edge clock.
Creating register for signal `\pulse_control.\test' using process `\pulse_control.$proc$pulse_control.v:136$3'.
  created $dff cell `$procdff$1511' with positive edge clock.
Creating register for signal `\pulse_control.\writestate' using process `\pulse_control.$proc$pulse_control.v:136$3'.
  created $dff cell `$procdff$1512' with positive edge clock.
Creating register for signal `\pulse_control.\readstate' using process `\pulse_control.$proc$pulse_control.v:136$3'.
  created $dff cell `$procdff$1513' with positive edge clock.
Creating register for signal `\pulse_control.\readcount' using process `\pulse_control.$proc$pulse_control.v:136$3'.
  created $dff cell `$procdff$1514' with positive edge clock.
Creating register for signal `\pulse_control.\state' using process `\pulse_control.$proc$pulse_control.v:136$3'.
  created $dff cell `$procdff$1515' with positive edge clock.
Creating register for signal `\pulse_control.$bitselwrite$mask$pulse_control.v:151$1' using process `\pulse_control.$proc$pulse_control.v:136$3'.
  created $dff cell `$procdff$1516' with positive edge clock.
Creating register for signal `\pulse_control.$bitselwrite$data$pulse_control.v:151$2' using process `\pulse_control.$proc$pulse_control.v:136$3'.
  created $dff cell `$procdff$1517' with positive edge clock.

6.4.9. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `TRELLIS_FF.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:0$391'.
Found and cleaned up 2 empty switches in `\TRELLIS_FF.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:350$387'.
Removing empty process `TRELLIS_FF.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:350$387'.
Removing empty process `DPR16X4C.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:0$384'.
Found and cleaned up 1 empty switch in `\DPR16X4C.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:285$363'.
Removing empty process `DPR16X4C.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:285$363'.
Removing empty process `TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:0$330'.
Found and cleaned up 1 empty switch in `\TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:221$308'.
Removing empty process `TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:221$308'.
Removing empty process `TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:213$307'.
Removing empty process `uart.$proc$uart.v:106$161'.
Removing empty process `uart.$proc$uart.v:105$160'.
Removing empty process `uart.$proc$uart.v:101$159'.
Found and cleaned up 17 empty switches in `\uart.$proc$uart.v:135$132'.
Removing empty process `uart.$proc$uart.v:135$132'.
Removing empty process `pulses.$proc$pulses.v:105$125'.
Removing empty process `pulses.$proc$pulses.v:99$124'.
Removing empty process `pulses.$proc$pulses.v:58$123'.
Removing empty process `pulses.$proc$pulses.v:57$122'.
Removing empty process `pulses.$proc$pulses.v:49$121'.
Found and cleaned up 5 empty switches in `\pulses.$proc$pulses.v:165$56'.
Removing empty process `pulses.$proc$pulses.v:165$56'.
Removing empty process `pulses.$proc$pulses.v:117$48'.
Removing empty process `pulse_control.$proc$pulse_control.v:133$47'.
Removing empty process `pulse_control.$proc$pulse_control.v:117$46'.
Removing empty process `pulse_control.$proc$pulse_control.v:116$45'.
Removing empty process `pulse_control.$proc$pulse_control.v:115$44'.
Removing empty process `pulse_control.$proc$pulse_control.v:114$43'.
Removing empty process `pulse_control.$proc$pulse_control.v:48$42'.
Removing empty process `pulse_control.$proc$pulse_control.v:47$41'.
Removing empty process `pulse_control.$proc$pulse_control.v:46$40'.
Removing empty process `pulse_control.$proc$pulse_control.v:45$39'.
Removing empty process `pulse_control.$proc$pulse_control.v:44$38'.
Removing empty process `pulse_control.$proc$pulse_control.v:43$37'.
Removing empty process `pulse_control.$proc$pulse_control.v:42$36'.
Removing empty process `pulse_control.$proc$pulse_control.v:41$35'.
Removing empty process `pulse_control.$proc$pulse_control.v:40$34'.
Removing empty process `pulse_control.$proc$pulse_control.v:39$33'.
Removing empty process `pulse_control.$proc$pulse_control.v:38$32'.
Removing empty process `pulse_control.$proc$pulse_control.v:37$31'.
Found and cleaned up 9 empty switches in `\pulse_control.$proc$pulse_control.v:136$3'.
Removing empty process `pulse_control.$proc$pulse_control.v:136$3'.
Cleaned up 35 empty switches.

6.5. Executing FLATTEN pass (flatten design).
Deleting now unused module uart.
Deleting now unused module pulses.
Deleting now unused module pulse_control.
Deleting now unused module pll.
<suppressed ~4 debug messages>

6.6. Executing TRIBUF pass.

6.7. Executing DEMINOUT pass (demote inout ports to input or output).

6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_gen.
<suppressed ~114 debug messages>

6.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_gen..
Removed 69 unused cells and 357 unused wires.
<suppressed ~89 debug messages>

6.10. Executing CHECK pass (checking for obvious problems).
checking module pulse_gen..
found and reported 0 problems.

6.11. Executing OPT pass (performing simple optimizations).

6.11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_gen.

6.11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pulse_gen'.
<suppressed ~591 debug messages>
Removed a total of 197 cells.

6.11.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \pulse_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port A of cell $flatten\control.$procmux$1298: \control.writestate -> 1'0
      Replacing known input bits on port B of cell $flatten\control.$procmux$1296: \control.writestate -> 1'1
      Replacing known input bits on port B of cell $flatten\control.$procmux$1300: \control.writestate -> 1'0
  Analyzing evaluation results.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$500.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$508.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$516.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$524.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$532.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$565.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$575.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$577.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$587.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$589.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$599.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$601.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$610.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$619.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$628.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$637.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$646.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$655.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$666.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$668.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$678.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$688.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$698.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$708.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$720.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$722.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$734.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$736.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$748.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$750.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$762.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$764.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$776.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$778.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$789.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$800.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$811.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$822.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$833.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$845.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$857.
    dead port 2/2 on $mux $flatten\control.$procmux$1150.
    dead port 2/2 on $mux $flatten\control.$procmux$1152.
    dead port 2/2 on $mux $flatten\control.$procmux$1154.
    dead port 2/2 on $mux $flatten\control.$procmux$1188.
    dead port 2/2 on $mux $flatten\control.$procmux$1190.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$415.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$417.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$425.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$427.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$435.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$437.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$445.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$447.
    dead port 2/2 on $mux $flatten\control.$procmux$1217.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$455.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$457.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$464.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$471.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$478.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$485.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$492.
Removed 62 multiplexer ports.
<suppressed ~46 debug messages>

6.11.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \pulse_gen.
    New ctrl vector for $pmux cell $flatten\control.\uart0.$procmux$534: { $flatten\control.\uart0.$procmux$501_CMP $flatten\control.\uart0.$procmux$418_CMP $auto$opt_reduce.cc:134:opt_mux$1519 }
    New ctrl vector for $pmux cell $flatten\control.\uart0.$procmux$539: { $flatten\control.\uart0.$procmux$501_CMP $flatten\control.\uart0.$procmux$418_CMP $auto$opt_reduce.cc:134:opt_mux$1521 }
    New ctrl vector for $pmux cell $flatten\control.$procmux$1264: { $flatten\control.$procmux$1155_CMP $auto$opt_reduce.cc:134:opt_mux$1523 }
    New ctrl vector for $pmux cell $flatten\control.\uart0.$procmux$549: { $flatten\control.\uart0.$procmux$501_CMP $flatten\control.\uart0.$procmux$418_CMP $auto$opt_reduce.cc:134:opt_mux$1525 }
    New ctrl vector for $pmux cell $flatten\control.\uart0.$procmux$554: { $flatten\control.\uart0.$procmux$501_CMP $flatten\control.\uart0.$procmux$418_CMP $auto$opt_reduce.cc:134:opt_mux$1527 }
    New ctrl vector for $pmux cell $flatten\control.\uart0.$procmux$868: { $flatten\control.\uart0.$procmux$846_CMP $flatten\control.\uart0.$procmux$723_CMP $flatten\control.\uart0.$procmux$669_CMP $flatten\control.\uart0.$procmux$578_CMP $flatten\control.\uart0.$procmux$862_CMP $auto$opt_reduce.cc:134:opt_mux$1529 }
    New ctrl vector for $pmux cell $flatten\control.\uart0.$procmux$877: { $flatten\control.\uart0.$procmux$578_CMP $auto$opt_reduce.cc:134:opt_mux$1531 }
    New ctrl vector for $pmux cell $flatten\control.\uart0.$procmux$886: { $flatten\control.\uart0.$procmux$723_CMP $flatten\control.\uart0.$procmux$578_CMP $auto$opt_reduce.cc:134:opt_mux$1533 }
    New ctrl vector for $pmux cell $flatten\control.\uart0.$procmux$895: { $flatten\control.\uart0.$procmux$723_CMP $flatten\control.\uart0.$procmux$669_CMP $flatten\control.\uart0.$procmux$578_CMP $auto$opt_reduce.cc:134:opt_mux$1535 }
    New ctrl vector for $pmux cell $flatten\control.\uart0.$procmux$904: { $flatten\control.\uart0.$procmux$723_CMP $flatten\control.\uart0.$procmux$669_CMP $flatten\control.\uart0.$procmux$578_CMP $auto$opt_reduce.cc:134:opt_mux$1537 }
    New ctrl vector for $pmux cell $flatten\pulses.$procmux$1007: $auto$opt_reduce.cc:134:opt_mux$1539
    New ctrl vector for $pmux cell $flatten\pulses.$procmux$1027: $auto$opt_reduce.cc:134:opt_mux$1541
    New ctrl vector for $pmux cell $flatten\pulses.$procmux$945: $auto$opt_reduce.cc:134:opt_mux$1543
    New ctrl vector for $pmux cell $flatten\pulses.$procmux$967: $auto$opt_reduce.cc:134:opt_mux$1545
    New ctrl vector for $pmux cell $flatten\pulses.$procmux$987: $auto$opt_reduce.cc:134:opt_mux$1547
  Optimizing cells in module \pulse_gen.
Performed a total of 15 changes.

6.11.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pulse_gen'.
<suppressed ~24 debug messages>
Removed a total of 8 cells.

6.11.6. Executing OPT_DFF pass (perform DFF optimizations).

6.11.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_gen..
Removed 0 unused cells and 267 unused wires.
<suppressed ~1 debug messages>

6.11.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_gen.

6.11.9. Rerunning OPT passes. (Maybe there is more to do..)

6.11.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \pulse_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~46 debug messages>

6.11.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \pulse_gen.
Performed a total of 0 changes.

6.11.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pulse_gen'.
Removed a total of 0 cells.

6.11.13. Executing OPT_DFF pass (perform DFF optimizations).

6.11.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_gen..

6.11.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_gen.

6.11.16. Finished OPT passes. (There is nothing left to do.)

6.12. Executing FSM pass (extract and optimize FSM).

6.12.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking pulse_gen.control.readstate as FSM state register:
    Register has an initialization value.
Not marking pulse_gen.control.state as FSM state register:
    Register has an initialization value.
    Circuit seems to be self-resetting.
Not marking pulse_gen.control.uart0.recv_state as FSM state register:
    Register has an initialization value.
    Circuit seems to be self-resetting.
Not marking pulse_gen.control.uart0.tx_state as FSM state register:
    Users of register don't seem to benefit from recoding.
    Register has an initialization value.
    Circuit seems to be self-resetting.

6.12.2. Executing FSM_EXTRACT pass (extracting FSM from design).

6.12.3. Executing FSM_OPT pass (simple optimizations of FSMs).

6.12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_gen..

6.12.5. Executing FSM_OPT pass (simple optimizations of FSMs).

6.12.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

6.12.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

6.12.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

6.13. Executing OPT pass (performing simple optimizations).

6.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_gen.

6.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pulse_gen'.
Removed a total of 0 cells.

6.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \pulse_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~46 debug messages>

6.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \pulse_gen.
Performed a total of 0 changes.

6.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pulse_gen'.
Removed a total of 0 cells.

6.13.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $flatten\pulses.$procdff$1478 ($dff) from module pulse_gen (D = $flatten\pulses.$procmux$942_Y, Q = \pulses.cblock_on).
Adding EN signal on $flatten\pulses.$procdff$1477 ($dff) from module pulse_gen (D = $flatten\pulses.$procmux$964_Y, Q = \pulses.cblock_delay).
Adding EN signal on $flatten\pulses.$procdff$1476 ($dff) from module pulse_gen (D = $flatten\pulses.$procmux$984_Y, Q = \pulses.cpulse).
Adding SRST signal on $auto$opt_dff.cc:764:run$1600 ($dffe) from module pulse_gen (D = $flatten\pulses.$procmux$982_Y [31:16], Q = \pulses.cpulse [31:16], rval = 16'0000000000000000).
Adding EN signal on $flatten\pulses.$procdff$1475 ($dff) from module pulse_gen (D = $flatten\pulses.$procmux$1004_Y, Q = \pulses.cdelay).
Adding EN signal on $flatten\pulses.$procdff$1474 ($dff) from module pulse_gen (D = $flatten\pulses.$procmux$1024_Y, Q = \pulses.ccount).
Adding SRST signal on $auto$opt_dff.cc:764:run$1633 ($dffe) from module pulse_gen (D = $flatten\pulses.$procmux$1022_Y, Q = \pulses.ccount, rval = 8'00000000).
Adding EN signal on $flatten\pulses.$procdff$1473 ($dff) from module pulse_gen (D = $flatten\pulses.$sub$pulses.v:169$58_Y [23:0], Q = \pulses.nutation_pulse_stop).
Adding EN signal on $flatten\pulses.$procdff$1472 ($dff) from module pulse_gen (D = $flatten\pulses.$sub$pulses.v:169$59_Y [23:0], Q = \pulses.nutation_pulse_start).
Adding EN signal on $flatten\pulses.$procdff$1471 ($dff) from module pulse_gen (D = $flatten\pulses.$procmux$1056_Y, Q = \pulses.inh).
Adding EN signal on $flatten\pulses.$procdff$1470 ($dff) from module pulse_gen (D = $flatten\pulses.$ternary$pulses.v:172$64_Y [0], Q = \pulses.nut_pulse).
Adding SRST signal on $auto$opt_dff.cc:764:run$1652 ($dffe) from module pulse_gen (D = $flatten\pulses.$ternary$pulses.v:173$63_Y [0], Q = \pulses.nut_pulse, rval = 1'0).
Adding EN signal on $flatten\pulses.$procdff$1469 ($dff) from module pulse_gen (D = $flatten\pulses.$logic_or$pulses.v:266$120_Y, Q = \pulses.pulse).
Adding EN signal on $flatten\pulses.$procdff$1468 ($dff) from module pulse_gen (D = $flatten\pulses.$procmux$1080_Y, Q = \pulses.sync).
Adding SRST signal on $flatten\pulses.$procdff$1467 ($dff) from module pulse_gen (D = $flatten\pulses.$add$pulses.v:265$118_Y, Q = \pulses.counter, rval = 0).
Adding EN signal on $flatten\pulses.$procdff$1466 ($dff) from module pulse_gen (D = $flatten\pulses.$procmux$1100_Y, Q = \pulses.pulses).
Adding EN signal on $flatten\control.\uart0.$procdff$1465 ($dff) from module pulse_gen (D = $flatten\control.\uart0.$0\tx_data[7:0], Q = \control.uart0.tx_data).
Adding EN signal on $flatten\control.\uart0.$procdff$1464 ($dff) from module pulse_gen (D = $flatten\control.\uart0.$0\tx_bits_remaining[3:0], Q = \control.uart0.tx_bits_remaining).
Adding EN signal on $flatten\control.\uart0.$procdff$1463 ($dff) from module pulse_gen (D = $flatten\control.\uart0.$0\tx_state[1:0], Q = \control.uart0.tx_state).
Adding EN signal on $flatten\control.\uart0.$procdff$1462 ($dff) from module pulse_gen (D = $flatten\control.\uart0.$0\tx_out[0:0], Q = \control.uart0.tx_out).
Adding EN signal on $flatten\control.\uart0.$procdff$1461 ($dff) from module pulse_gen (D = $flatten\control.\uart0.$0\rx_data[7:0], Q = \control.uart0.rx_data).
Adding EN signal on $flatten\control.\uart0.$procdff$1460 ($dff) from module pulse_gen (D = $flatten\control.\uart0.$0\rx_bits_remaining[3:0], Q = \control.uart0.rx_bits_remaining).
Adding EN signal on $flatten\control.\uart0.$procdff$1459 ($dff) from module pulse_gen (D = $flatten\control.\uart0.$0\recv_state[2:0], Q = \control.uart0.recv_state).
Adding EN signal on $flatten\control.\uart0.$procdff$1456 ($dff) from module pulse_gen (D = $flatten\control.\uart0.$0\rx_sample_countdown[3:0], Q = \control.uart0.rx_sample_countdown).
Adding EN signal on $flatten\control.\uart0.$procdff$1455 ($dff) from module pulse_gen (D = $flatten\control.\uart0.$0\rx_samples[3:0], Q = \control.uart0.rx_samples).
Adding EN signal on $flatten\control.$procdff$1515 ($dff) from module pulse_gen (D = $flatten\control.$0\state[2:0], Q = \control.state).
Adding EN signal on $flatten\control.$procdff$1514 ($dff) from module pulse_gen (D = $flatten\control.$0\readcount[5:0], Q = \control.readcount).
Adding EN signal on $flatten\control.$procdff$1513 ($dff) from module pulse_gen (D = $flatten\control.$procmux$1284_Y, Q = \control.readstate).
Adding EN signal on $flatten\control.$procdff$1512 ($dff) from module pulse_gen (D = $flatten\control.$0\writestate[0:0], Q = \control.writestate).
Adding EN signal on $flatten\control.$procdff$1510 ($dff) from module pulse_gen (D = $flatten\control.$add$pulse_control.v:168$27_Y, Q = \control.voutput).
Adding EN signal on $flatten\control.$procdff$1509 ($dff) from module pulse_gen (D = \control.uart0.rx_data, Q = \control.vcontrol).
Adding EN signal on $flatten\control.$procdff$1508 ($dff) from module pulse_gen (D = $flatten\control.$or$pulse_control.v:0$22_Y, Q = \control.vinput).
Adding EN signal on $flatten\control.$procdff$1507 ($dff) from module pulse_gen (D = \control.voutput, Q = \control.tx_byte).
Adding EN signal on $flatten\control.$procdff$1506 ($dff) from module pulse_gen (D = $flatten\control.$0\transmit[0:0], Q = \control.transmit).
Adding EN signal on $flatten\control.$procdff$1505 ($dff) from module pulse_gen (D = 1'1, Q = \control.recv_set).
Adding EN signal on $flatten\control.$procdff$1503 ($dff) from module pulse_gen (D = \control.vinput [7:0], Q = \control.cpmg).
Adding EN signal on $flatten\control.$procdff$1501 ($dff) from module pulse_gen (D = \control.vinput [15:8], Q = \control.pulse_block).
Adding EN signal on $flatten\control.$procdff$1500 ($dff) from module pulse_gen (D = \control.vinput [0], Q = \control.block).
Adding EN signal on $flatten\control.$procdff$1499 ($dff) from module pulse_gen (D = \control.vinput [7:0], Q = \control.nut_wid).
Adding EN signal on $flatten\control.$procdff$1498 ($dff) from module pulse_gen (D = \control.vinput [31:16], Q = \control.nut_del).
Adding EN signal on $flatten\control.$procdff$1497 ($dff) from module pulse_gen (D = \control.vinput [15:0], Q = \control.p2width).
Adding EN signal on $flatten\control.$procdff$1496 ($dff) from module pulse_gen (D = \control.vinput [15:0], Q = \control.delay).
Adding EN signal on $flatten\control.$procdff$1495 ($dff) from module pulse_gen (D = \control.vinput [15:0], Q = \control.p1width).
Adding EN signal on $flatten\control.$procdff$1494 ($dff) from module pulse_gen (D = \control.vinput, Q = \control.period).

6.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_gen..
Removed 55 unused cells and 55 unused wires.
<suppressed ~56 debug messages>

6.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_gen.
<suppressed ~19 debug messages>

6.13.9. Rerunning OPT passes. (Maybe there is more to do..)

6.13.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \pulse_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~29 debug messages>

6.13.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \pulse_gen.
    New ctrl vector for $pmux cell $flatten\control.\uart0.$procmux$534: { $flatten\control.\uart0.$procmux$501_CMP $flatten\control.\uart0.$procmux$418_CMP }
    New ctrl vector for $pmux cell $flatten\control.\uart0.$procmux$539: { $flatten\control.\uart0.$procmux$501_CMP $flatten\control.\uart0.$procmux$418_CMP }
    New ctrl vector for $pmux cell $flatten\control.\uart0.$procmux$549: { $flatten\control.\uart0.$procmux$501_CMP $flatten\control.\uart0.$procmux$418_CMP }
    New ctrl vector for $pmux cell $flatten\control.\uart0.$procmux$877: $flatten\control.\uart0.$procmux$578_CMP
    New ctrl vector for $pmux cell $flatten\control.\uart0.$procmux$886: { $flatten\control.\uart0.$procmux$723_CMP $flatten\control.\uart0.$procmux$578_CMP }
    New ctrl vector for $pmux cell $flatten\control.\uart0.$procmux$895: { $flatten\control.\uart0.$procmux$723_CMP $flatten\control.\uart0.$procmux$669_CMP $flatten\control.\uart0.$procmux$578_CMP }
    New ctrl vector for $pmux cell $flatten\control.\uart0.$procmux$904: { $flatten\control.\uart0.$procmux$723_CMP $flatten\control.\uart0.$procmux$669_CMP $flatten\control.\uart0.$procmux$578_CMP }
  Optimizing cells in module \pulse_gen.
Performed a total of 7 changes.

6.13.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pulse_gen'.
<suppressed ~189 debug messages>
Removed a total of 63 cells.

6.13.13. Executing OPT_DFF pass (perform DFF optimizations).

6.13.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_gen..
Removed 0 unused cells and 63 unused wires.
<suppressed ~1 debug messages>

6.13.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_gen.

6.13.16. Rerunning OPT passes. (Maybe there is more to do..)

6.13.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \pulse_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~29 debug messages>

6.13.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \pulse_gen.
Performed a total of 0 changes.

6.13.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pulse_gen'.
Removed a total of 0 cells.

6.13.20. Executing OPT_DFF pass (perform DFF optimizations).

6.13.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_gen..

6.13.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_gen.

6.13.23. Finished OPT passes. (There is nothing left to do.)

6.14. Executing WREDUCE pass (reducing word size of cells).
Removed top 6 bits (of 9) from port B of cell pulse_gen.$auto$opt_dff.cc:218:make_patterns_logic$1640 ($ne).
Removed top 5 bits (of 6) from port B of cell pulse_gen.$auto$opt_dff.cc:218:make_patterns_logic$1642 ($ne).
Removed top 6 bits (of 7) from port B of cell pulse_gen.$auto$opt_dff.cc:218:make_patterns_logic$1658 ($ne).
Removed top 6 bits (of 7) from port B of cell pulse_gen.$auto$opt_dff.cc:218:make_patterns_logic$1676 ($ne).
Removed top 1 bits (of 6) from port B of cell pulse_gen.$auto$opt_dff.cc:218:make_patterns_logic$1678 ($ne).
Removed top 1 bits (of 2) from port B of cell pulse_gen.$auto$opt_dff.cc:218:make_patterns_logic$1689 ($ne).
Removed top 4 bits (of 5) from port B of cell pulse_gen.$auto$opt_dff.cc:218:make_patterns_logic$1589 ($ne).
Removed top 1 bits (of 2) from port B of cell pulse_gen.$auto$opt_dff.cc:218:make_patterns_logic$1810 ($ne).
Removed top 2 bits (of 3) from mux cell pulse_gen.$flatten\control.\uart0.$ternary$uart.v:193$144 ($mux).
Removed top 30 bits (of 32) from port B of cell pulse_gen.$flatten\control.\uart0.$gt$uart.v:201$146 ($gt).
Removed top 2 bits (of 3) from mux cell pulse_gen.$flatten\control.\uart0.$ternary$uart.v:226$150 ($mux).
Removed top 1 bits (of 2) from mux cell pulse_gen.$flatten\control.\uart0.$ternary$uart.v:301$157 ($mux).
Removed top 1 bits (of 2) from port B of cell pulse_gen.$flatten\control.\uart0.$procmux$418_CMP0 ($eq).
Removed top 1 bits (of 11) from mux cell pulse_gen.$flatten\control.\uart0.$procmux$423 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$433 ($mux).
Removed top 3 bits (of 5) from port B of cell pulse_gen.$auto$opt_dff.cc:218:make_patterns_logic$1553 ($ne).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$453 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$462 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$469 ($mux).
Removed top 3 bits (of 4) from port B of cell pulse_gen.$auto$opt_dff.cc:218:make_patterns_logic$1555 ($ne).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$476 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$483 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$498 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$506 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$514 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$530 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$563 ($mux).
Removed top 1 bits (of 3) from port B of cell pulse_gen.$flatten\control.\uart0.$procmux$578_CMP0 ($eq).
Removed top 5 bits (of 15) from mux cell pulse_gen.$flatten\control.\uart0.$procmux$585 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$608 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$626 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$635 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$644 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$653 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$664 ($mux).
Removed top 1 bits (of 3) from port B of cell pulse_gen.$flatten\control.\uart0.$procmux$669_CMP0 ($eq).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$676 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$686 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$706 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$718 ($mux).
Removed top 2 bits (of 3) from port B of cell pulse_gen.$flatten\control.\uart0.$procmux$723_CMP0 ($eq).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$732 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$760 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$787 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$798 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$820 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$831 ($mux).
Removed top 4 bits (of 7) from port B of cell pulse_gen.$auto$opt_dff.cc:218:make_patterns_logic$1551 ($ne).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$843 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$877 ($mux).
Removed top 7 bits (of 8) from port B of cell pulse_gen.$flatten\control.$procmux$1445_CMP0 ($eq).
Removed top 6 bits (of 8) from port B of cell pulse_gen.$flatten\control.$procmux$1434_CMP0 ($eq).
Removed top 6 bits (of 8) from port B of cell pulse_gen.$flatten\control.$procmux$1412_CMP0 ($eq).
Removed top 5 bits (of 8) from port B of cell pulse_gen.$flatten\control.$procmux$1397_CMP0 ($eq).
Removed top 5 bits (of 8) from port B of cell pulse_gen.$flatten\control.$procmux$1383_CMP0 ($eq).
Removed top 5 bits (of 8) from port B of cell pulse_gen.$flatten\control.$procmux$1367_CMP0 ($eq).
Removed cell pulse_gen.$flatten\control.$procmux$1345 ($mux).
Removed cell pulse_gen.$flatten\control.$procmux$1341 ($mux).
Removed cell pulse_gen.$flatten\control.$procmux$1290 ($mux).
Removed top 1 bits (of 2) from mux cell pulse_gen.$flatten\control.$procmux$1288 ($mux).
Removed top 1 bits (of 2) from port B of cell pulse_gen.$flatten\control.$procmux$1285_CMP0 ($eq).
Removed cell pulse_gen.$flatten\control.$procmux$1282 ($mux).
Removed cell pulse_gen.$flatten\control.$procmux$1275 ($mux).
Removed cell pulse_gen.$flatten\control.$procmux$1273 ($mux).
Removed cell pulse_gen.$flatten\control.$procmux$1260 ($mux).
Removed cell pulse_gen.$flatten\control.$procmux$1258 ($mux).
Removed cell pulse_gen.$flatten\control.$procmux$1256 ($mux).
Removed top 1 bits (of 3) from port B of cell pulse_gen.$flatten\control.$procmux$1250_CMP0 ($eq).
Removed cell pulse_gen.$flatten\control.$procmux$1246 ($mux).
Removed cell pulse_gen.$flatten\control.$procmux$1242 ($mux).
Removed top 2 bits (of 3) from port B of cell pulse_gen.$flatten\control.$procmux$1237_CMP0 ($eq).
Removed top 28 bits (of 32) from port B of cell pulse_gen.$flatten\control.$add$pulse_control.v:152$23 ($add).
Removed top 26 bits (of 32) from port Y of cell pulse_gen.$flatten\control.$add$pulse_control.v:152$23 ($add).
Removed top 26 bits (of 32) from port B of cell pulse_gen.$flatten\control.$shl$pulse_control.v:0$19 ($shl).
Removed top 24 bits (of 32) from port Y of cell pulse_gen.$flatten\control.$and$pulse_control.v:0$17 ($and).
Removed top 26 bits (of 32) from port B of cell pulse_gen.$flatten\control.$shl$pulse_control.v:0$16 ($shl).
Removed top 1 bits (of 3) from port B of cell pulse_gen.$auto$opt_dff.cc:218:make_patterns_logic$1792 ($ne).
Removed top 1 bits (of 2) from port B of cell pulse_gen.$auto$opt_dff.cc:218:make_patterns_logic$1788 ($ne).
Removed top 2 bits (of 3) from port B of cell pulse_gen.$auto$opt_dff.cc:218:make_patterns_logic$1782 ($ne).
Removed cell pulse_gen.$flatten\pulses.$procmux$1091 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1089 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1075 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1073 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1071 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1051 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1049 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1047 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1041 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1039 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1022 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1020 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1018 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1016 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1014 ($mux).
Removed top 7 bits (of 8) from port B of cell pulse_gen.$flatten\pulses.$procmux$1008_CMP0 ($eq).
Removed cell pulse_gen.$flatten\pulses.$procmux$1002 ($mux).
Removed top 16 bits (of 32) from port B of cell pulse_gen.$flatten\pulses.$procmux$1003_CMP0 ($eq).
Removed cell pulse_gen.$flatten\pulses.$procmux$1000 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$998 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$996 ($mux).
Removed top 16 bits (of 32) from mux cell pulse_gen.$flatten\pulses.$procmux$984 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$982 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$980 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$978 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$976 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$962 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$960 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$958 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$956 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$954 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$952 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$940 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$938 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$936 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$934 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$932 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$930 ($mux).
Removed top 31 bits (of 32) from port B of cell pulse_gen.$flatten\pulses.$add$pulses.v:265$118 ($add).
Removed top 31 bits (of 32) from port B of cell pulse_gen.$flatten\pulses.$add$pulses.v:255$115 ($add).
Removed top 24 bits (of 32) from port Y of cell pulse_gen.$flatten\pulses.$add$pulses.v:255$115 ($add).
Removed top 29 bits (of 32) from port B of cell pulse_gen.$flatten\pulses.$sub$pulses.v:250$114 ($sub).
Removed top 15 bits (of 32) from port B of cell pulse_gen.$flatten\pulses.$add$pulses.v:250$113 ($add).
Removed cell pulse_gen.$flatten\pulses.$ternary$pulses.v:236$108 ($mux).
Removed top 31 bits (of 32) from port B of cell pulse_gen.$flatten\pulses.$sub$pulses.v:236$105 ($sub).
Removed top 23 bits (of 32) from port Y of cell pulse_gen.$flatten\pulses.$sub$pulses.v:236$105 ($sub).
Removed top 28 bits (of 32) from port B of cell pulse_gen.$flatten\pulses.$add$pulses.v:231$100 ($add).
Removed cell pulse_gen.$flatten\pulses.$ternary$pulses.v:223$96 ($mux).
Removed top 29 bits (of 32) from port B of cell pulse_gen.$flatten\pulses.$sub$pulses.v:211$93 ($sub).
Removed top 15 bits (of 32) from port B of cell pulse_gen.$flatten\pulses.$add$pulses.v:211$92 ($add).
Removed top 14 bits (of 32) from port Y of cell pulse_gen.$flatten\pulses.$add$pulses.v:211$92 ($add).
Removed top 15 bits (of 32) from port Y of cell pulse_gen.$flatten\pulses.$add$pulses.v:210$90 ($add).
Removed top 15 bits (of 32) from port Y of cell pulse_gen.$flatten\pulses.$add$pulses.v:207$89 ($add).
Removed top 31 bits (of 32) from mux cell pulse_gen.$flatten\pulses.$ternary$pulses.v:193$88 ($mux).
Removed top 31 bits (of 32) from mux cell pulse_gen.$flatten\pulses.$ternary$pulses.v:189$86 ($mux).
Removed top 31 bits (of 32) from mux cell pulse_gen.$flatten\pulses.$ternary$pulses.v:190$84 ($mux).
Removed top 29 bits (of 32) from port B of cell pulse_gen.$flatten\pulses.$sub$pulses.v:190$81 ($sub).
Removed top 7 bits (of 32) from port Y of cell pulse_gen.$flatten\pulses.$sub$pulses.v:190$81 ($sub).
Removed top 31 bits (of 32) from mux cell pulse_gen.$flatten\pulses.$ternary$pulses.v:183$79 ($mux).
Removed top 31 bits (of 32) from mux cell pulse_gen.$flatten\pulses.$ternary$pulses.v:184$78 ($mux).
Removed top 31 bits (of 32) from mux cell pulse_gen.$flatten\pulses.$ternary$pulses.v:185$76 ($mux).
Removed top 31 bits (of 32) from mux cell pulse_gen.$flatten\pulses.$ternary$pulses.v:186$75 ($mux).
Removed top 31 bits (of 32) from mux cell pulse_gen.$flatten\pulses.$ternary$pulses.v:187$73 ($mux).
Removed top 31 bits (of 32) from mux cell pulse_gen.$flatten\pulses.$ternary$pulses.v:178$66 ($mux).
Removed top 31 bits (of 32) from mux cell pulse_gen.$flatten\pulses.$ternary$pulses.v:173$63 ($mux).
Removed top 8 bits (of 32) from port Y of cell pulse_gen.$flatten\pulses.$sub$pulses.v:169$59 ($sub).
Removed top 8 bits (of 32) from port A of cell pulse_gen.$flatten\pulses.$sub$pulses.v:169$59 ($sub).
Removed top 8 bits (of 32) from port Y of cell pulse_gen.$flatten\pulses.$sub$pulses.v:169$58 ($sub).
Removed top 8 bits (of 32) from port A of cell pulse_gen.$flatten\pulses.$sub$pulses.v:169$58 ($sub).
Removed top 31 bits (of 32) from mux cell pulse_gen.$flatten\pulses.$ternary$pulses.v:159$55 ($mux).
Removed top 31 bits (of 32) from port B of cell pulse_gen.$flatten\pulses.$gt$pulses.v:159$54 ($gt).
Removed top 28 bits (of 32) from port B of cell pulse_gen.$flatten\pulses.$add$pulses.v:147$51 ($add).
Removed top 16 bits (of 32) from port Y of cell pulse_gen.$flatten\pulses.$add$pulses.v:147$51 ($add).
Removed top 16 bits (of 32) from port A of cell pulse_gen.$flatten\pulses.$add$pulses.v:147$51 ($add).
Removed top 16 bits (of 32) from port Y of cell pulse_gen.$flatten\pulses.$add$pulses.v:147$50 ($add).
Removed top 26 bits (of 32) from wire pulse_gen.$flatten\control.$add$pulse_control.v:152$23_Y.
Removed top 24 bits (of 32) from wire pulse_gen.$flatten\control.$and$pulse_control.v:0$17_Y.
Removed top 1 bits (of 2) from wire pulse_gen.$flatten\control.$procmux$1288_Y.
Removed top 1 bits (of 8) from wire pulse_gen.$flatten\control.\uart0.$3\tx_data[7:0].
Removed top 1 bits (of 8) from wire pulse_gen.$flatten\control.\uart0.$4\tx_data[7:0].
Removed top 1 bits (of 11) from wire pulse_gen.$flatten\control.\uart0.$5\tx_clk[10:0].
Removed top 2 bits (of 3) from wire pulse_gen.$flatten\control.\uart0.$6\recv_state[2:0].
Removed top 5 bits (of 15) from wire pulse_gen.$flatten\control.\uart0.$8\rx_clk[14:0].
Removed top 2 bits (of 3) from wire pulse_gen.$flatten\control.\uart0.$9\recv_state[2:0].
Removed top 2 bits (of 3) from wire pulse_gen.$flatten\control.\uart0.$ternary$uart.v:193$144_Y.
Removed top 2 bits (of 3) from wire pulse_gen.$flatten\control.\uart0.$ternary$uart.v:226$150_Y.
Removed top 1 bits (of 2) from wire pulse_gen.$flatten\control.\uart0.$ternary$uart.v:301$157_Y.
Removed top 16 bits (of 32) from wire pulse_gen.$flatten\pulses.$add$pulses.v:147$50_Y.
Removed top 15 bits (of 32) from wire pulse_gen.$flatten\pulses.$add$pulses.v:207$89_Y.
Removed top 15 bits (of 32) from wire pulse_gen.$flatten\pulses.$add$pulses.v:210$90_Y.
Removed top 14 bits (of 32) from wire pulse_gen.$flatten\pulses.$add$pulses.v:211$92_Y.
Removed top 16 bits (of 32) from wire pulse_gen.$flatten\pulses.$procmux$984_Y.
Removed top 8 bits (of 32) from wire pulse_gen.$flatten\pulses.$sub$pulses.v:169$58_Y.
Removed top 8 bits (of 32) from wire pulse_gen.$flatten\pulses.$sub$pulses.v:169$59_Y.
Removed top 31 bits (of 32) from wire pulse_gen.$flatten\pulses.$ternary$pulses.v:173$63_Y.
Removed top 31 bits (of 32) from wire pulse_gen.$flatten\pulses.$ternary$pulses.v:178$66_Y.
Removed top 31 bits (of 32) from wire pulse_gen.$flatten\pulses.$ternary$pulses.v:183$79_Y.
Removed top 31 bits (of 32) from wire pulse_gen.$flatten\pulses.$ternary$pulses.v:185$76_Y.
Removed top 31 bits (of 32) from wire pulse_gen.$flatten\pulses.$ternary$pulses.v:187$73_Y.

6.15. Executing PEEPOPT pass (run peephole optimizers).

6.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_gen..
Removed 0 unused cells and 103 unused wires.
<suppressed ~1 debug messages>

6.17. Executing SHARE pass (SAT-based resource sharing).

6.18. Executing TECHMAP pass (map to technology primitives).

6.18.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

6.18.2. Continuing TECHMAP pass.
Using template $paramod$5c6790619fdd520f2101529d9884f145abb8b880\_90_lut_cmp_ for cells of type $gt.
No more expansions possible.
<suppressed ~196 debug messages>

6.19. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_gen.
<suppressed ~1 debug messages>

6.20. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_gen..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

6.21. Executing TECHMAP pass (map to technology primitives).

6.21.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/mul2dsp.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/mul2dsp.v' to AST representation.
Generating RTLIL representation for module `\_80_mul'.
Generating RTLIL representation for module `\_90_soft_mul'.
Successfully finished Verilog frontend.

6.21.2. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ecp5/dsp_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ecp5/dsp_map.v' to AST representation.
Generating RTLIL representation for module `\$__MUL18X18'.
Successfully finished Verilog frontend.

6.21.3. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~5 debug messages>

6.22. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module pulse_gen:
  creating $macc model for $flatten\control.$add$pulse_control.v:152$23 ($add).
  creating $macc model for $flatten\control.$add$pulse_control.v:168$25 ($add).
  creating $macc model for $flatten\control.$add$pulse_control.v:168$26 ($add).
  creating $macc model for $flatten\control.$add$pulse_control.v:168$27 ($add).
  creating $macc model for $flatten\control.\uart0.$add$uart.v:189$141 ($add).
  creating $macc model for $flatten\control.\uart0.$sub$uart.v:145$134 ($sub).
  creating $macc model for $flatten\control.\uart0.$sub$uart.v:149$136 ($sub).
  creating $macc model for $flatten\control.\uart0.$sub$uart.v:192$142 ($sub).
  creating $macc model for $flatten\control.\uart0.$sub$uart.v:210$147 ($sub).
  creating $macc model for $flatten\control.\uart0.$sub$uart.v:283$155 ($sub).
  creating $macc model for $flatten\pulses.$add$pulses.v:146$49 ($add).
  creating $macc model for $flatten\pulses.$add$pulses.v:147$50 ($add).
  creating $macc model for $flatten\pulses.$add$pulses.v:147$51 ($add).
  creating $macc model for $flatten\pulses.$add$pulses.v:148$52 ($add).
  creating $macc model for $flatten\pulses.$add$pulses.v:207$89 ($add).
  creating $macc model for $flatten\pulses.$add$pulses.v:210$90 ($add).
  creating $macc model for $flatten\pulses.$add$pulses.v:211$92 ($add).
  creating $macc model for $flatten\pulses.$add$pulses.v:231$100 ($add).
  creating $macc model for $flatten\pulses.$add$pulses.v:231$98 ($add).
  creating $macc model for $flatten\pulses.$add$pulses.v:231$99 ($add).
  creating $macc model for $flatten\pulses.$add$pulses.v:232$104 ($add).
  creating $macc model for $flatten\pulses.$add$pulses.v:249$111 ($add).
  creating $macc model for $flatten\pulses.$add$pulses.v:250$113 ($add).
  creating $macc model for $flatten\pulses.$add$pulses.v:255$115 ($add).
  creating $macc model for $flatten\pulses.$add$pulses.v:265$118 ($add).
  creating $macc model for $flatten\pulses.$sub$pulses.v:169$58 ($sub).
  creating $macc model for $flatten\pulses.$sub$pulses.v:169$59 ($sub).
  creating $macc model for $flatten\pulses.$sub$pulses.v:190$81 ($sub).
  creating $macc model for $flatten\pulses.$sub$pulses.v:211$93 ($sub).
  creating $macc model for $flatten\pulses.$sub$pulses.v:236$105 ($sub).
  creating $macc model for $flatten\pulses.$sub$pulses.v:250$114 ($sub).
  merging $macc model for $flatten\pulses.$add$pulses.v:250$113 into $flatten\pulses.$sub$pulses.v:250$114.
  merging $macc model for $flatten\pulses.$add$pulses.v:231$98 into $flatten\pulses.$add$pulses.v:231$99.
  merging $macc model for $flatten\pulses.$add$pulses.v:231$99 into $flatten\pulses.$add$pulses.v:231$100.
  merging $macc model for $flatten\pulses.$add$pulses.v:147$50 into $flatten\pulses.$add$pulses.v:147$51.
  merging $macc model for $flatten\control.$add$pulse_control.v:168$26 into $flatten\control.$add$pulse_control.v:168$27.
  merging $macc model for $flatten\control.$add$pulse_control.v:168$25 into $flatten\control.$add$pulse_control.v:168$27.
  creating $alu model for $macc $flatten\pulses.$add$pulses.v:265$118.
  creating $alu model for $macc $flatten\pulses.$add$pulses.v:255$115.
  creating $alu model for $macc $flatten\pulses.$sub$pulses.v:169$58.
  creating $alu model for $macc $flatten\pulses.$add$pulses.v:249$111.
  creating $alu model for $macc $flatten\pulses.$add$pulses.v:232$104.
  creating $alu model for $macc $flatten\pulses.$sub$pulses.v:190$81.
  creating $alu model for $macc $flatten\pulses.$sub$pulses.v:169$59.
  creating $alu model for $macc $flatten\pulses.$add$pulses.v:211$92.
  creating $alu model for $macc $flatten\pulses.$add$pulses.v:210$90.
  creating $alu model for $macc $flatten\pulses.$add$pulses.v:207$89.
  creating $alu model for $macc $flatten\pulses.$add$pulses.v:148$52.
  creating $alu model for $macc $flatten\pulses.$sub$pulses.v:211$93.
  creating $alu model for $macc $flatten\pulses.$add$pulses.v:146$49.
  creating $alu model for $macc $flatten\control.\uart0.$sub$uart.v:283$155.
  creating $alu model for $macc $flatten\control.\uart0.$sub$uart.v:210$147.
  creating $alu model for $macc $flatten\control.\uart0.$sub$uart.v:192$142.
  creating $alu model for $macc $flatten\control.\uart0.$sub$uart.v:149$136.
  creating $alu model for $macc $flatten\control.\uart0.$sub$uart.v:145$134.
  creating $alu model for $macc $flatten\control.\uart0.$add$uart.v:189$141.
  creating $alu model for $macc $flatten\pulses.$sub$pulses.v:236$105.
  creating $alu model for $macc $flatten\control.$add$pulse_control.v:152$23.
  creating $macc cell for $flatten\control.$add$pulse_control.v:168$27: $auto$alumacc.cc:365:replace_macc$1900
  creating $macc cell for $flatten\pulses.$add$pulses.v:231$100: $auto$alumacc.cc:365:replace_macc$1901
  creating $macc cell for $flatten\pulses.$sub$pulses.v:250$114: $auto$alumacc.cc:365:replace_macc$1902
  creating $macc cell for $flatten\pulses.$add$pulses.v:147$51: $auto$alumacc.cc:365:replace_macc$1903
  creating $alu model for $flatten\pulses.$gt$pulses.v:159$54 ($gt): new $alu
  creating $alu model for $flatten\pulses.$lt$pulses.v:172$61 ($lt): new $alu
  creating $alu model for $flatten\pulses.$lt$pulses.v:173$62 ($lt): new $alu
  creating $alu model for $flatten\pulses.$lt$pulses.v:178$65 ($lt): new $alu
  creating $alu model for $flatten\pulses.$lt$pulses.v:183$67 ($lt): new $alu
  creating $alu model for $flatten\pulses.$lt$pulses.v:184$68 ($lt): new $alu
  creating $alu model for $flatten\pulses.$lt$pulses.v:189$80 ($lt): new $alu
  creating $alu model for $flatten\pulses.$lt$pulses.v:190$82 ($lt): new $alu
  creating $alu model for $flatten\pulses.$lt$pulses.v:223$94 ($lt): new $alu
  creating $alu model for $flatten\pulses.$lt$pulses.v:246$110 ($lt): new $alu
  creating $alu model for $flatten\pulses.$lt$pulses.v:265$117 ($lt): new $alu
  creating $alu model for $flatten\pulses.$eq$pulses.v:236$106 ($eq): merged with $flatten\pulses.$lt$pulses.v:246$110.
  creating $alu model for $flatten\pulses.$procmux$1003_CMP0 ($eq): merged with $flatten\pulses.$lt$pulses.v:183$67.
  creating $alu model for $flatten\pulses.$procmux$1040_CMP0 ($eq): merged with $flatten\pulses.$lt$pulses.v:190$82.
  creating $alu cell for $flatten\pulses.$lt$pulses.v:265$117: $auto$alumacc.cc:485:replace_alu$1915
  creating $alu cell for $flatten\pulses.$lt$pulses.v:246$110, $flatten\pulses.$eq$pulses.v:236$106: $auto$alumacc.cc:485:replace_alu$1926
  creating $alu cell for $flatten\pulses.$lt$pulses.v:223$94: $auto$alumacc.cc:485:replace_alu$1933
  creating $alu cell for $flatten\pulses.$lt$pulses.v:190$82, $flatten\pulses.$procmux$1040_CMP0: $auto$alumacc.cc:485:replace_alu$1944
  creating $alu cell for $flatten\pulses.$lt$pulses.v:189$80: $auto$alumacc.cc:485:replace_alu$1951
  creating $alu cell for $flatten\pulses.$lt$pulses.v:184$68: $auto$alumacc.cc:485:replace_alu$1962
  creating $alu cell for $flatten\pulses.$lt$pulses.v:183$67, $flatten\pulses.$procmux$1003_CMP0: $auto$alumacc.cc:485:replace_alu$1973
  creating $alu cell for $flatten\pulses.$lt$pulses.v:178$65: $auto$alumacc.cc:485:replace_alu$1984
  creating $alu cell for $flatten\pulses.$lt$pulses.v:173$62: $auto$alumacc.cc:485:replace_alu$1995
  creating $alu cell for $flatten\pulses.$lt$pulses.v:172$61: $auto$alumacc.cc:485:replace_alu$2006
  creating $alu cell for $flatten\pulses.$gt$pulses.v:159$54: $auto$alumacc.cc:485:replace_alu$2017
  creating $alu cell for $flatten\control.$add$pulse_control.v:152$23: $auto$alumacc.cc:485:replace_alu$2022
  creating $alu cell for $flatten\pulses.$sub$pulses.v:236$105: $auto$alumacc.cc:485:replace_alu$2025
  creating $alu cell for $flatten\control.\uart0.$add$uart.v:189$141: $auto$alumacc.cc:485:replace_alu$2028
  creating $alu cell for $flatten\control.\uart0.$sub$uart.v:145$134: $auto$alumacc.cc:485:replace_alu$2031
  creating $alu cell for $flatten\control.\uart0.$sub$uart.v:149$136: $auto$alumacc.cc:485:replace_alu$2034
  creating $alu cell for $flatten\control.\uart0.$sub$uart.v:192$142: $auto$alumacc.cc:485:replace_alu$2037
  creating $alu cell for $flatten\control.\uart0.$sub$uart.v:210$147: $auto$alumacc.cc:485:replace_alu$2040
  creating $alu cell for $flatten\control.\uart0.$sub$uart.v:283$155: $auto$alumacc.cc:485:replace_alu$2043
  creating $alu cell for $flatten\pulses.$sub$pulses.v:211$93: $auto$alumacc.cc:485:replace_alu$2046
  creating $alu cell for $flatten\pulses.$add$pulses.v:146$49: $auto$alumacc.cc:485:replace_alu$2049
  creating $alu cell for $flatten\pulses.$add$pulses.v:207$89: $auto$alumacc.cc:485:replace_alu$2052
  creating $alu cell for $flatten\pulses.$add$pulses.v:148$52: $auto$alumacc.cc:485:replace_alu$2055
  creating $alu cell for $flatten\pulses.$add$pulses.v:210$90: $auto$alumacc.cc:485:replace_alu$2058
  creating $alu cell for $flatten\pulses.$add$pulses.v:211$92: $auto$alumacc.cc:485:replace_alu$2061
  creating $alu cell for $flatten\pulses.$sub$pulses.v:169$59: $auto$alumacc.cc:485:replace_alu$2064
  creating $alu cell for $flatten\pulses.$sub$pulses.v:190$81: $auto$alumacc.cc:485:replace_alu$2067
  creating $alu cell for $flatten\pulses.$add$pulses.v:232$104: $auto$alumacc.cc:485:replace_alu$2070
  creating $alu cell for $flatten\pulses.$add$pulses.v:249$111: $auto$alumacc.cc:485:replace_alu$2073
  creating $alu cell for $flatten\pulses.$sub$pulses.v:169$58: $auto$alumacc.cc:485:replace_alu$2076
  creating $alu cell for $flatten\pulses.$add$pulses.v:255$115: $auto$alumacc.cc:485:replace_alu$2079
  creating $alu cell for $flatten\pulses.$add$pulses.v:265$118: $auto$alumacc.cc:485:replace_alu$2082
  created 32 $alu and 4 $macc cells.

6.23. Executing OPT pass (performing simple optimizations).

6.23.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_gen.
<suppressed ~13 debug messages>

6.23.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pulse_gen'.
Removed a total of 0 cells.

6.23.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \pulse_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~27 debug messages>

6.23.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \pulse_gen.
    New ctrl vector for $pmux cell $flatten\control.\uart0.$procmux$895: { $flatten\control.\uart0.$procmux$669_CMP $auto$opt_reduce.cc:134:opt_mux$2086 }
    New ctrl vector for $pmux cell $flatten\control.\uart0.$procmux$904: { $flatten\control.\uart0.$procmux$669_CMP $auto$opt_reduce.cc:134:opt_mux$2088 }
  Optimizing cells in module \pulse_gen.
Performed a total of 2 changes.

6.23.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pulse_gen'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

6.23.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $auto$opt_dff.cc:764:run$1616 ($dffe) from module pulse_gen (D = $flatten\pulses.$add$pulses.v:231$100_Y [31:17], Q = \pulses.cdelay [31:17], rval = 15'000000000000000).
Adding SRST signal on $auto$opt_dff.cc:764:run$1585 ($dffe) from module pulse_gen (D = $flatten\pulses.$add$pulses.v:249$111_Y [31:17], Q = \pulses.cblock_delay [31:17], rval = 15'000000000000000).

6.23.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_gen..
Removed 15 unused cells and 31 unused wires.
<suppressed ~16 debug messages>

6.23.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_gen.

6.23.9. Rerunning OPT passes. (Maybe there is more to do..)

6.23.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \pulse_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~27 debug messages>

6.23.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \pulse_gen.
Performed a total of 0 changes.

6.23.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pulse_gen'.
Removed a total of 0 cells.

6.23.13. Executing OPT_DFF pass (perform DFF optimizations).

6.23.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_gen..

6.23.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_gen.

6.23.16. Finished OPT passes. (There is nothing left to do.)

6.24. Executing MEMORY pass.

6.24.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

6.24.2. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

6.24.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_gen..

6.24.4. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

6.24.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_gen..

6.24.6. Executing MEMORY_COLLECT pass (generating $mem cells).

6.25. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_gen..

6.26. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).

6.27. Executing TECHMAP pass (map to technology primitives).

6.27.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ecp5/brams_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ecp5/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__ECP5_DP16KD'.
Generating RTLIL representation for module `\$__ECP5_PDPW16KD'.
Successfully finished Verilog frontend.

6.27.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

6.28. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).

6.29. Executing TECHMAP pass (map to technology primitives).

6.29.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ecp5/lutrams_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ecp5/lutrams_map.v' to AST representation.
Generating RTLIL representation for module `\$__TRELLIS_DPR16X4'.
Successfully finished Verilog frontend.

6.29.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

6.30. Executing OPT pass (performing simple optimizations).

6.30.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_gen.
<suppressed ~42 debug messages>

6.30.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pulse_gen'.
Removed a total of 0 cells.

6.30.3. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $auto$opt_dff.cc:764:run$1843 ($dffe) from module pulse_gen (D = $flatten\control.$procmux$1343_Y, Q = \control.transmit, rval = 1'0).
Adding SRST signal on $auto$opt_dff.cc:764:run$1816 ($dffe) from module pulse_gen (D = $flatten\control.$procmux$1298_Y, Q = \control.writestate, rval = 1'0).
Adding SRST signal on $auto$opt_dff.cc:764:run$1813 ($dffe) from module pulse_gen (D = $auto$wreduce.cc:454:run$1876 [0], Q = \control.readstate [0], rval = 1'0).
Adding SRST signal on $auto$opt_dff.cc:764:run$1804 ($dffe) from module pulse_gen (D = $auto$wreduce.cc:454:run$1874 [5:0], Q = \control.readcount, rval = 6'000000).
Adding SRST signal on $auto$opt_dff.cc:764:run$1780 ($dffe) from module pulse_gen (D = $flatten\control.\uart0.$4\rx_samples[3:0], Q = \control.uart0.rx_samples, rval = 4'0000).
Adding SRST signal on $auto$opt_dff.cc:764:run$1765 ($dffe) from module pulse_gen (D = $flatten\control.\uart0.$4\rx_sample_countdown[3:0], Q = \control.uart0.rx_sample_countdown, rval = 4'0101).
Adding SRST signal on $auto$opt_dff.cc:764:run$1739 ($dffe) from module pulse_gen (D = $flatten\control.\uart0.$4\rx_bits_remaining[3:0], Q = \control.uart0.rx_bits_remaining, rval = 4'1000).
Adding SRST signal on $auto$opt_dff.cc:764:run$1721 ($dffe) from module pulse_gen (D = $flatten\control.\uart0.$3\tx_out[0:0], Q = \control.uart0.tx_out, rval = 1'0).
Adding SRST signal on $auto$opt_dff.cc:764:run$1705 ($dffe) from module pulse_gen (D = $flatten\control.\uart0.$3\tx_bits_remaining[3:0], Q = \control.uart0.tx_bits_remaining, rval = 4'1000).
Adding SRST signal on $auto$opt_dff.cc:764:run$1694 ($dffe) from module pulse_gen (D = \control.tx_byte [7], Q = \control.uart0.tx_data [7], rval = 1'0).

6.30.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_gen..
Removed 9 unused cells and 15 unused wires.
<suppressed ~10 debug messages>

6.30.5. Rerunning OPT passes. (Removed registers in this run.)

6.30.6. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_gen.

6.30.7. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pulse_gen'.
Removed a total of 0 cells.

6.30.8. Executing OPT_DFF pass (perform DFF optimizations).

6.30.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_gen..

6.30.10. Finished fast OPT passes.

6.31. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

6.32. Executing OPT pass (performing simple optimizations).

6.32.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_gen.

6.32.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pulse_gen'.
Removed a total of 0 cells.

6.32.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \pulse_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~22 debug messages>

6.32.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \pulse_gen.
    Consolidated identical input bits for $mux cell $flatten\control.$procmux$1244:
      Old ports: A=3'010, B=3'000, Y=$flatten\control.$procmux$1244_Y
      New ports: A=1'1, B=1'0, Y=$flatten\control.$procmux$1244_Y [1]
      New connections: { $flatten\control.$procmux$1244_Y [2] $flatten\control.$procmux$1244_Y [0] } = 2'00
    Consolidated identical input bits for $mux cell $flatten\control.$procmux$1284:
      Old ports: A={ 1'0 $auto$wreduce.cc:454:run$1876 [0] }, B=2'00, Y=$flatten\control.$procmux$1284_Y
      New ports: A=$auto$wreduce.cc:454:run$1876 [0], B=1'0, Y=$flatten\control.$procmux$1284_Y [0]
      New connections: $flatten\control.$procmux$1284_Y [1] = 1'0
    Consolidated identical input bits for $mux cell $flatten\control.\uart0.$procmux$423:
      Old ports: A=10'1000100000, B=10'0011100010, Y=$auto$wreduce.cc:454:run$1879 [9:0]
      New ports: A=2'10, B=2'01, Y={ $auto$wreduce.cc:454:run$1879 [9] $auto$wreduce.cc:454:run$1879 [1] }
      New connections: { $auto$wreduce.cc:454:run$1879 [8:2] $auto$wreduce.cc:454:run$1879 [0] } = { 1'0 $auto$wreduce.cc:454:run$1879 [1] $auto$wreduce.cc:454:run$1879 [1] 5'10000 }
    Consolidated identical input bits for $mux cell $flatten\control.\uart0.$procmux$573:
      Old ports: A=3'100, B=3'010, Y=$flatten\control.\uart0.$7\recv_state[2:0]
      New ports: A=2'10, B=2'01, Y=$flatten\control.\uart0.$7\recv_state[2:0] [2:1]
      New connections: $flatten\control.\uart0.$7\recv_state[2:0] [0] = 1'0
    Consolidated identical input bits for $mux cell $flatten\control.\uart0.$procmux$585:
      Old ports: A=10'1001110001, B=10'0111010100, Y=$auto$wreduce.cc:454:run$1881 [9:0]
      New ports: A=2'01, B=2'10, Y={ $auto$wreduce.cc:454:run$1881 [2] $auto$wreduce.cc:454:run$1881 [0] }
      New connections: { $auto$wreduce.cc:454:run$1881 [9:3] $auto$wreduce.cc:454:run$1881 [1] } = { $auto$wreduce.cc:454:run$1881 [0] $auto$wreduce.cc:454:run$1881 [2] $auto$wreduce.cc:454:run$1881 [2] 1'1 $auto$wreduce.cc:454:run$1881 [0] 3'100 }
    Consolidated identical input bits for $mux cell $flatten\control.\uart0.$procmux$597:
      Old ports: A={ 1'0 \control.uart0.rx_data [7:1] }, B={ 1'1 \control.uart0.rx_data [7:1] }, Y=$flatten\control.\uart0.$0\rx_data[7:0]
      New ports: A=1'0, B=1'1, Y=$flatten\control.\uart0.$0\rx_data[7:0] [7]
      New connections: $flatten\control.\uart0.$0\rx_data[7:0] [6:0] = \control.uart0.rx_data [7:1]
    Consolidated identical input bits for $mux cell $flatten\control.\uart0.$procmux$746:
      Old ports: A=3'010, B=3'110, Y=$flatten\control.\uart0.$4\recv_state[2:0]
      New ports: A=1'0, B=1'1, Y=$flatten\control.\uart0.$4\recv_state[2:0] [2]
      New connections: $flatten\control.\uart0.$4\recv_state[2:0] [1:0] = 2'10
    Consolidated identical input bits for $mux cell $flatten\control.\uart0.$ternary$uart.v:247$152:
      Old ports: A=3'000, B=3'101, Y=$flatten\control.\uart0.$ternary$uart.v:247$152_Y
      New ports: A=1'0, B=1'1, Y=$flatten\control.\uart0.$ternary$uart.v:247$152_Y [0]
      New connections: $flatten\control.\uart0.$ternary$uart.v:247$152_Y [2:1] = { $flatten\control.\uart0.$ternary$uart.v:247$152_Y [0] 1'0 }
    Consolidated identical input bits for $mux cell $flatten\control.\uart0.$ternary$uart.v:306$158:
      Old ports: A=2'00, B=2'11, Y=$flatten\control.\uart0.$ternary$uart.v:306$158_Y
      New ports: A=1'0, B=1'1, Y=$flatten\control.\uart0.$ternary$uart.v:306$158_Y [0]
      New connections: $flatten\control.\uart0.$ternary$uart.v:306$158_Y [1] = $flatten\control.\uart0.$ternary$uart.v:306$158_Y [0]
  Optimizing cells in module \pulse_gen.
    Consolidated identical input bits for $pmux cell $flatten\control.$procmux$1249:
      Old ports: A=3'000, B={ 6'001010 $flatten\control.$procmux$1244_Y }, Y=$flatten\control.$0\state[2:0]
      New ports: A=2'00, B={ 4'0110 $flatten\control.$procmux$1244_Y [1] 1'0 }, Y=$flatten\control.$0\state[2:0] [1:0]
      New connections: $flatten\control.$0\state[2:0] [2] = 1'0
  Optimizing cells in module \pulse_gen.
Performed a total of 10 changes.

6.32.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pulse_gen'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

6.32.6. Executing OPT_DFF pass (perform DFF optimizations).

6.32.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_gen..
Removed 1 unused cells and 3 unused wires.
<suppressed ~2 debug messages>

6.32.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_gen.

6.32.9. Rerunning OPT passes. (Maybe there is more to do..)

6.32.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \pulse_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~22 debug messages>

6.32.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \pulse_gen.
Performed a total of 0 changes.

6.32.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pulse_gen'.
Removed a total of 0 cells.

6.32.13. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $auto$opt_dff.cc:764:run$1813 ($dffe) from module pulse_gen.
Setting constant 0-bit at position 2 on $auto$opt_dff.cc:764:run$1795 ($dffe) from module pulse_gen.

6.32.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_gen..

6.32.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_gen.
<suppressed ~5 debug messages>

6.32.16. Rerunning OPT passes. (Maybe there is more to do..)

6.32.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \pulse_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~22 debug messages>

6.32.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \pulse_gen.
Performed a total of 0 changes.

6.32.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pulse_gen'.
Removed a total of 0 cells.

6.32.20. Executing OPT_DFF pass (perform DFF optimizations).

6.32.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_gen..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

6.32.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_gen.

6.32.23. Rerunning OPT passes. (Maybe there is more to do..)

6.32.24. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \pulse_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~22 debug messages>

6.32.25. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \pulse_gen.
Performed a total of 0 changes.

6.32.26. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pulse_gen'.
Removed a total of 0 cells.

6.32.27. Executing OPT_DFF pass (perform DFF optimizations).

6.32.28. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_gen..

6.32.29. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_gen.

6.32.30. Finished OPT passes. (There is nothing left to do.)

6.33. Executing TECHMAP pass (map to technology primitives).

6.33.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

6.33.2. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ecp5/arith_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ecp5/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_ecp5_alu'.
Successfully finished Verilog frontend.

6.33.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $dffe.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $sdff.
Using extmapper simplemap for cells of type $sdffce.
Using extmapper simplemap for cells of type $lut.
Using template $paramod\_80_ecp5_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=32\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
Using template $paramod\_80_ecp5_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=11\B_WIDTH=1\Y_WIDTH=11 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=4\B_WIDTH=1\Y_WIDTH=4 for cells of type $alu.
Using extmapper simplemap for cells of type $logic_not.
Using template $paramod\_80_ecp5_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=15\B_WIDTH=1\Y_WIDTH=15 for cells of type $alu.
Using extmapper simplemap for cells of type $mux.
Using template $paramod\_80_ecp5_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=15\B_WIDTH=16\Y_WIDTH=17 for cells of type $alu.
Using template $paramod\_80_ecp5_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=32\B_WIDTH=3\Y_WIDTH=32 for cells of type $alu.
Using extmapper simplemap for cells of type $eq.
Using template $paramod\_90_pmux\WIDTH=2\S_WIDTH=3 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=11\S_WIDTH=2 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=3\S_WIDTH=7 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=15\S_WIDTH=5 for cells of type $pmux.
Using extmapper simplemap for cells of type $dff.
Using template $paramod\_90_pmux\WIDTH=1\S_WIDTH=2 for cells of type $pmux.
Using extmapper maccmap for cells of type $macc.
  add \pulses.cpulse (32 bits, unsigned)
  add \pulses.delay (16 bits, unsigned)
  add \pulses.delay (16 bits, unsigned)
  add 15 (32 bits, unsigned)
Using template $paramod\_80_ecp5_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=8\B_WIDTH=1\Y_WIDTH=9 for cells of type $alu.
Using extmapper simplemap for cells of type $and.
Using template $paramod$constmap:f1a86313b2935847134cde0e02ff53e41f28add9$paramod$8669418c886d3bd260d664481583c1c71dfc3c9b\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using template $paramod$constmap:65a646296d3e5153eab58e58e05dcc6ed23f3479$paramod$6117e4f67b56bde6aa6a4e39e73a4e382ea036be\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using template $paramod\_80_ecp5_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=16\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
  add \control.vinput [31:24] (8 bits, unsigned)
  add \control.vinput [7:0] (8 bits, unsigned)
  add \control.vinput [15:8] (8 bits, unsigned)
  add \control.vinput [23:16] (8 bits, unsigned)
Using extmapper simplemap for cells of type $logic_or.
Using template $paramod\_80_ecp5_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=8\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
Using template $paramod\_80_ecp5_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
  add \pulses.p2start (16 bits, unsigned)
  add \pulses.p2width (16 bits, unsigned)
  add 16'0000000000001010 (16 bits, unsigned)
Using template $paramod\_80_ecp5_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=24\B_WIDTH=16\Y_WIDTH=24 for cells of type $alu.
Using template $paramod\_80_ecp5_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=8\B_WIDTH=8\Y_WIDTH=8 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=4\Y_WIDTH=4 for cells of type $alu.
  add \pulses.cpulse (32 bits, unsigned)
  add { \pulses.delay 1'0 } (17 bits, unsigned)
  add 32'11111111111111111111111111111011 (32 bits, unsigned)
Using template $paramod\_80_ecp5_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=24\B_WIDTH=3\Y_WIDTH=25 for cells of type $alu.
Using template $paramod\_80_ecp5_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=16\B_WIDTH=16\Y_WIDTH=16 for cells of type $alu.
Using template $paramod\_80_ecp5_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=24\B_WIDTH=8\Y_WIDTH=24 for cells of type $alu.
Using template $paramod\_80_ecp5_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=8\B_WIDTH=16\Y_WIDTH=16 for cells of type $alu.
Using template $paramod\_80_ecp5_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=24\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
Using template $paramod\_80_ecp5_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=8\Y_WIDTH=8 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=3\Y_WIDTH=3 for cells of type $alu.
Using template $paramod\_80_ecp5_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=8\B_WIDTH=16\Y_WIDTH=17 for cells of type $alu.
Using template $paramod\_80_ecp5_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=16\B_WIDTH=16\Y_WIDTH=17 for cells of type $alu.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $logic_and.
Using template $paramod\_90_lcu\WIDTH=4 for cells of type $lcu.
Using template $paramod\_90_fa\WIDTH=32 for cells of type $fa.
Using template $paramod\_90_fa\WIDTH=8 for cells of type $fa.
Using template $paramod\_90_fa\WIDTH=16 for cells of type $fa.
Using template $paramod\_90_lcu\WIDTH=3 for cells of type $lcu.
No more expansions possible.
<suppressed ~3760 debug messages>

6.34. Executing OPT pass (performing simple optimizations).

6.34.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_gen.
<suppressed ~2781 debug messages>

6.34.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pulse_gen'.
<suppressed ~1962 debug messages>
Removed a total of 654 cells.

6.34.3. Executing OPT_DFF pass (perform DFF optimizations).
Handling D = Q on $auto$simplemap.cc:559:simplemap_adffe_sdffe_sdffce$3152 ($_SDFFCE_PP0P_) from module pulse_gen (conecting SRST instead).
Setting constant 0-bit at position 0 on $auto$simplemap.cc:559:simplemap_adffe_sdffe_sdffce$3152 ($_SDFFCE_PP0P_) from module pulse_gen.
Handling D = Q on $auto$simplemap.cc:559:simplemap_adffe_sdffe_sdffce$3153 ($_SDFFCE_PP0P_) from module pulse_gen (conecting SRST instead).
Setting constant 0-bit at position 0 on $auto$simplemap.cc:559:simplemap_adffe_sdffe_sdffce$3153 ($_SDFFCE_PP0P_) from module pulse_gen.
Handling D = Q on $auto$simplemap.cc:559:simplemap_adffe_sdffe_sdffce$3154 ($_SDFFCE_PP0P_) from module pulse_gen (conecting SRST instead).
Setting constant 0-bit at position 0 on $auto$simplemap.cc:559:simplemap_adffe_sdffe_sdffce$3154 ($_SDFFCE_PP0P_) from module pulse_gen.

6.34.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_gen..
Removed 1312 unused cells and 2900 unused wires.
<suppressed ~1313 debug messages>

6.34.5. Rerunning OPT passes. (Removed registers in this run.)

6.34.6. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_gen.
<suppressed ~82 debug messages>

6.34.7. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pulse_gen'.
<suppressed ~273 debug messages>
Removed a total of 91 cells.

6.34.8. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $auto$simplemap.cc:442:simplemap_dffe$5145 ($_DFFE_PP_) from module pulse_gen (D = $flatten\control.$procmux$1249.Y_B [1], Q = \control.state [1], rval = 1'0).
Adding SRST signal on $auto$simplemap.cc:442:simplemap_dffe$5144 ($_DFFE_PP_) from module pulse_gen (D = $flatten\control.$procmux$1249.B_AND_S [4], Q = \control.state [0], rval = 1'0).
Adding SRST signal on $auto$simplemap.cc:442:simplemap_dffe$2700 ($_DFFE_PP_) from module pulse_gen (D = $flatten\control.\uart0.$procmux$859.Y_B [2], Q = \control.uart0.recv_state [2], rval = 1'0).
Adding SRST signal on $auto$simplemap.cc:442:simplemap_dffe$2699 ($_DFFE_PP_) from module pulse_gen (D = $flatten\control.\uart0.$procmux$859.Y_B [1], Q = \control.uart0.recv_state [1], rval = 1'0).
Adding SRST signal on $auto$simplemap.cc:442:simplemap_dffe$2698 ($_DFFE_PP_) from module pulse_gen (D = $flatten\control.\uart0.$procmux$859.Y_B [0], Q = \control.uart0.recv_state [0], rval = 1'1).
Adding SRST signal on $auto$simplemap.cc:442:simplemap_dffe$2645 ($_DFFE_PP_) from module pulse_gen (D = \control.uart0.rx_samples [2], Q = \control.uart0.rx_data [7], rval = 1'1).
Adding SRST signal on $auto$simplemap.cc:442:simplemap_dffe$2619 ($_DFFE_PP_) from module pulse_gen (D = $flatten\control.\uart0.$procmux$544.Y_B [1], Q = \control.uart0.tx_state [1], rval = 1'0).
Adding SRST signal on $auto$simplemap.cc:442:simplemap_dffe$2618 ($_DFFE_PP_) from module pulse_gen (D = $flatten\control.\uart0.$procmux$544.Y_B [0], Q = \control.uart0.tx_state [0], rval = 1'1).

6.34.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_gen..
Removed 8 unused cells and 14 unused wires.
<suppressed ~9 debug messages>

6.34.10. Rerunning OPT passes. (Removed registers in this run.)

6.34.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_gen.

6.34.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pulse_gen'.
Removed a total of 0 cells.

6.34.13. Executing OPT_DFF pass (perform DFF optimizations).

6.34.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_gen..

6.34.15. Finished fast OPT passes.

6.35. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_gen..

6.36. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

6.37. Executing TECHMAP pass (map to technology primitives).

6.37.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ecp5/cells_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ecp5/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_DFFE_NP0N_'.
Generating RTLIL representation for module `\$_DFFE_NP1N_'.
Generating RTLIL representation for module `\$_DFFE_PP0N_'.
Generating RTLIL representation for module `\$_DFFE_PP1N_'.
Generating RTLIL representation for module `\$_SDFFE_NP0P_'.
Generating RTLIL representation for module `\$_SDFFE_NP1P_'.
Generating RTLIL representation for module `\$_SDFFE_PP0P_'.
Generating RTLIL representation for module `\$_SDFFE_PP1P_'.
Generating RTLIL representation for module `\$_SDFFE_NP0N_'.
Generating RTLIL representation for module `\$_SDFFE_NP1N_'.
Generating RTLIL representation for module `\$_SDFFE_PP0N_'.
Generating RTLIL representation for module `\$_SDFFE_PP1N_'.
Generating RTLIL representation for module `\FD1P3AX'.
Generating RTLIL representation for module `\FD1P3AY'.
Generating RTLIL representation for module `\FD1P3BX'.
Generating RTLIL representation for module `\FD1P3DX'.
Generating RTLIL representation for module `\FD1P3IX'.
Generating RTLIL representation for module `\FD1P3JX'.
Generating RTLIL representation for module `\FD1S3AX'.
Generating RTLIL representation for module `\FD1S3AY'.
Generating RTLIL representation for module `\FD1S3BX'.
Generating RTLIL representation for module `\FD1S3DX'.
Generating RTLIL representation for module `\FD1S3IX'.
Generating RTLIL representation for module `\FD1S3JX'.
Generating RTLIL representation for module `\IFS1P3BX'.
Generating RTLIL representation for module `\IFS1P3DX'.
Generating RTLIL representation for module `\IFS1P3IX'.
Generating RTLIL representation for module `\IFS1P3JX'.
Generating RTLIL representation for module `\OFS1P3BX'.
Generating RTLIL representation for module `\OFS1P3DX'.
Generating RTLIL representation for module `\OFS1P3IX'.
Generating RTLIL representation for module `\OFS1P3JX'.
Generating RTLIL representation for module `\IB'.
Generating RTLIL representation for module `\IBPU'.
Generating RTLIL representation for module `\IBPD'.
Generating RTLIL representation for module `\OB'.
Generating RTLIL representation for module `\OBZ'.
Generating RTLIL representation for module `\OBZPU'.
Generating RTLIL representation for module `\OBZPD'.
Generating RTLIL representation for module `\OBCO'.
Generating RTLIL representation for module `\BB'.
Generating RTLIL representation for module `\BBPU'.
Generating RTLIL representation for module `\BBPD'.
Generating RTLIL representation for module `\ILVDS'.
Generating RTLIL representation for module `\OLVDS'.
Successfully finished Verilog frontend.

6.37.2. Continuing TECHMAP pass.
Using template \$_SDFFE_PP0P_ for cells of type $_SDFFE_PP0P_.
Using template \$_SDFFE_PP1P_ for cells of type $_SDFFE_PP1P_.
Using template $paramod\$_DFFE_PP_\_TECHMAP_WIREINIT_Q_=1'x for cells of type $_DFFE_PP_.
Using template $paramod\$_DFFE_PP_\_TECHMAP_WIREINIT_Q_=1'0 for cells of type $_DFFE_PP_.
Using template $paramod\$_DFFE_PN_\_TECHMAP_WIREINIT_Q_=1'x for cells of type $_DFFE_PN_.
Using template $paramod\$_DFF_P_\_TECHMAP_WIREINIT_Q_=1'x for cells of type $_DFF_P_.
Using template $paramod\$_DFFE_PP_\_TECHMAP_WIREINIT_Q_=1'1 for cells of type $_DFFE_PP_.
Using template \$_SDFF_PP0_ for cells of type $_SDFF_PP0_.
Using template $paramod\$_DFF_P_\_TECHMAP_WIREINIT_Q_=1'0 for cells of type $_DFF_P_.
Using template \$_SDFFE_PP0N_ for cells of type $_SDFFE_PP0N_.
No more expansions possible.
<suppressed ~772 debug messages>

6.38. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_gen.

6.39. Executing SIMPLEMAP pass (map simple cells to gate primitives).

6.40. Executing ECP5_GSR pass (implement FF init values).
Handling GSR in pulse_gen.

6.41. Executing ATTRMVCP pass (move or copy attributes).

6.42. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_gen..
Removed 0 unused cells and 3093 unused wires.
<suppressed ~1 debug messages>

6.43. Executing TECHMAP pass (map to technology primitives).

6.43.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ecp5/latches_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ecp5/latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Successfully finished Verilog frontend.

6.43.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

6.44. Executing ABC pass (technology mapping using ABC).

6.44.1. Extracting gate netlist of module `\pulse_gen' to `<abc-temp-dir>/input.blif'..
Extracted 2095 gates and 2791 wires to a netlist network with 694 inputs and 420 outputs.

6.44.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + dress 
ABC: Total number of equiv classes                =     393.
ABC: Participating nodes from both networks       =     882.
ABC: Participating nodes from the first network   =     416. (  56.52 % of nodes)
ABC: Participating nodes from the second network  =     466. (  63.32 % of nodes)
ABC: Node pairs (any polarity)                    =     416. (  56.52 % of names can be moved)
ABC: Node pairs (same polarity)                   =     393. (  53.40 % of names can be moved)
ABC: Total runtime =     0.06 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

6.44.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:      735
ABC RESULTS:        internal signals:     1677
ABC RESULTS:           input signals:      694
ABC RESULTS:          output signals:      420
Removing temp directory.
Removed 0 unused cells and 1503 unused wires.

6.45. Executing TECHMAP pass (map to technology primitives).

6.45.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ecp5/cells_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ecp5/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_DFFE_NP0N_'.
Generating RTLIL representation for module `\$_DFFE_NP1N_'.
Generating RTLIL representation for module `\$_DFFE_PP0N_'.
Generating RTLIL representation for module `\$_DFFE_PP1N_'.
Generating RTLIL representation for module `\$_SDFFE_NP0P_'.
Generating RTLIL representation for module `\$_SDFFE_NP1P_'.
Generating RTLIL representation for module `\$_SDFFE_PP0P_'.
Generating RTLIL representation for module `\$_SDFFE_PP1P_'.
Generating RTLIL representation for module `\$_SDFFE_NP0N_'.
Generating RTLIL representation for module `\$_SDFFE_NP1N_'.
Generating RTLIL representation for module `\$_SDFFE_PP0N_'.
Generating RTLIL representation for module `\$_SDFFE_PP1N_'.
Generating RTLIL representation for module `\FD1P3AX'.
Generating RTLIL representation for module `\FD1P3AY'.
Generating RTLIL representation for module `\FD1P3BX'.
Generating RTLIL representation for module `\FD1P3DX'.
Generating RTLIL representation for module `\FD1P3IX'.
Generating RTLIL representation for module `\FD1P3JX'.
Generating RTLIL representation for module `\FD1S3AX'.
Generating RTLIL representation for module `\FD1S3AY'.
Generating RTLIL representation for module `\FD1S3BX'.
Generating RTLIL representation for module `\FD1S3DX'.
Generating RTLIL representation for module `\FD1S3IX'.
Generating RTLIL representation for module `\FD1S3JX'.
Generating RTLIL representation for module `\IFS1P3BX'.
Generating RTLIL representation for module `\IFS1P3DX'.
Generating RTLIL representation for module `\IFS1P3IX'.
Generating RTLIL representation for module `\IFS1P3JX'.
Generating RTLIL representation for module `\OFS1P3BX'.
Generating RTLIL representation for module `\OFS1P3DX'.
Generating RTLIL representation for module `\OFS1P3IX'.
Generating RTLIL representation for module `\OFS1P3JX'.
Generating RTLIL representation for module `\IB'.
Generating RTLIL representation for module `\IBPU'.
Generating RTLIL representation for module `\IBPD'.
Generating RTLIL representation for module `\OB'.
Generating RTLIL representation for module `\OBZ'.
Generating RTLIL representation for module `\OBZPU'.
Generating RTLIL representation for module `\OBZPD'.
Generating RTLIL representation for module `\OBCO'.
Generating RTLIL representation for module `\BB'.
Generating RTLIL representation for module `\BBPU'.
Generating RTLIL representation for module `\BBPD'.
Generating RTLIL representation for module `\ILVDS'.
Generating RTLIL representation for module `\OLVDS'.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

6.45.2. Continuing TECHMAP pass.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00000001 for cells of type $lut.
Using template $paramod$71aa154df418428cd6a01f4d27a25a77443e3ab0\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000000000000 for cells of type $lut.
Using template $paramod$50551b8d943b0c170a72faa9739a5a88f4abce2d\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=16777216 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11110001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111100000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=32'11111111100010001111111111110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=1 for cells of type $lut.
Using template $paramod$53afc4693cdd4770ebaebeb0ab6c288fde062f75\$lut for cells of type $lut.
Using template $paramod$e10ca4aca4e4c8627be5bb912095a9253494b061\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1001000000001001 for cells of type $lut.
Using template $paramod$3dd1cfeaac2399e8e1df42382a37ba2eafacb216\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011000000001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=1090519040 for cells of type $lut.
Using template $paramod$5547587bde2f1ca8d884d89fe5b90567ab8bb30e\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1001 for cells of type $lut.
Using template $paramod$5fba6fa4affd3d8cb90b92595f737467c857f3c8\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=32'10000000000000000000000000000000 for cells of type $lut.
Using template $paramod$f8bdca125e424c8e9c5f5e84960e0e034e7c473c\$lut for cells of type $lut.
Using template $paramod$e66cc471b5df98af045e5a88d12e8d811847cf43\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100110111111100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111000000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011000010111011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1001000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11010000 for cells of type $lut.
Using template $paramod$746424d0983081829316163db34337ccf8ceb1ee\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00000111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=65279 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=32'11010000000011010000000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10110000 for cells of type $lut.
Using template $paramod$05b7e8229d9a7a31e653ac7a3cef172aa16e73f1\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=65536 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00011100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10101100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=32'10010000000000000000000000000000 for cells of type $lut.
Using template $paramod$57619346c001bba14f685682aaa48a843cd5a7a5\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111111110100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000100000000 for cells of type $lut.
Using template $paramod$2415ae731198fab63542cb33ec0423f052901ef2\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=32'11111111111111111111111111110100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111111110001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10111100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000011110100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11111110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000011101111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=32'10010000000010010000000000000000 for cells of type $lut.
Using template $paramod$2112a70fa1dfed7009af2d1b2a9304edd7f76cef\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100001110101010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10010110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=32'11111110111010101010100010000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0110100110010110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=32'11101000000101110001011111101000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11100001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=1\LUT=2'01 for cells of type $lut.
Using template $paramod$5a86b476d53309d4c0a95e6ef262985af3b9969b\$lut for cells of type $lut.
Using template $paramod$880ddf4469b174b70c2a7aa320dd9ec59396117a\$lut for cells of type $lut.
Using template $paramod$eb5295ed6e340416049df83fc3ef784442ede560\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=2147418112 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000111101110111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11101111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111111110000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1001011000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01101001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=401139735 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1101000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=33023 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=184549376 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=1141833728 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000011111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=65524 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=32'11111111000000001111111111110100 for cells of type $lut.
Using template $paramod$afb76ac68df04bf6a3f84627af0ef852f9eae0e8\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11110100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111100001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=32'11111111000100000001000000010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=30471 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111000011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100111110100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000011100111100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111100011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=184549387 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111100010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=32'10110000000010110000000000000000 for cells of type $lut.
Using template $paramod$ef57d130c6f71db824069c7e8a869a2f72982b4d\$lut for cells of type $lut.
Using template $paramod$36fff58554dc4dc455d35ef9dbbb2e00b8b9103f\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=32'11110000000011111000100011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=285147136 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=32'11000000010101011111111111000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=32'11111111111100001111111101000100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01011100 for cells of type $lut.
No more expansions possible.
<suppressed ~2247 debug messages>

6.46. Executing OPT_LUT_INS pass (discard unused LUT inputs).
Optimizing LUTs in pulse_gen.
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13167.lut2 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13167.lut3 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13168.lut2 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$12985.lut1 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$12985.lut2 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13383.lut2 (4 -> 1)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13392.lut1 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13397.lut1 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13346.lut2 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13150.lut1 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13150.lut2 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13158.lut2 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13165.lut2 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13025.lut2 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13025.lut3 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13025.lut4 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13025.lut6 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13025.lut7 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13105.lut2 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13105.lut3 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13105.lut4 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13105.lut5 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13105.lut6 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13124.lut1 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13124.lut2 (4 -> 3)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13124.lut4 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13124.lut5 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13124.lut6 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13124.lut7 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13420.lut2 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13422.lut2 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13427.lut2 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$12979.lut2 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$12979.lut3 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$12979.lut4 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$12979.lut5 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$12979.lut7 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13145.lut2 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13230.lut2 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13230.lut4 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13230.lut5 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13230.lut6 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13230.lut7 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13038.lut2 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13043.lut1 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13043.lut2 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13035.lut2 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13051.lut2 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13075.lut2 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13076.lut1 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13076.lut2 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13126.lut2 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13126.lut3 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13126.lut4 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13126.lut5 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13126.lut6 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13126.lut7 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13127.lut2 (4 -> 3)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13098.lut1 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13098.lut2 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13100.lut2 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13101.lut1 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13101.lut2 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13111.lut2 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13113.lut1 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13113.lut2 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13114.lut1 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13114.lut2 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13115.lut1 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13115.lut2 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13102.lut2 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13077.lut2 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13067.lut1 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13067.lut2 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13057.lut2 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13042.lut2 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13027.lut2 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13027.lut3 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13027.lut4 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13027.lut5 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13027.lut6 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13033.lut2 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13033.lut3 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13022.lut1 (4 -> 3)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$12972.lut2 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$12972.lut3 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$12972.lut5 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$12972.lut6 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$12972.lut7 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$12972.lut0 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$12978.lut0 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$12979.lut0 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$12980.lut0 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$12981.lut0 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$12972.lut1 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$12985.lut0 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$12987.lut0 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13011.lut0 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13020.lut1 (4 -> 2)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13020.lut0 (4 -> 3)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13021.lut0 (4 -> 3)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13022.lut0 (4 -> 2)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13025.lut0 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13038.lut1 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13027.lut0 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13033.lut1 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13034.lut1 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13032.lut1 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13035.lut0 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13027.lut1 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13038.lut0 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13035.lut1 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13046.lut0 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13042.lut1 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13051.lut1 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13052.lut0 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13060.lut0 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13057.lut1 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13067.lut0 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13074.lut0 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13075.lut1 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13080.lut0 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13077.lut1 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13126.lut1 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13105.lut1 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13087.lut0 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13093.lut0 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13099.lut0 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13100.lut1 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13105.lut0 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13106.lut0 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13102.lut1 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13111.lut1 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13112.lut0 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13118.lut0 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13124.lut0 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13127.lut0 (4 -> 3)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13130.lut0 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13134.lut0 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13168.lut1 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13142.lut1 (4 -> 2)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13127.lut1 (4 -> 3)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13142.lut0 (4 -> 3)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13145.lut0 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13149.lut0 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13150.lut0 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13158.lut1 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13165.lut1 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13167.lut0 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13168.lut0 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13170.lut0 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13173.lut0 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13186.lut0 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13188.lut0 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13438.lut1 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13195.lut1 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13206.lut0 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13209.lut0 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13230.lut0 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13230.lut1 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13238.lut0 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13254.lut1 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13346.lut0 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13350.lut0 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13354.lut0 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13145.lut1 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13373.lut0 (4 -> 3)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$12979.lut1 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13387.lut1 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13375.lut1 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13383.lut0 (4 -> 1)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13383.lut1 (4 -> 1)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13388.lut1 (4 -> 1)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13405.lut0 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13417.lut0 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13346.lut1 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13420.lut0 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13422.lut1 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13427.lut1 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13434.lut0 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13420.lut1 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13436.lut0 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13445.lut0 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13450.lut0 (4 -> 0)
  Optimizing lut $abc$12970$auto$blifparse.cc:498:parse_blif$13025.lut1 (4 -> 0)
Removed 0 unused cells and 1651 unused wires.

6.47. Executing AUTONAME pass.
Renamed 71218 objects in module pulse_gen (138 iterations).
<suppressed ~3086 debug messages>

6.48. Executing HIERARCHY pass (managing design hierarchy).

6.48.1. Analyzing design hierarchy..
Top module:  \pulse_gen

6.48.2. Analyzing design hierarchy..
Top module:  \pulse_gen
Removed 0 unused modules.

6.49. Printing statistics.

=== pulse_gen ===

   Number of wires:               1043
   Number of wire bits:           4773
   Number of public wires:        1043
   Number of public wire bits:    4773
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2172
     CCU2C                         363
     EHXPLLL                         1
     L6MUX21                        59
     LUT4                          946
     PFUMX                         162
     TRELLIS_FF                    641

6.50. Executing CHECK pass (checking for obvious problems).
checking module pulse_gen..
found and reported 0 problems.

6.51. Executing JSON backend.

End of script. Logfile hash: 1cd0a5b294, CPU: user 2.84s system 0.10s, MEM: 268.32 MB peak
Yosys 0.9+3683 (git sha1 b7d46be4, clang 10.0.0-4ubuntu1 -fPIC -Os)
Time spent: 16% 1x autoname (0 sec), 13% 8x techmap (0 sec), ...
