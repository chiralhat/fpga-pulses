
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Wolf <claire@symbioticeda.com>          |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9+3683 (git sha1 b7d46be4, clang 10.0.0-4ubuntu1 -fPIC -Os)


-- Parsing `pulse_gen.v' using frontend `verilog' --

1. Executing Verilog-2005 frontend: pulse_gen.v
Parsing Verilog input from `pulse_gen.v' to AST representation.
Generating RTLIL representation for module `\pulse_gen'.
Successfully finished Verilog frontend.

-- Parsing `pulses.v' using frontend `verilog' --

2. Executing Verilog-2005 frontend: pulses.v
Parsing Verilog input from `pulses.v' to AST representation.
Generating RTLIL representation for module `\pulses'.
Successfully finished Verilog frontend.

-- Parsing `pulse_control.v' using frontend `verilog' --

3. Executing Verilog-2005 frontend: pulse_control.v
Parsing Verilog input from `pulse_control.v' to AST representation.
Generating RTLIL representation for module `\pulse_control'.
Successfully finished Verilog frontend.

-- Parsing `uart.v' using frontend `verilog' --

4. Executing Verilog-2005 frontend: uart.v
Parsing Verilog input from `uart.v' to AST representation.
Generating RTLIL representation for module `\uart'.
Successfully finished Verilog frontend.

-- Parsing `ecppll.v' using frontend `verilog' --

5. Executing Verilog-2005 frontend: ecppll.v
Parsing Verilog input from `ecppll.v' to AST representation.
Generating RTLIL representation for module `\pll'.
Successfully finished Verilog frontend.

-- Running command `synth_ecp5 -json pulse_gen.json -top pulse_gen' --

6. Executing SYNTH_ECP5 pass.

6.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ecp5/cells_sim.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ecp5/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\LUT4'.
Generating RTLIL representation for module `\$__ABC9_LUT5'.
Generating RTLIL representation for module `\$__ABC9_LUT6'.
Generating RTLIL representation for module `\$__ABC9_LUT7'.
Generating RTLIL representation for module `\L6MUX21'.
Generating RTLIL representation for module `\CCU2C'.
Generating RTLIL representation for module `\TRELLIS_RAM16X2'.
Generating RTLIL representation for module `\PFUMX'.
Generating RTLIL representation for module `\TRELLIS_DPR16X4'.
Generating RTLIL representation for module `\DPR16X4C'.
Generating RTLIL representation for module `\LUT2'.
Generating RTLIL representation for module `\TRELLIS_FF'.
Generating RTLIL representation for module `\TRELLIS_IO'.
Generating RTLIL representation for module `\INV'.
Generating RTLIL representation for module `\TRELLIS_SLICE'.
Generating RTLIL representation for module `\DP16KD'.
Generating RTLIL representation for module `\FD1P3AX'.
Generating RTLIL representation for module `\FD1P3AY'.
Generating RTLIL representation for module `\FD1P3BX'.
Generating RTLIL representation for module `\FD1P3DX'.
Generating RTLIL representation for module `\FD1P3IX'.
Generating RTLIL representation for module `\FD1P3JX'.
Generating RTLIL representation for module `\FD1S3AX'.
Generating RTLIL representation for module `\FD1S3AY'.
Generating RTLIL representation for module `\FD1S3BX'.
Generating RTLIL representation for module `\FD1S3DX'.
Generating RTLIL representation for module `\FD1S3IX'.
Generating RTLIL representation for module `\FD1S3JX'.
Generating RTLIL representation for module `\IFS1P3BX'.
Generating RTLIL representation for module `\IFS1P3DX'.
Generating RTLIL representation for module `\IFS1P3IX'.
Generating RTLIL representation for module `\IFS1P3JX'.
Generating RTLIL representation for module `\OFS1P3BX'.
Generating RTLIL representation for module `\OFS1P3DX'.
Generating RTLIL representation for module `\OFS1P3IX'.
Generating RTLIL representation for module `\OFS1P3JX'.
Generating RTLIL representation for module `\IB'.
Generating RTLIL representation for module `\IBPU'.
Generating RTLIL representation for module `\IBPD'.
Generating RTLIL representation for module `\OB'.
Generating RTLIL representation for module `\OBZ'.
Generating RTLIL representation for module `\OBZPU'.
Generating RTLIL representation for module `\OBZPD'.
Generating RTLIL representation for module `\OBCO'.
Generating RTLIL representation for module `\BB'.
Generating RTLIL representation for module `\BBPU'.
Generating RTLIL representation for module `\BBPD'.
Generating RTLIL representation for module `\ILVDS'.
Generating RTLIL representation for module `\OLVDS'.
Successfully finished Verilog frontend.

6.2. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ecp5/cells_bb.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ecp5/cells_bb.v' to AST representation.
Generating RTLIL representation for module `\MULT18X18D'.
Generating RTLIL representation for module `\ALU54B'.
Generating RTLIL representation for module `\EHXPLLL'.
Generating RTLIL representation for module `\DTR'.
Generating RTLIL representation for module `\OSCG'.
Generating RTLIL representation for module `\USRMCLK'.
Generating RTLIL representation for module `\JTAGG'.
Generating RTLIL representation for module `\DELAYF'.
Generating RTLIL representation for module `\DELAYG'.
Generating RTLIL representation for module `\IDDRX1F'.
Generating RTLIL representation for module `\IDDRX2F'.
Generating RTLIL representation for module `\IDDR71B'.
Generating RTLIL representation for module `\IDDRX2DQA'.
Generating RTLIL representation for module `\ODDRX1F'.
Generating RTLIL representation for module `\ODDRX2F'.
Generating RTLIL representation for module `\ODDR71B'.
Generating RTLIL representation for module `\OSHX2A'.
Generating RTLIL representation for module `\ODDRX2DQA'.
Generating RTLIL representation for module `\ODDRX2DQSB'.
Generating RTLIL representation for module `\TSHX2DQA'.
Generating RTLIL representation for module `\TSHX2DQSA'.
Generating RTLIL representation for module `\DQSBUFM'.
Generating RTLIL representation for module `\DDRDLLA'.
Generating RTLIL representation for module `\CLKDIVF'.
Generating RTLIL representation for module `\ECLKSYNCB'.
Generating RTLIL representation for module `\ECLKBRIDGECS'.
Generating RTLIL representation for module `\DCCA'.
Generating RTLIL representation for module `\DCUA'.
Generating RTLIL representation for module `\EXTREFB'.
Generating RTLIL representation for module `\PCSCLKDIV'.
Generating RTLIL representation for module `\PUR'.
Generating RTLIL representation for module `\GSR'.
Generating RTLIL representation for module `\SGSR'.
Generating RTLIL representation for module `\PDPW16KD'.
Successfully finished Verilog frontend.

6.3. Executing HIERARCHY pass (managing design hierarchy).

6.3.1. Analyzing design hierarchy..
Top module:  \pulse_gen
Used module:     \pulses
Used module:     \pulse_control
Used module:         \uart
Used module:     \pll

6.3.2. Analyzing design hierarchy..
Top module:  \pulse_gen
Used module:     \pulses
Used module:     \pulse_control
Used module:         \uart
Used module:     \pll
Removed 0 unused modules.

6.4. Executing PROC pass (convert processes to netlists).

6.4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:213$311'.
Cleaned up 1 empty switch.

6.4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:350$391 in module TRELLIS_FF.
Removed 2 dead cases from process $proc$uart.v:135$136 in module uart.
Marked 17 switch rules as full_case in process $proc$uart.v:135$136 in module uart.
Removed 1 dead cases from process $proc$pulse_control.v:149$78 in module pulse_control.
Marked 5 switch rules as full_case in process $proc$pulse_control.v:149$78 in module pulse_control.
Marked 2 switch rules as full_case in process $proc$pulses.v:184$12 in module pulses.
Removed a total of 3 dead cases.

6.4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 1 redundant assignment.
Promoted 72 assignments to connections.

6.4.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\TRELLIS_FF.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:0$395'.
  Set init value: \Q = 1'0
Found init rule in `\uart.$proc$uart.v:106$165'.
  Set init value: \tx_state = 2'00
Found init rule in `\uart.$proc$uart.v:105$164'.
  Set init value: \tx_out = 1'1
Found init rule in `\uart.$proc$uart.v:101$163'.
  Set init value: \recv_state = 3'000
Found init rule in `\pulse_control.$proc$pulse_control.v:146$129'.
  Set init value: \state = 3'000
Found init rule in `\pulse_control.$proc$pulse_control.v:130$128'.
  Set init value: \readcount = 6'000000
Found init rule in `\pulse_control.$proc$pulse_control.v:129$127'.
  Set init value: \readstate = 2'00
Found init rule in `\pulse_control.$proc$pulse_control.v:127$125'.
  Set init value: \writestate = 1'0
Found init rule in `\pulse_control.$proc$pulse_control.v:63$124'.
  Set init value: \post_att = 7'1111111
Found init rule in `\pulse_control.$proc$pulse_control.v:62$123'.
  Set init value: \pre_att = 7'0000011
Found init rule in `\pulse_control.$proc$pulse_control.v:57$122'.
  Set init value: \recv_set = 1'0
Found init rule in `\pulse_control.$proc$pulse_control.v:56$121'.
  Set init value: \nut_wid = 8'01100000
Found init rule in `\pulse_control.$proc$pulse_control.v:55$120'.
  Set init value: \nut_del = 16'1110101001100000
Found init rule in `\pulse_control.$proc$pulse_control.v:54$119'.
  Set init value: \rx_done = 1'0
Found init rule in `\pulse_control.$proc$pulse_control.v:53$118'.
  Set init value: \block = 1'1
Found init rule in `\pulse_control.$proc$pulse_control.v:52$117'.
  Set init value: \cpmg = 8'00000001
Found init rule in `\pulse_control.$proc$pulse_control.v:51$116'.
  Set init value: \pulse_block_half = 16'0000000000110010
Found init rule in `\pulse_control.$proc$pulse_control.v:50$115'.
  Set init value: \pulse_block = 8'01100100
Found init rule in `\pulse_control.$proc$pulse_control.v:49$114'.
  Set init value: \p1start2 = 16'0000000000000000
Found init rule in `\pulse_control.$proc$pulse_control.v:48$113'.
  Set init value: \p2width2 = 16'0000000000000000
Found init rule in `\pulse_control.$proc$pulse_control.v:47$112'.
  Set init value: \delay2 = 16'0000000010010110
Found init rule in `\pulse_control.$proc$pulse_control.v:46$111'.
  Set init value: \p1width2 = 16'0000000000001001
Found init rule in `\pulse_control.$proc$pulse_control.v:45$110'.
  Set init value: \p2width = 16'0000000000010010
Found init rule in `\pulse_control.$proc$pulse_control.v:44$109'.
  Set init value: \delay = 16'0000000010010110
Found init rule in `\pulse_control.$proc$pulse_control.v:43$108'.
  Set init value: \p1width = 16'0000000000001001
Found init rule in `\pulse_control.$proc$pulse_control.v:42$107'.
  Set init value: \period = 10000
Found init rule in `\pulses.$proc$pulses.v:112$74'.
  Set init value: \ccount = 8'00000000
Found init rule in `\pulses.$proc$pulses.v:65$73'.
  Set init value: \cw = 1'0
Found init rule in `\pulses.$proc$pulses.v:54$71'.
  Set init value: \counter = 0

6.4.5. Executing PROC_ARST pass (detect async resets in processes).

6.4.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\TRELLIS_FF.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:0$395'.
Creating decoders for process `\TRELLIS_FF.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:350$391'.
     1/1: $0\Q[0:0]
Creating decoders for process `\DPR16X4C.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:0$388'.
Creating decoders for process `\DPR16X4C.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:285$367'.
     1/3: $0$memwr$\ram$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:287$366_EN[3:0]$370
     2/3: $0$memwr$\ram$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:287$366_DATA[3:0]$369
     3/3: $0$memwr$\ram$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:287$366_ADDR[3:0]$368
Creating decoders for process `\TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:0$334'.
Creating decoders for process `\TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:221$312'.
     1/3: $0$memwr$\mem$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:223$310_EN[3:0]$315
     2/3: $0$memwr$\mem$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:223$310_DATA[3:0]$314
     3/3: $0$memwr$\mem$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:223$310_ADDR[3:0]$313
Creating decoders for process `\TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:213$311'.
Creating decoders for process `\uart.$proc$uart.v:106$165'.
Creating decoders for process `\uart.$proc$uart.v:105$164'.
Creating decoders for process `\uart.$proc$uart.v:101$163'.
Creating decoders for process `\uart.$proc$uart.v:135$136'.
     1/57: $5\tx_state[1:0]
     2/57: $5\tx_clk[10:0]
     3/57: $4\tx_data[7:0]
     4/57: $4\tx_out[0:0]
     5/57: $4\tx_bits_remaining[3:0]
     6/57: $3\tx_data[7:0]
     7/57: $3\tx_bits_remaining[3:0]
     8/57: $4\tx_state[1:0]
     9/57: $3\tx_out[0:0]
    10/57: $4\tx_clk[10:0]
    11/57: $3\tx_state[1:0]
    12/57: $2\tx_bits_remaining[3:0]
    13/57: $2\tx_out[0:0]
    14/57: $3\tx_clk[10:0]
    15/57: $2\tx_data[7:0]
    16/57: $1\tx_data[7:0]
    17/57: $1\tx_bits_remaining[3:0]
    18/57: $2\tx_state[1:0]
    19/57: $1\tx_out[0:0]
    20/57: $2\tx_clk[10:0]
    21/57: $9\recv_state[2:0]
    22/57: $8\recv_state[2:0]
    23/57: $8\rx_clk[14:0]
    24/57: $3\rx_data[7:0]
    25/57: $7\recv_state[2:0]
    26/57: $7\rx_clk[14:0]
    27/57: $4\rx_bits_remaining[3:0]
    28/57: $5\rx_sample_countdown[3:0]
    29/57: $6\rx_samples[3:0]
    30/57: $2\rx_data[7:0]
    31/57: $5\rx_samples[3:0]
    32/57: $6\recv_state[2:0]
    33/57: $4\rx_sample_countdown[3:0]
    34/57: $6\rx_clk[14:0]
    35/57: $4\rx_samples[3:0]
    36/57: $3\rx_sample_countdown[3:0]
    37/57: $3\rx_samples[3:0]
    38/57: $5\recv_state[2:0]
    39/57: $3\rx_bits_remaining[3:0]
    40/57: $5\rx_clk[14:0]
    41/57: $2\rx_bits_remaining[3:0]
    42/57: $4\recv_state[2:0]
    43/57: $4\rx_clk[14:0]
    44/57: $2\rx_sample_countdown[3:0]
    45/57: $2\rx_samples[3:0]
    46/57: $3\recv_state[2:0]
    47/57: $3\rx_clk[14:0]
    48/57: $2\recv_state[2:0]
    49/57: $2\rx_clk[14:0]
    50/57: $1\rx_data[7:0]
    51/57: $1\rx_bits_remaining[3:0]
    52/57: $1\rx_sample_countdown[3:0]
    53/57: $1\rx_samples[3:0]
    54/57: $1\tx_clk[10:0]
    55/57: $1\rx_clk[14:0]
    56/57: $1\tx_state[1:0]
    57/57: $1\recv_state[2:0]
Creating decoders for process `\pulse_control.$proc$pulse_control.v:146$129'.
Creating decoders for process `\pulse_control.$proc$pulse_control.v:130$128'.
Creating decoders for process `\pulse_control.$proc$pulse_control.v:129$127'.
Creating decoders for process `\pulse_control.$proc$pulse_control.v:128$126'.
Creating decoders for process `\pulse_control.$proc$pulse_control.v:127$125'.
Creating decoders for process `\pulse_control.$proc$pulse_control.v:63$124'.
Creating decoders for process `\pulse_control.$proc$pulse_control.v:62$123'.
Creating decoders for process `\pulse_control.$proc$pulse_control.v:57$122'.
Creating decoders for process `\pulse_control.$proc$pulse_control.v:56$121'.
Creating decoders for process `\pulse_control.$proc$pulse_control.v:55$120'.
Creating decoders for process `\pulse_control.$proc$pulse_control.v:54$119'.
Creating decoders for process `\pulse_control.$proc$pulse_control.v:53$118'.
Creating decoders for process `\pulse_control.$proc$pulse_control.v:52$117'.
Creating decoders for process `\pulse_control.$proc$pulse_control.v:51$116'.
Creating decoders for process `\pulse_control.$proc$pulse_control.v:50$115'.
Creating decoders for process `\pulse_control.$proc$pulse_control.v:49$114'.
Creating decoders for process `\pulse_control.$proc$pulse_control.v:48$113'.
Creating decoders for process `\pulse_control.$proc$pulse_control.v:47$112'.
Creating decoders for process `\pulse_control.$proc$pulse_control.v:46$111'.
Creating decoders for process `\pulse_control.$proc$pulse_control.v:45$110'.
Creating decoders for process `\pulse_control.$proc$pulse_control.v:44$109'.
Creating decoders for process `\pulse_control.$proc$pulse_control.v:43$108'.
Creating decoders for process `\pulse_control.$proc$pulse_control.v:42$107'.
Creating decoders for process `\pulse_control.$proc$pulse_control.v:149$78'.
     1/39: $2\rx_done[0:0]
     2/39: $4$bitselwrite$data$pulse_control.v:164$77[31:0]$89
     3/39: $4$bitselwrite$mask$pulse_control.v:164$76[31:0]$88
     4/39: $4\vinput[31:0]
     5/39: $3$bitselwrite$data$pulse_control.v:164$77[31:0]$86
     6/39: $3$bitselwrite$mask$pulse_control.v:164$76[31:0]$85
     7/39: $3\vinput[31:0]
     8/39: $2$bitselwrite$data$pulse_control.v:164$77[31:0]$84
     9/39: $2$bitselwrite$mask$pulse_control.v:164$76[31:0]$83
    10/39: $2\vinput[31:0]
    11/39: $1$bitselwrite$data$pulse_control.v:164$77[31:0]$82
    12/39: $1$bitselwrite$mask$pulse_control.v:164$76[31:0]$81
    13/39: $1\vinput[31:0]
    14/39: $1\voutput[7:0]
    15/39: $1\rx_done[0:0]
    16/39: $0\state[2:0]
    17/39: $0\readcount[5:0]
    18/39: $0\readstate[1:0]
    19/39: $0\writestate[0:0]
    20/39: $0\vcontrol[7:0]
    21/39: $0\tx_byte[7:0]
    22/39: $0\transmit[0:0]
    23/39: $0\recv_set[0:0]
    24/39: $0\cpmg[7:0]
    25/39: $0\pulse_block_half[15:0]
    26/39: $0\pulse_block[7:0]
    27/39: $0\block[0:0]
    28/39: $0\nut_wid[7:0]
    29/39: $0\nut_del[15:0]
    30/39: $0\p2width2[15:0]
    31/39: $0\delay2[15:0]
    32/39: $0\p1width2[15:0]
    33/39: $0\p1start2[15:0]
    34/39: $0\p2width[15:0]
    35/39: $0\delay[15:0]
    36/39: $0\p1width[15:0]
    37/39: $0\period[31:0]
    38/39: $0\post_att[6:0]
    39/39: $0\pre_att[6:0]
Creating decoders for process `\pulses.$proc$pulses.v:118$75'.
Creating decoders for process `\pulses.$proc$pulses.v:112$74'.
Creating decoders for process `\pulses.$proc$pulses.v:65$73'.
Creating decoders for process `\pulses.$proc$pulses.v:64$72'.
Creating decoders for process `\pulses.$proc$pulses.v:54$71'.
Creating decoders for process `\pulses.$proc$pulses.v:184$12'.
     1/18: $0\counter[31:0]
     2/18: $0\cblock_on[31:0]
     3/18: $0\cblock_delay[31:0]
     4/18: $0\cpulse[31:0]
     5/18: $0\cdelay[31:0]
     6/18: $0\ccount[7:0]
     7/18: $0\nutation_pulse_stop[23:0]
     8/18: $0\nutation_pulse_start[23:0]
     9/18: $0\sync_down[15:0]
    10/18: $0\inh[0:0]
    11/18: $0\nut_pulse[0:0]
    12/18: $0\pulse2s[0:0]
    13/18: $0\pulse2[0:0]
    14/18: $0\pulse[0:0]
    15/18: $0\sync[0:0]
    16/18: $0\pulses[0:0]
    17/18: $0\post_att_val[6:0]
    18/18: $0\pre_att_val[6:0]
Creating decoders for process `\pulses.$proc$pulses.v:131$1'.

6.4.7. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\pulse_control.\writecount' from process `\pulse_control.$proc$pulse_control.v:128$126'.
No latch inferred for signal `\pulses.\xfer_bits' from process `\pulses.$proc$pulses.v:118$75'.
No latch inferred for signal `\pulses.\rec' from process `\pulses.$proc$pulses.v:64$72'.

6.4.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\TRELLIS_FF.\Q' using process `\TRELLIS_FF.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:350$391'.
  created $dff cell `$procdff$1579' with positive edge clock.
Creating register for signal `\DPR16X4C.\i' using process `\DPR16X4C.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:0$388'.
  created direct connection (no actual register cell created).
Creating register for signal `\DPR16X4C.$memwr$\ram$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:287$366_ADDR' using process `\DPR16X4C.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:285$367'.
  created $dff cell `$procdff$1580' with positive edge clock.
Creating register for signal `\DPR16X4C.$memwr$\ram$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:287$366_DATA' using process `\DPR16X4C.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:285$367'.
  created $dff cell `$procdff$1581' with positive edge clock.
Creating register for signal `\DPR16X4C.$memwr$\ram$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:287$366_EN' using process `\DPR16X4C.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:285$367'.
  created $dff cell `$procdff$1582' with positive edge clock.
Creating register for signal `\TRELLIS_DPR16X4.\i' using process `\TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:0$334'.
  created direct connection (no actual register cell created).
Creating register for signal `\TRELLIS_DPR16X4.$memwr$\mem$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:223$310_ADDR' using process `\TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:221$312'.
  created $dff cell `$procdff$1583' with positive edge clock.
Creating register for signal `\TRELLIS_DPR16X4.$memwr$\mem$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:223$310_DATA' using process `\TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:221$312'.
  created $dff cell `$procdff$1584' with positive edge clock.
Creating register for signal `\TRELLIS_DPR16X4.$memwr$\mem$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:223$310_EN' using process `\TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:221$312'.
  created $dff cell `$procdff$1585' with positive edge clock.
Creating register for signal `\TRELLIS_DPR16X4.\muxwre' using process `\TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:213$311'.
  created direct connection (no actual register cell created).
Creating register for signal `\uart.\rx_samples' using process `\uart.$proc$uart.v:135$136'.
  created $dff cell `$procdff$1586' with positive edge clock.
Creating register for signal `\uart.\rx_sample_countdown' using process `\uart.$proc$uart.v:135$136'.
  created $dff cell `$procdff$1587' with positive edge clock.
Creating register for signal `\uart.\rx_clk' using process `\uart.$proc$uart.v:135$136'.
  created $dff cell `$procdff$1588' with positive edge clock.
Creating register for signal `\uart.\tx_clk' using process `\uart.$proc$uart.v:135$136'.
  created $dff cell `$procdff$1589' with positive edge clock.
Creating register for signal `\uart.\recv_state' using process `\uart.$proc$uart.v:135$136'.
  created $dff cell `$procdff$1590' with positive edge clock.
Creating register for signal `\uart.\rx_bits_remaining' using process `\uart.$proc$uart.v:135$136'.
  created $dff cell `$procdff$1591' with positive edge clock.
Creating register for signal `\uart.\rx_data' using process `\uart.$proc$uart.v:135$136'.
  created $dff cell `$procdff$1592' with positive edge clock.
Creating register for signal `\uart.\tx_out' using process `\uart.$proc$uart.v:135$136'.
  created $dff cell `$procdff$1593' with positive edge clock.
Creating register for signal `\uart.\tx_state' using process `\uart.$proc$uart.v:135$136'.
  created $dff cell `$procdff$1594' with positive edge clock.
Creating register for signal `\uart.\tx_bits_remaining' using process `\uart.$proc$uart.v:135$136'.
  created $dff cell `$procdff$1595' with positive edge clock.
Creating register for signal `\uart.\tx_data' using process `\uart.$proc$uart.v:135$136'.
  created $dff cell `$procdff$1596' with positive edge clock.
Creating register for signal `\pulse_control.\pre_att' using process `\pulse_control.$proc$pulse_control.v:149$78'.
  created $dff cell `$procdff$1597' with positive edge clock.
Creating register for signal `\pulse_control.\post_att' using process `\pulse_control.$proc$pulse_control.v:149$78'.
  created $dff cell `$procdff$1598' with positive edge clock.
Creating register for signal `\pulse_control.\period' using process `\pulse_control.$proc$pulse_control.v:149$78'.
  created $dff cell `$procdff$1599' with positive edge clock.
Creating register for signal `\pulse_control.\p1width' using process `\pulse_control.$proc$pulse_control.v:149$78'.
  created $dff cell `$procdff$1600' with positive edge clock.
Creating register for signal `\pulse_control.\delay' using process `\pulse_control.$proc$pulse_control.v:149$78'.
  created $dff cell `$procdff$1601' with positive edge clock.
Creating register for signal `\pulse_control.\p2width' using process `\pulse_control.$proc$pulse_control.v:149$78'.
  created $dff cell `$procdff$1602' with positive edge clock.
Creating register for signal `\pulse_control.\p1start2' using process `\pulse_control.$proc$pulse_control.v:149$78'.
  created $dff cell `$procdff$1603' with positive edge clock.
Creating register for signal `\pulse_control.\p1width2' using process `\pulse_control.$proc$pulse_control.v:149$78'.
  created $dff cell `$procdff$1604' with positive edge clock.
Creating register for signal `\pulse_control.\delay2' using process `\pulse_control.$proc$pulse_control.v:149$78'.
  created $dff cell `$procdff$1605' with positive edge clock.
Creating register for signal `\pulse_control.\p2width2' using process `\pulse_control.$proc$pulse_control.v:149$78'.
  created $dff cell `$procdff$1606' with positive edge clock.
Creating register for signal `\pulse_control.\nut_del' using process `\pulse_control.$proc$pulse_control.v:149$78'.
  created $dff cell `$procdff$1607' with positive edge clock.
Creating register for signal `\pulse_control.\nut_wid' using process `\pulse_control.$proc$pulse_control.v:149$78'.
  created $dff cell `$procdff$1608' with positive edge clock.
Creating register for signal `\pulse_control.\block' using process `\pulse_control.$proc$pulse_control.v:149$78'.
  created $dff cell `$procdff$1609' with positive edge clock.
Creating register for signal `\pulse_control.\pulse_block' using process `\pulse_control.$proc$pulse_control.v:149$78'.
  created $dff cell `$procdff$1610' with positive edge clock.
Creating register for signal `\pulse_control.\pulse_block_half' using process `\pulse_control.$proc$pulse_control.v:149$78'.
  created $dff cell `$procdff$1611' with positive edge clock.
Creating register for signal `\pulse_control.\cpmg' using process `\pulse_control.$proc$pulse_control.v:149$78'.
  created $dff cell `$procdff$1612' with positive edge clock.
Creating register for signal `\pulse_control.\rx_done' using process `\pulse_control.$proc$pulse_control.v:149$78'.
  created $dff cell `$procdff$1613' with positive edge clock.
Creating register for signal `\pulse_control.\recv_set' using process `\pulse_control.$proc$pulse_control.v:149$78'.
  created $dff cell `$procdff$1614' with positive edge clock.
Creating register for signal `\pulse_control.\transmit' using process `\pulse_control.$proc$pulse_control.v:149$78'.
  created $dff cell `$procdff$1615' with positive edge clock.
Creating register for signal `\pulse_control.\tx_byte' using process `\pulse_control.$proc$pulse_control.v:149$78'.
  created $dff cell `$procdff$1616' with positive edge clock.
Creating register for signal `\pulse_control.\vinput' using process `\pulse_control.$proc$pulse_control.v:149$78'.
  created $dff cell `$procdff$1617' with positive edge clock.
Creating register for signal `\pulse_control.\vcontrol' using process `\pulse_control.$proc$pulse_control.v:149$78'.
  created $dff cell `$procdff$1618' with positive edge clock.
Creating register for signal `\pulse_control.\voutput' using process `\pulse_control.$proc$pulse_control.v:149$78'.
  created $dff cell `$procdff$1619' with positive edge clock.
Creating register for signal `\pulse_control.\writestate' using process `\pulse_control.$proc$pulse_control.v:149$78'.
  created $dff cell `$procdff$1620' with positive edge clock.
Creating register for signal `\pulse_control.\readstate' using process `\pulse_control.$proc$pulse_control.v:149$78'.
  created $dff cell `$procdff$1621' with positive edge clock.
Creating register for signal `\pulse_control.\readcount' using process `\pulse_control.$proc$pulse_control.v:149$78'.
  created $dff cell `$procdff$1622' with positive edge clock.
Creating register for signal `\pulse_control.\state' using process `\pulse_control.$proc$pulse_control.v:149$78'.
  created $dff cell `$procdff$1623' with positive edge clock.
Creating register for signal `\pulse_control.$bitselwrite$mask$pulse_control.v:164$76' using process `\pulse_control.$proc$pulse_control.v:149$78'.
  created $dff cell `$procdff$1624' with positive edge clock.
Creating register for signal `\pulse_control.$bitselwrite$data$pulse_control.v:164$77' using process `\pulse_control.$proc$pulse_control.v:149$78'.
  created $dff cell `$procdff$1625' with positive edge clock.
Creating register for signal `\pulses.\pre_att_val' using process `\pulses.$proc$pulses.v:184$12'.
  created $dff cell `$procdff$1626' with positive edge clock.
Creating register for signal `\pulses.\post_att_val' using process `\pulses.$proc$pulses.v:184$12'.
  created $dff cell `$procdff$1627' with positive edge clock.
Creating register for signal `\pulses.\pulses' using process `\pulses.$proc$pulses.v:184$12'.
  created $dff cell `$procdff$1628' with positive edge clock.
Creating register for signal `\pulses.\counter' using process `\pulses.$proc$pulses.v:184$12'.
  created $dff cell `$procdff$1629' with positive edge clock.
Creating register for signal `\pulses.\sync' using process `\pulses.$proc$pulses.v:184$12'.
  created $dff cell `$procdff$1630' with positive edge clock.
Creating register for signal `\pulses.\pulse' using process `\pulses.$proc$pulses.v:184$12'.
  created $dff cell `$procdff$1631' with positive edge clock.
Creating register for signal `\pulses.\pulse2' using process `\pulses.$proc$pulses.v:184$12'.
  created $dff cell `$procdff$1632' with positive edge clock.
Creating register for signal `\pulses.\pulse2s' using process `\pulses.$proc$pulses.v:184$12'.
  created $dff cell `$procdff$1633' with positive edge clock.
Creating register for signal `\pulses.\nut_pulse' using process `\pulses.$proc$pulses.v:184$12'.
  created $dff cell `$procdff$1634' with positive edge clock.
Creating register for signal `\pulses.\inh' using process `\pulses.$proc$pulses.v:184$12'.
  created $dff cell `$procdff$1635' with positive edge clock.
Creating register for signal `\pulses.\sync_down' using process `\pulses.$proc$pulses.v:184$12'.
  created $dff cell `$procdff$1636' with positive edge clock.
Creating register for signal `\pulses.\nutation_pulse_start' using process `\pulses.$proc$pulses.v:184$12'.
  created $dff cell `$procdff$1637' with positive edge clock.
Creating register for signal `\pulses.\nutation_pulse_stop' using process `\pulses.$proc$pulses.v:184$12'.
  created $dff cell `$procdff$1638' with positive edge clock.
Creating register for signal `\pulses.\ccount' using process `\pulses.$proc$pulses.v:184$12'.
  created $dff cell `$procdff$1639' with positive edge clock.
Creating register for signal `\pulses.\cdelay' using process `\pulses.$proc$pulses.v:184$12'.
  created $dff cell `$procdff$1640' with positive edge clock.
Creating register for signal `\pulses.\cpulse' using process `\pulses.$proc$pulses.v:184$12'.
  created $dff cell `$procdff$1641' with positive edge clock.
Creating register for signal `\pulses.\cblock_delay' using process `\pulses.$proc$pulses.v:184$12'.
  created $dff cell `$procdff$1642' with positive edge clock.
Creating register for signal `\pulses.\cblock_on' using process `\pulses.$proc$pulses.v:184$12'.
  created $dff cell `$procdff$1643' with positive edge clock.
Creating register for signal `\pulses.\period' using process `\pulses.$proc$pulses.v:131$1'.
  created $dff cell `$procdff$1644' with positive edge clock.
Creating register for signal `\pulses.\p1width' using process `\pulses.$proc$pulses.v:131$1'.
  created $dff cell `$procdff$1645' with positive edge clock.
Creating register for signal `\pulses.\delay' using process `\pulses.$proc$pulses.v:131$1'.
  created $dff cell `$procdff$1646' with positive edge clock.
Creating register for signal `\pulses.\p2width' using process `\pulses.$proc$pulses.v:131$1'.
  created $dff cell `$procdff$1647' with positive edge clock.
Creating register for signal `\pulses.\p1start2' using process `\pulses.$proc$pulses.v:131$1'.
  created $dff cell `$procdff$1648' with positive edge clock.
Creating register for signal `\pulses.\p1width2' using process `\pulses.$proc$pulses.v:131$1'.
  created $dff cell `$procdff$1649' with positive edge clock.
Creating register for signal `\pulses.\p2width2' using process `\pulses.$proc$pulses.v:131$1'.
  created $dff cell `$procdff$1650' with positive edge clock.
Creating register for signal `\pulses.\block' using process `\pulses.$proc$pulses.v:131$1'.
  created $dff cell `$procdff$1651' with positive edge clock.
Creating register for signal `\pulses.\pulse_block' using process `\pulses.$proc$pulses.v:131$1'.
  created $dff cell `$procdff$1652' with positive edge clock.
Creating register for signal `\pulses.\pulse_block_half' using process `\pulses.$proc$pulses.v:131$1'.
  created $dff cell `$procdff$1653' with positive edge clock.
Creating register for signal `\pulses.\cpmg' using process `\pulses.$proc$pulses.v:131$1'.
  created $dff cell `$procdff$1654' with positive edge clock.
Creating register for signal `\pulses.\cw' using process `\pulses.$proc$pulses.v:131$1'.
  created $dff cell `$procdff$1655' with positive edge clock.
Creating register for signal `\pulses.\p2start2' using process `\pulses.$proc$pulses.v:131$1'.
  created $dff cell `$procdff$1656' with positive edge clock.
Creating register for signal `\pulses.\p2stop2' using process `\pulses.$proc$pulses.v:131$1'.
  created $dff cell `$procdff$1657' with positive edge clock.
Creating register for signal `\pulses.\p2start' using process `\pulses.$proc$pulses.v:131$1'.
  created $dff cell `$procdff$1658' with positive edge clock.
Creating register for signal `\pulses.\sdown' using process `\pulses.$proc$pulses.v:131$1'.
  created $dff cell `$procdff$1659' with positive edge clock.
Creating register for signal `\pulses.\block_off' using process `\pulses.$proc$pulses.v:131$1'.
  created $dff cell `$procdff$1660' with positive edge clock.
Creating register for signal `\pulses.\block_on' using process `\pulses.$proc$pulses.v:131$1'.
  created $dff cell `$procdff$1661' with positive edge clock.
Creating register for signal `\pulses.\nutation_pulse_width' using process `\pulses.$proc$pulses.v:131$1'.
  created $dff cell `$procdff$1662' with positive edge clock.
Creating register for signal `\pulses.\nutation_pulse_delay' using process `\pulses.$proc$pulses.v:131$1'.
  created $dff cell `$procdff$1663' with positive edge clock.

6.4.9. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `TRELLIS_FF.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:0$395'.
Found and cleaned up 2 empty switches in `\TRELLIS_FF.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:350$391'.
Removing empty process `TRELLIS_FF.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:350$391'.
Removing empty process `DPR16X4C.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:0$388'.
Found and cleaned up 1 empty switch in `\DPR16X4C.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:285$367'.
Removing empty process `DPR16X4C.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:285$367'.
Removing empty process `TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:0$334'.
Found and cleaned up 1 empty switch in `\TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:221$312'.
Removing empty process `TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:221$312'.
Removing empty process `TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:213$311'.
Removing empty process `uart.$proc$uart.v:106$165'.
Removing empty process `uart.$proc$uart.v:105$164'.
Removing empty process `uart.$proc$uart.v:101$163'.
Found and cleaned up 17 empty switches in `\uart.$proc$uart.v:135$136'.
Removing empty process `uart.$proc$uart.v:135$136'.
Removing empty process `pulse_control.$proc$pulse_control.v:146$129'.
Removing empty process `pulse_control.$proc$pulse_control.v:130$128'.
Removing empty process `pulse_control.$proc$pulse_control.v:129$127'.
Removing empty process `pulse_control.$proc$pulse_control.v:128$126'.
Removing empty process `pulse_control.$proc$pulse_control.v:127$125'.
Removing empty process `pulse_control.$proc$pulse_control.v:63$124'.
Removing empty process `pulse_control.$proc$pulse_control.v:62$123'.
Removing empty process `pulse_control.$proc$pulse_control.v:57$122'.
Removing empty process `pulse_control.$proc$pulse_control.v:56$121'.
Removing empty process `pulse_control.$proc$pulse_control.v:55$120'.
Removing empty process `pulse_control.$proc$pulse_control.v:54$119'.
Removing empty process `pulse_control.$proc$pulse_control.v:53$118'.
Removing empty process `pulse_control.$proc$pulse_control.v:52$117'.
Removing empty process `pulse_control.$proc$pulse_control.v:51$116'.
Removing empty process `pulse_control.$proc$pulse_control.v:50$115'.
Removing empty process `pulse_control.$proc$pulse_control.v:49$114'.
Removing empty process `pulse_control.$proc$pulse_control.v:48$113'.
Removing empty process `pulse_control.$proc$pulse_control.v:47$112'.
Removing empty process `pulse_control.$proc$pulse_control.v:46$111'.
Removing empty process `pulse_control.$proc$pulse_control.v:45$110'.
Removing empty process `pulse_control.$proc$pulse_control.v:44$109'.
Removing empty process `pulse_control.$proc$pulse_control.v:43$108'.
Removing empty process `pulse_control.$proc$pulse_control.v:42$107'.
Found and cleaned up 9 empty switches in `\pulse_control.$proc$pulse_control.v:149$78'.
Removing empty process `pulse_control.$proc$pulse_control.v:149$78'.
Removing empty process `pulses.$proc$pulses.v:118$75'.
Removing empty process `pulses.$proc$pulses.v:112$74'.
Removing empty process `pulses.$proc$pulses.v:65$73'.
Removing empty process `pulses.$proc$pulses.v:64$72'.
Removing empty process `pulses.$proc$pulses.v:54$71'.
Found and cleaned up 6 empty switches in `\pulses.$proc$pulses.v:184$12'.
Removing empty process `pulses.$proc$pulses.v:184$12'.
Removing empty process `pulses.$proc$pulses.v:131$1'.
Cleaned up 36 empty switches.

6.5. Executing FLATTEN pass (flatten design).
Deleting now unused module pll.
Deleting now unused module uart.
Deleting now unused module pulse_control.
Deleting now unused module pulses.
<suppressed ~4 debug messages>

6.6. Executing TRIBUF pass.

6.7. Executing DEMINOUT pass (demote inout ports to input or output).

6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_gen.
<suppressed ~126 debug messages>

6.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_gen..
Removed 65 unused cells and 377 unused wires.
<suppressed ~81 debug messages>

6.10. Executing CHECK pass (checking for obvious problems).
checking module pulse_gen..
found and reported 0 problems.

6.11. Executing OPT pass (performing simple optimizations).

6.11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_gen.

6.11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pulse_gen'.
<suppressed ~660 debug messages>
Removed a total of 220 cells.

6.11.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \pulse_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port A of cell $flatten\control.$procmux$1122: \control.writestate -> 1'0
      Replacing known input bits on port B of cell $flatten\control.$procmux$1120: \control.writestate -> 1'1
      Replacing known input bits on port B of cell $flatten\control.$procmux$1124: \control.writestate -> 1'0
  Analyzing evaluation results.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$482.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$489.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$496.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$504.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$512.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$520.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$528.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$536.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$569.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$579.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$581.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$591.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$593.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$603.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$605.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$614.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$623.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$632.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$641.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$650.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$659.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$670.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$672.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$682.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$692.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$702.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$712.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$724.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$726.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$738.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$740.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$752.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$754.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$766.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$768.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$780.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$782.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$793.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$804.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$815.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$826.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$837.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$849.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$861.
    dead port 2/2 on $mux $flatten\control.$procmux$1012.
    dead port 2/2 on $mux $flatten\control.$procmux$1014.
    dead port 2/2 on $mux $flatten\control.$procmux$1041.
    dead port 2/2 on $mux $flatten\control.$procmux$974.
    dead port 2/2 on $mux $flatten\control.$procmux$976.
    dead port 2/2 on $mux $flatten\control.$procmux$978.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$419.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$421.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$429.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$431.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$439.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$441.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$449.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$451.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$459.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$461.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$468.
    dead port 2/2 on $mux $flatten\control.\uart0.$procmux$475.
Removed 62 multiplexer ports.
<suppressed ~56 debug messages>

6.11.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \pulse_gen.
    New ctrl vector for $pmux cell $flatten\control.$procmux$1088: { $flatten\control.$procmux$1015_CMP $auto$opt_reduce.cc:134:opt_mux$1665 }
    New ctrl vector for $pmux cell $flatten\control.\uart0.$procmux$538: { $flatten\control.\uart0.$procmux$505_CMP $flatten\control.\uart0.$procmux$422_CMP $auto$opt_reduce.cc:134:opt_mux$1667 }
    New ctrl vector for $pmux cell $flatten\control.\uart0.$procmux$543: { $flatten\control.\uart0.$procmux$505_CMP $flatten\control.\uart0.$procmux$422_CMP $auto$opt_reduce.cc:134:opt_mux$1669 }
    New ctrl vector for $pmux cell $flatten\control.\uart0.$procmux$553: { $flatten\control.\uart0.$procmux$505_CMP $flatten\control.\uart0.$procmux$422_CMP $auto$opt_reduce.cc:134:opt_mux$1671 }
    New ctrl vector for $pmux cell $flatten\control.\uart0.$procmux$558: { $flatten\control.\uart0.$procmux$505_CMP $flatten\control.\uart0.$procmux$422_CMP $auto$opt_reduce.cc:134:opt_mux$1673 }
    New ctrl vector for $pmux cell $flatten\control.\uart0.$procmux$872: { $flatten\control.\uart0.$procmux$850_CMP $flatten\control.\uart0.$procmux$727_CMP $flatten\control.\uart0.$procmux$673_CMP $flatten\control.\uart0.$procmux$582_CMP $flatten\control.\uart0.$procmux$866_CMP $auto$opt_reduce.cc:134:opt_mux$1675 }
    New ctrl vector for $pmux cell $flatten\control.\uart0.$procmux$881: { $flatten\control.\uart0.$procmux$582_CMP $auto$opt_reduce.cc:134:opt_mux$1677 }
    New ctrl vector for $pmux cell $flatten\control.\uart0.$procmux$890: { $flatten\control.\uart0.$procmux$727_CMP $flatten\control.\uart0.$procmux$582_CMP $auto$opt_reduce.cc:134:opt_mux$1679 }
    New ctrl vector for $pmux cell $flatten\control.\uart0.$procmux$899: { $flatten\control.\uart0.$procmux$727_CMP $flatten\control.\uart0.$procmux$673_CMP $flatten\control.\uart0.$procmux$582_CMP $auto$opt_reduce.cc:134:opt_mux$1681 }
    New ctrl vector for $pmux cell $flatten\control.\uart0.$procmux$908: { $flatten\control.\uart0.$procmux$727_CMP $flatten\control.\uart0.$procmux$673_CMP $flatten\control.\uart0.$procmux$582_CMP $auto$opt_reduce.cc:134:opt_mux$1683 }
  Optimizing cells in module \pulse_gen.
Performed a total of 10 changes.

6.11.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pulse_gen'.
<suppressed ~12 debug messages>
Removed a total of 4 cells.

6.11.6. Executing OPT_DFF pass (perform DFF optimizations).

6.11.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_gen..
Removed 0 unused cells and 286 unused wires.
<suppressed ~1 debug messages>

6.11.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_gen.

6.11.9. Rerunning OPT passes. (Maybe there is more to do..)

6.11.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \pulse_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~56 debug messages>

6.11.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \pulse_gen.
Performed a total of 0 changes.

6.11.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pulse_gen'.
Removed a total of 0 cells.

6.11.13. Executing OPT_DFF pass (perform DFF optimizations).

6.11.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_gen..

6.11.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_gen.

6.11.16. Finished OPT passes. (There is nothing left to do.)

6.12. Executing FSM pass (extract and optimize FSM).

6.12.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking pulse_gen.control.readstate as FSM state register:
    Register has an initialization value.
Not marking pulse_gen.control.state as FSM state register:
    Register has an initialization value.
    Circuit seems to be self-resetting.
Not marking pulse_gen.control.uart0.recv_state as FSM state register:
    Register has an initialization value.
    Circuit seems to be self-resetting.
Not marking pulse_gen.control.uart0.tx_state as FSM state register:
    Users of register don't seem to benefit from recoding.
    Register has an initialization value.
    Circuit seems to be self-resetting.

6.12.2. Executing FSM_EXTRACT pass (extracting FSM from design).

6.12.3. Executing FSM_OPT pass (simple optimizations of FSMs).

6.12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_gen..

6.12.5. Executing FSM_OPT pass (simple optimizations of FSMs).

6.12.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

6.12.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

6.12.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

6.13. Executing OPT pass (performing simple optimizations).

6.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_gen.

6.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pulse_gen'.
Removed a total of 0 cells.

6.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \pulse_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~56 debug messages>

6.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \pulse_gen.
Performed a total of 0 changes.

6.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pulse_gen'.
Removed a total of 0 cells.

6.13.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $flatten\pulses.$procdff$1643 ($dff) from module pulse_gen (D = $flatten\pulses.$procmux$1344_Y, Q = \pulses.cblock_on).
Adding EN signal on $flatten\pulses.$procdff$1642 ($dff) from module pulse_gen (D = $flatten\pulses.$procmux$1367_Y, Q = \pulses.cblock_delay).
Adding EN signal on $flatten\pulses.$procdff$1641 ($dff) from module pulse_gen (D = $flatten\pulses.$procmux$1387_Y, Q = \pulses.cpulse).
Adding EN signal on $flatten\pulses.$procdff$1640 ($dff) from module pulse_gen (D = $flatten\pulses.$procmux$1407_Y, Q = \pulses.cdelay).
Adding EN signal on $flatten\pulses.$procdff$1639 ($dff) from module pulse_gen (D = $flatten\pulses.$procmux$1428_Y, Q = \pulses.ccount).
Adding SRST signal on $auto$opt_dff.cc:764:run$1774 ($dffe) from module pulse_gen (D = $flatten\pulses.$procmux$1426_Y, Q = \pulses.ccount, rval = 8'00000000).
Adding EN signal on $flatten\pulses.$procdff$1638 ($dff) from module pulse_gen (D = $flatten\pulses.$sub$pulses.v:188$14_Y [23:0], Q = \pulses.nutation_pulse_stop).
Adding EN signal on $flatten\pulses.$procdff$1637 ($dff) from module pulse_gen (D = $flatten\pulses.$sub$pulses.v:188$15_Y [23:0], Q = \pulses.nutation_pulse_start).
Adding EN signal on $flatten\pulses.$procdff$1636 ($dff) from module pulse_gen (D = $flatten\pulses.$procmux$1454_Y, Q = \pulses.sync_down).
Adding EN signal on $flatten\pulses.$procdff$1635 ($dff) from module pulse_gen (D = $flatten\pulses.$procmux$1481_Y, Q = \pulses.inh).
Adding SRST signal on $auto$opt_dff.cc:764:run$1809 ($dffe) from module pulse_gen (D = $flatten\pulses.$procmux$1478_Y, Q = \pulses.inh, rval = 1'0).
Adding EN signal on $flatten\pulses.$procdff$1634 ($dff) from module pulse_gen (D = $flatten\pulses.$ternary$pulses.v:191$20_Y [0], Q = \pulses.nut_pulse).
Adding SRST signal on $auto$opt_dff.cc:764:run$1811 ($dffe) from module pulse_gen (D = $flatten\pulses.$ternary$pulses.v:192$19_Y [0], Q = \pulses.nut_pulse, rval = 1'0).
Adding EN signal on $flatten\pulses.$procdff$1633 ($dff) from module pulse_gen (D = $flatten\pulses.$procmux$1490_Y, Q = \pulses.pulse2s).
Adding SRST signal on $auto$opt_dff.cc:764:run$1813 ($dffe) from module pulse_gen (D = $flatten\pulses.$ternary$pulses.v:195$27_Y [0], Q = \pulses.pulse2s, rval = 1'0).
Adding EN signal on $flatten\pulses.$procdff$1632 ($dff) from module pulse_gen (D = $flatten\pulses.$logic_or$pulses.v:313$70_Y, Q = \pulses.pulse2).
Adding EN signal on $flatten\pulses.$procdff$1631 ($dff) from module pulse_gen (D = $flatten\pulses.$logic_or$pulses.v:312$69_Y, Q = \pulses.pulse).
Adding EN signal on $flatten\pulses.$procdff$1630 ($dff) from module pulse_gen (D = $flatten\pulses.$procmux$1515_Y, Q = \pulses.sync).
Adding SRST signal on $flatten\pulses.$procdff$1629 ($dff) from module pulse_gen (D = $flatten\pulses.$add$pulses.v:311$67_Y, Q = \pulses.counter, rval = 0).
Adding EN signal on $flatten\pulses.$procdff$1628 ($dff) from module pulse_gen (D = $flatten\pulses.$procmux$1535_Y, Q = \pulses.pulses).
Adding SRST signal on $auto$opt_dff.cc:764:run$1849 ($dffe) from module pulse_gen (D = $flatten\pulses.$procmux$1532_Y, Q = \pulses.pulses, rval = 1'1).
Adding EN signal on $flatten\pulses.$procdff$1627 ($dff) from module pulse_gen (D = $flatten\pulses.$procmux$1559_Y, Q = \pulses.post_att_val).
Adding EN signal on $flatten\pulses.$procdff$1626 ($dff) from module pulse_gen (D = $flatten\pulses.$procmux$1575_Y, Q = \pulses.pre_att_val).
Adding EN signal on $flatten\control.\uart0.$procdff$1596 ($dff) from module pulse_gen (D = $flatten\control.\uart0.$0\tx_data[7:0], Q = \control.uart0.tx_data).
Adding EN signal on $flatten\control.\uart0.$procdff$1595 ($dff) from module pulse_gen (D = $flatten\control.\uart0.$0\tx_bits_remaining[3:0], Q = \control.uart0.tx_bits_remaining).
Adding EN signal on $flatten\control.\uart0.$procdff$1594 ($dff) from module pulse_gen (D = $flatten\control.\uart0.$0\tx_state[1:0], Q = \control.uart0.tx_state).
Adding EN signal on $flatten\control.\uart0.$procdff$1593 ($dff) from module pulse_gen (D = $flatten\control.\uart0.$0\tx_out[0:0], Q = \control.uart0.tx_out).
Adding EN signal on $flatten\control.\uart0.$procdff$1592 ($dff) from module pulse_gen (D = $flatten\control.\uart0.$0\rx_data[7:0], Q = \control.uart0.rx_data).
Adding EN signal on $flatten\control.\uart0.$procdff$1591 ($dff) from module pulse_gen (D = $flatten\control.\uart0.$0\rx_bits_remaining[3:0], Q = \control.uart0.rx_bits_remaining).
Adding EN signal on $flatten\control.\uart0.$procdff$1590 ($dff) from module pulse_gen (D = $flatten\control.\uart0.$0\recv_state[2:0], Q = \control.uart0.recv_state).
Adding EN signal on $flatten\control.\uart0.$procdff$1587 ($dff) from module pulse_gen (D = $flatten\control.\uart0.$0\rx_sample_countdown[3:0], Q = \control.uart0.rx_sample_countdown).
Adding EN signal on $flatten\control.\uart0.$procdff$1586 ($dff) from module pulse_gen (D = $flatten\control.\uart0.$0\rx_samples[3:0], Q = \control.uart0.rx_samples).
Adding EN signal on $flatten\control.$procdff$1623 ($dff) from module pulse_gen (D = $flatten\control.$0\state[2:0], Q = \control.state).
Adding EN signal on $flatten\control.$procdff$1622 ($dff) from module pulse_gen (D = $flatten\control.$0\readcount[5:0], Q = \control.readcount).
Adding EN signal on $flatten\control.$procdff$1621 ($dff) from module pulse_gen (D = $flatten\control.$procmux$1108_Y, Q = \control.readstate).
Adding EN signal on $flatten\control.$procdff$1620 ($dff) from module pulse_gen (D = $flatten\control.$0\writestate[0:0], Q = \control.writestate).
Adding EN signal on $flatten\control.$procdff$1619 ($dff) from module pulse_gen (D = $flatten\control.$add$pulse_control.v:181$102_Y, Q = \control.voutput).
Adding EN signal on $flatten\control.$procdff$1618 ($dff) from module pulse_gen (D = \control.uart0.rx_data, Q = \control.vcontrol).
Adding EN signal on $flatten\control.$procdff$1617 ($dff) from module pulse_gen (D = $flatten\control.$or$pulse_control.v:0$97_Y, Q = \control.vinput).
Adding EN signal on $flatten\control.$procdff$1616 ($dff) from module pulse_gen (D = \control.voutput, Q = \control.tx_byte).
Adding EN signal on $flatten\control.$procdff$1615 ($dff) from module pulse_gen (D = $flatten\control.$0\transmit[0:0], Q = \control.transmit).
Adding EN signal on $flatten\control.$procdff$1614 ($dff) from module pulse_gen (D = 1'1, Q = \control.recv_set).
Adding EN signal on $flatten\control.$procdff$1612 ($dff) from module pulse_gen (D = \control.vinput [7:0], Q = \control.cpmg).
Adding EN signal on $flatten\control.$procdff$1610 ($dff) from module pulse_gen (D = \control.vinput [15:8], Q = \control.pulse_block).
Adding EN signal on $flatten\control.$procdff$1609 ($dff) from module pulse_gen (D = \control.vinput [0], Q = \control.block).
Adding EN signal on $flatten\control.$procdff$1608 ($dff) from module pulse_gen (D = \control.vinput [7:0], Q = \control.nut_wid).
Adding EN signal on $flatten\control.$procdff$1607 ($dff) from module pulse_gen (D = \control.vinput [31:16], Q = \control.nut_del).
Adding EN signal on $flatten\control.$procdff$1606 ($dff) from module pulse_gen (D = \control.vinput [31:16], Q = \control.p2width2).
Adding EN signal on $flatten\control.$procdff$1605 ($dff) from module pulse_gen (D = \control.vinput [31:16], Q = \control.delay2).
Adding EN signal on $flatten\control.$procdff$1604 ($dff) from module pulse_gen (D = $flatten\control.$add$pulse_control.v:195$103_Y, Q = \control.p1width2).
Adding EN signal on $flatten\control.$procdff$1603 ($dff) from module pulse_gen (D = \control.vinput [31:16], Q = \control.p1start2).
Adding EN signal on $flatten\control.$procdff$1602 ($dff) from module pulse_gen (D = \control.vinput [15:0], Q = \control.p2width).
Adding EN signal on $flatten\control.$procdff$1601 ($dff) from module pulse_gen (D = \control.vinput [15:0], Q = \control.delay).
Adding EN signal on $flatten\control.$procdff$1600 ($dff) from module pulse_gen (D = \control.vinput [15:0], Q = \control.p1width).
Adding EN signal on $flatten\control.$procdff$1599 ($dff) from module pulse_gen (D = \control.vinput, Q = \control.period).
Adding EN signal on $flatten\control.$procdff$1598 ($dff) from module pulse_gen (D = \control.vinput [14:8], Q = \control.post_att).
Adding EN signal on $flatten\control.$procdff$1597 ($dff) from module pulse_gen (D = \control.vinput [6:0], Q = \control.pre_att).

6.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_gen..
Removed 77 unused cells and 77 unused wires.
<suppressed ~78 debug messages>

6.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_gen.
<suppressed ~22 debug messages>

6.13.9. Rerunning OPT passes. (Maybe there is more to do..)

6.13.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \pulse_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~31 debug messages>

6.13.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \pulse_gen.
    New ctrl vector for $pmux cell $flatten\control.\uart0.$procmux$538: { $flatten\control.\uart0.$procmux$505_CMP $flatten\control.\uart0.$procmux$422_CMP }
    New ctrl vector for $pmux cell $flatten\control.\uart0.$procmux$543: { $flatten\control.\uart0.$procmux$505_CMP $flatten\control.\uart0.$procmux$422_CMP }
    New ctrl vector for $pmux cell $flatten\control.\uart0.$procmux$553: { $flatten\control.\uart0.$procmux$505_CMP $flatten\control.\uart0.$procmux$422_CMP }
    New ctrl vector for $pmux cell $flatten\control.\uart0.$procmux$881: $flatten\control.\uart0.$procmux$582_CMP
    New ctrl vector for $pmux cell $flatten\control.\uart0.$procmux$890: { $flatten\control.\uart0.$procmux$727_CMP $flatten\control.\uart0.$procmux$582_CMP }
    New ctrl vector for $pmux cell $flatten\control.\uart0.$procmux$899: { $flatten\control.\uart0.$procmux$727_CMP $flatten\control.\uart0.$procmux$673_CMP $flatten\control.\uart0.$procmux$582_CMP }
    New ctrl vector for $pmux cell $flatten\control.\uart0.$procmux$908: { $flatten\control.\uart0.$procmux$727_CMP $flatten\control.\uart0.$procmux$673_CMP $flatten\control.\uart0.$procmux$582_CMP }
  Optimizing cells in module \pulse_gen.
Performed a total of 7 changes.

6.13.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pulse_gen'.
<suppressed ~261 debug messages>
Removed a total of 87 cells.

6.13.13. Executing OPT_DFF pass (perform DFF optimizations).

6.13.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_gen..
Removed 0 unused cells and 87 unused wires.
<suppressed ~1 debug messages>

6.13.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_gen.

6.13.16. Rerunning OPT passes. (Maybe there is more to do..)

6.13.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \pulse_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~32 debug messages>

6.13.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \pulse_gen.
Performed a total of 0 changes.

6.13.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pulse_gen'.
Removed a total of 0 cells.

6.13.20. Executing OPT_DFF pass (perform DFF optimizations).

6.13.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_gen..

6.13.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_gen.

6.13.23. Finished OPT passes. (There is nothing left to do.)

6.14. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 8) from port B of cell pulse_gen.$auto$opt_dff.cc:218:make_patterns_logic$1796 ($ne).
Removed top 1 bits (of 7) from port B of cell pulse_gen.$auto$opt_dff.cc:218:make_patterns_logic$1822 ($ne).
Removed top 1 bits (of 6) from port B of cell pulse_gen.$auto$opt_dff.cc:218:make_patterns_logic$1842 ($ne).
Removed top 1 bits (of 5) from port B of cell pulse_gen.$auto$opt_dff.cc:218:make_patterns_logic$1844 ($ne).
Removed top 1 bits (of 2) from port B of cell pulse_gen.$auto$opt_dff.cc:218:make_patterns_logic$1880 ($ne).
Removed top 1 bits (of 5) from port B of cell pulse_gen.$auto$opt_dff.cc:218:make_patterns_logic$1729 ($ne).
Removed top 2 bits (of 3) from mux cell pulse_gen.$flatten\control.\uart0.$ternary$uart.v:193$148 ($mux).
Removed top 30 bits (of 32) from port B of cell pulse_gen.$flatten\control.\uart0.$gt$uart.v:201$150 ($gt).
Removed top 2 bits (of 3) from mux cell pulse_gen.$flatten\control.\uart0.$ternary$uart.v:226$154 ($mux).
Removed top 1 bits (of 2) from mux cell pulse_gen.$flatten\control.\uart0.$ternary$uart.v:301$161 ($mux).
Removed top 1 bits (of 2) from port B of cell pulse_gen.$flatten\control.\uart0.$procmux$422_CMP0 ($eq).
Removed top 1 bits (of 11) from mux cell pulse_gen.$flatten\control.\uart0.$procmux$427 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$437 ($mux).
Removed top 1 bits (of 8) from port B of cell pulse_gen.$auto$opt_dff.cc:218:make_patterns_logic$1687 ($ne).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$457 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$466 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$473 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$480 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$487 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$502 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$510 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$518 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$534 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$567 ($mux).
Removed top 1 bits (of 3) from port B of cell pulse_gen.$flatten\control.\uart0.$procmux$582_CMP0 ($eq).
Removed top 5 bits (of 15) from mux cell pulse_gen.$flatten\control.\uart0.$procmux$589 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$612 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$630 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$639 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$648 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$657 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$668 ($mux).
Removed top 1 bits (of 3) from port B of cell pulse_gen.$flatten\control.\uart0.$procmux$673_CMP0 ($eq).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$680 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$690 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$710 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$722 ($mux).
Removed top 2 bits (of 3) from port B of cell pulse_gen.$flatten\control.\uart0.$procmux$727_CMP0 ($eq).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$736 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$764 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$791 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$802 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$824 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$835 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$847 ($mux).
Removed cell pulse_gen.$flatten\control.\uart0.$procmux$881 ($mux).
Removed top 5 bits (of 8) from port B of cell pulse_gen.$flatten\control.$procmux$1316_CMP0 ($eq).
Removed top 7 bits (of 8) from port B of cell pulse_gen.$flatten\control.$procmux$1310_CMP0 ($eq).
Removed top 6 bits (of 8) from port B of cell pulse_gen.$flatten\control.$procmux$1256_CMP0 ($eq).
Removed top 6 bits (of 8) from port B of cell pulse_gen.$flatten\control.$procmux$1232_CMP0 ($eq).
Removed top 5 bits (of 8) from port B of cell pulse_gen.$flatten\control.$procmux$1215_CMP0 ($eq).
Removed top 5 bits (of 8) from port B of cell pulse_gen.$flatten\control.$procmux$1199_CMP0 ($eq).
Removed top 5 bits (of 8) from port B of cell pulse_gen.$flatten\control.$procmux$1181_CMP0 ($eq).
Removed cell pulse_gen.$flatten\control.$procmux$1158 ($mux).
Removed cell pulse_gen.$flatten\control.$procmux$1154 ($mux).
Removed cell pulse_gen.$flatten\control.$procmux$1114 ($mux).
Removed top 1 bits (of 2) from mux cell pulse_gen.$flatten\control.$procmux$1112 ($mux).
Removed top 1 bits (of 2) from port B of cell pulse_gen.$flatten\control.$procmux$1109_CMP0 ($eq).
Removed cell pulse_gen.$flatten\control.$procmux$1106 ($mux).
Removed cell pulse_gen.$flatten\control.$procmux$1099 ($mux).
Removed cell pulse_gen.$flatten\control.$procmux$1097 ($mux).
Removed cell pulse_gen.$flatten\control.$procmux$1084 ($mux).
Removed cell pulse_gen.$flatten\control.$procmux$1082 ($mux).
Removed cell pulse_gen.$flatten\control.$procmux$1080 ($mux).
Removed top 1 bits (of 3) from port B of cell pulse_gen.$flatten\control.$procmux$1074_CMP0 ($eq).
Removed cell pulse_gen.$flatten\control.$procmux$1070 ($mux).
Removed cell pulse_gen.$flatten\control.$procmux$1066 ($mux).
Removed top 2 bits (of 3) from port B of cell pulse_gen.$flatten\control.$procmux$1061_CMP0 ($eq).
Removed top 28 bits (of 32) from port B of cell pulse_gen.$flatten\control.$add$pulse_control.v:165$98 ($add).
Removed top 26 bits (of 32) from port Y of cell pulse_gen.$flatten\control.$add$pulse_control.v:165$98 ($add).
Removed top 26 bits (of 32) from port B of cell pulse_gen.$flatten\control.$shl$pulse_control.v:0$94 ($shl).
Removed top 24 bits (of 32) from port Y of cell pulse_gen.$flatten\control.$and$pulse_control.v:0$92 ($and).
Removed top 26 bits (of 32) from port B of cell pulse_gen.$flatten\control.$shl$pulse_control.v:0$91 ($shl).
Removed top 1 bits (of 3) from port B of cell pulse_gen.$auto$opt_dff.cc:218:make_patterns_logic$1983 ($ne).
Removed top 1 bits (of 2) from port B of cell pulse_gen.$auto$opt_dff.cc:218:make_patterns_logic$1979 ($ne).
Removed top 2 bits (of 3) from port B of cell pulse_gen.$auto$opt_dff.cc:218:make_patterns_logic$1973 ($ne).
Removed top 1 bits (of 2) from port B of cell pulse_gen.$auto$opt_dff.cc:218:make_patterns_logic$2001 ($ne).
Removed cell pulse_gen.$flatten\pulses.$procmux$1570 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1554 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1552 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1550 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1548 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1544 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1540 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1526 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1510 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1508 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1506 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1504 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1476 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1474 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1472 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1470 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1466 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1462 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1452 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1450 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1448 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1446 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1426 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1424 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1422 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1420 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1418 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1416 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1405 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1403 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1401 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1399 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1385 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1383 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1381 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1379 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1365 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1363 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1361 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1359 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1357 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1355 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1353 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1342 ($mux).
Removed top 16 bits (of 32) from port B of cell pulse_gen.$flatten\pulses.$procmux$1343_CMP0 ($eq).
Removed cell pulse_gen.$flatten\pulses.$procmux$1340 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1338 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1336 ($mux).
Removed top 16 bits (of 32) from port B of cell pulse_gen.$flatten\pulses.$procmux$1337_CMP0 ($eq).
Removed cell pulse_gen.$flatten\pulses.$procmux$1334 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1332 ($mux).
Removed cell pulse_gen.$flatten\pulses.$procmux$1330 ($mux).
Removed top 31 bits (of 32) from port B of cell pulse_gen.$flatten\pulses.$add$pulses.v:311$67 ($add).
Removed top 29 bits (of 32) from port B of cell pulse_gen.$flatten\pulses.$sub$pulses.v:302$65 ($sub).
Removed top 7 bits (of 32) from port Y of cell pulse_gen.$flatten\pulses.$sub$pulses.v:302$65 ($sub).
Removed top 31 bits (of 32) from port B of cell pulse_gen.$flatten\pulses.$add$pulses.v:299$64 ($add).
Removed top 24 bits (of 32) from port Y of cell pulse_gen.$flatten\pulses.$add$pulses.v:299$64 ($add).
Removed top 29 bits (of 32) from port B of cell pulse_gen.$flatten\pulses.$sub$pulses.v:294$63 ($sub).
Removed top 15 bits (of 32) from port B of cell pulse_gen.$flatten\pulses.$add$pulses.v:294$62 ($add).
Removed cell pulse_gen.$flatten\pulses.$ternary$pulses.v:277$56 ($mux).
Removed top 31 bits (of 32) from port B of cell pulse_gen.$flatten\pulses.$sub$pulses.v:277$53 ($sub).
Removed top 23 bits (of 32) from port Y of cell pulse_gen.$flatten\pulses.$sub$pulses.v:277$53 ($sub).
Removed top 28 bits (of 32) from port B of cell pulse_gen.$flatten\pulses.$add$pulses.v:266$52 ($add).
Removed top 16 bits (of 32) from port Y of cell pulse_gen.$flatten\pulses.$add$pulses.v:266$52 ($add).
Removed top 16 bits (of 32) from port A of cell pulse_gen.$flatten\pulses.$add$pulses.v:266$52 ($add).
Removed cell pulse_gen.$flatten\pulses.$ternary$pulses.v:256$45 ($mux).
Removed top 31 bits (of 32) from mux cell pulse_gen.$flatten\pulses.$ternary$pulses.v:256$43 ($mux).
Removed top 31 bits (of 32) from port B of cell pulse_gen.$flatten\pulses.$gt$pulses.v:256$42 ($gt).
Removed top 29 bits (of 32) from port B of cell pulse_gen.$flatten\pulses.$sub$pulses.v:243$40 ($sub).
Removed top 15 bits (of 32) from port B of cell pulse_gen.$flatten\pulses.$add$pulses.v:243$39 ($add).
Removed top 28 bits (of 32) from port B of cell pulse_gen.$flatten\pulses.$sub$pulses.v:240$34 ($sub).
Removed top 15 bits (of 32) from port Y of cell pulse_gen.$flatten\pulses.$sub$pulses.v:240$34 ($sub).
Removed top 15 bits (of 32) from port Y of cell pulse_gen.$flatten\pulses.$add$pulses.v:239$33 ($add).
Removed top 31 bits (of 32) from mux cell pulse_gen.$flatten\pulses.$ternary$pulses.v:233$32 ($mux).
Removed top 31 bits (of 32) from port B of cell pulse_gen.$flatten\pulses.$gt$pulses.v:233$31 ($gt).
Removed top 31 bits (of 32) from mux cell pulse_gen.$flatten\pulses.$ternary$pulses.v:203$30 ($mux).
Removed top 31 bits (of 32) from mux cell pulse_gen.$flatten\pulses.$ternary$pulses.v:195$27 ($mux).
Removed top 31 bits (of 32) from mux cell pulse_gen.$flatten\pulses.$ternary$pulses.v:196$26 ($mux).
Removed top 31 bits (of 32) from mux cell pulse_gen.$flatten\pulses.$ternary$pulses.v:197$25 ($mux).
Removed top 31 bits (of 32) from mux cell pulse_gen.$flatten\pulses.$ternary$pulses.v:192$19 ($mux).
Removed top 8 bits (of 32) from port Y of cell pulse_gen.$flatten\pulses.$sub$pulses.v:188$15 ($sub).
Removed top 8 bits (of 32) from port A of cell pulse_gen.$flatten\pulses.$sub$pulses.v:188$15 ($sub).
Removed top 8 bits (of 32) from port Y of cell pulse_gen.$flatten\pulses.$sub$pulses.v:188$14 ($sub).
Removed top 8 bits (of 32) from port A of cell pulse_gen.$flatten\pulses.$sub$pulses.v:188$14 ($sub).
Removed top 28 bits (of 32) from port B of cell pulse_gen.$flatten\pulses.$add$pulses.v:166$7 ($add).
Removed top 16 bits (of 32) from port Y of cell pulse_gen.$flatten\pulses.$add$pulses.v:166$7 ($add).
Removed top 16 bits (of 32) from port A of cell pulse_gen.$flatten\pulses.$add$pulses.v:166$7 ($add).
Removed top 16 bits (of 32) from port Y of cell pulse_gen.$flatten\pulses.$add$pulses.v:166$6 ($add).
Removed top 26 bits (of 32) from wire pulse_gen.$flatten\control.$add$pulse_control.v:165$98_Y.
Removed top 24 bits (of 32) from wire pulse_gen.$flatten\control.$and$pulse_control.v:0$92_Y.
Removed top 1 bits (of 2) from wire pulse_gen.$flatten\control.$procmux$1112_Y.
Removed top 1 bits (of 8) from wire pulse_gen.$flatten\control.\uart0.$3\tx_data[7:0].
Removed top 1 bits (of 8) from wire pulse_gen.$flatten\control.\uart0.$4\tx_data[7:0].
Removed top 1 bits (of 11) from wire pulse_gen.$flatten\control.\uart0.$5\tx_clk[10:0].
Removed top 2 bits (of 3) from wire pulse_gen.$flatten\control.\uart0.$6\recv_state[2:0].
Removed top 5 bits (of 15) from wire pulse_gen.$flatten\control.\uart0.$8\rx_clk[14:0].
Removed top 2 bits (of 3) from wire pulse_gen.$flatten\control.\uart0.$ternary$uart.v:193$148_Y.
Removed top 1 bits (of 2) from wire pulse_gen.$flatten\control.\uart0.$ternary$uart.v:301$161_Y.
Removed top 16 bits (of 32) from wire pulse_gen.$flatten\pulses.$add$pulses.v:166$6_Y.
Removed top 15 bits (of 32) from wire pulse_gen.$flatten\pulses.$add$pulses.v:239$33_Y.
Removed top 8 bits (of 32) from wire pulse_gen.$flatten\pulses.$sub$pulses.v:188$14_Y.
Removed top 8 bits (of 32) from wire pulse_gen.$flatten\pulses.$sub$pulses.v:188$15_Y.
Removed top 31 bits (of 32) from wire pulse_gen.$flatten\pulses.$ternary$pulses.v:192$19_Y.
Removed top 31 bits (of 32) from wire pulse_gen.$flatten\pulses.$ternary$pulses.v:195$27_Y.
Removed top 31 bits (of 32) from wire pulse_gen.$flatten\pulses.$ternary$pulses.v:197$25_Y.
Removed top 31 bits (of 32) from wire pulse_gen.$flatten\pulses.$ternary$pulses.v:203$30_Y.
Removed top 31 bits (of 32) from wire pulse_gen.$flatten\pulses.$ternary$pulses.v:256$43_Y.

6.15. Executing PEEPOPT pass (run peephole optimizers).

6.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_gen..
Removed 0 unused cells and 112 unused wires.
<suppressed ~1 debug messages>

6.17. Executing SHARE pass (SAT-based resource sharing).

6.18. Executing TECHMAP pass (map to technology primitives).

6.18.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

6.18.2. Continuing TECHMAP pass.
Using template $paramod$5c6790619fdd520f2101529d9884f145abb8b880\_90_lut_cmp_ for cells of type $gt.
No more expansions possible.
<suppressed ~196 debug messages>

6.19. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_gen.
<suppressed ~2 debug messages>

6.20. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_gen..
Removed 0 unused cells and 5 unused wires.
<suppressed ~1 debug messages>

6.21. Executing TECHMAP pass (map to technology primitives).

6.21.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/mul2dsp.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/mul2dsp.v' to AST representation.
Generating RTLIL representation for module `\_80_mul'.
Generating RTLIL representation for module `\_90_soft_mul'.
Successfully finished Verilog frontend.

6.21.2. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ecp5/dsp_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ecp5/dsp_map.v' to AST representation.
Generating RTLIL representation for module `\$__MUL18X18'.
Successfully finished Verilog frontend.

6.21.3. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~5 debug messages>

6.22. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module pulse_gen:
  creating $macc model for $flatten\control.$add$pulse_control.v:165$98 ($add).
  creating $macc model for $flatten\control.$add$pulse_control.v:181$100 ($add).
  creating $macc model for $flatten\control.$add$pulse_control.v:181$101 ($add).
  creating $macc model for $flatten\control.$add$pulse_control.v:181$102 ($add).
  creating $macc model for $flatten\control.$add$pulse_control.v:195$103 ($add).
  creating $macc model for $flatten\control.\uart0.$add$uart.v:189$145 ($add).
  creating $macc model for $flatten\control.\uart0.$sub$uart.v:145$138 ($sub).
  creating $macc model for $flatten\control.\uart0.$sub$uart.v:149$140 ($sub).
  creating $macc model for $flatten\control.\uart0.$sub$uart.v:192$146 ($sub).
  creating $macc model for $flatten\control.\uart0.$sub$uart.v:210$151 ($sub).
  creating $macc model for $flatten\control.\uart0.$sub$uart.v:283$159 ($sub).
  creating $macc model for $flatten\pulses.$add$pulses.v:163$2 ($add).
  creating $macc model for $flatten\pulses.$add$pulses.v:164$3 ($add).
  creating $macc model for $flatten\pulses.$add$pulses.v:164$4 ($add).
  creating $macc model for $flatten\pulses.$add$pulses.v:165$5 ($add).
  creating $macc model for $flatten\pulses.$add$pulses.v:166$6 ($add).
  creating $macc model for $flatten\pulses.$add$pulses.v:166$7 ($add).
  creating $macc model for $flatten\pulses.$add$pulses.v:239$33 ($add).
  creating $macc model for $flatten\pulses.$add$pulses.v:242$36 ($add).
  creating $macc model for $flatten\pulses.$add$pulses.v:243$39 ($add).
  creating $macc model for $flatten\pulses.$add$pulses.v:264$47 ($add).
  creating $macc model for $flatten\pulses.$add$pulses.v:264$48 ($add).
  creating $macc model for $flatten\pulses.$add$pulses.v:265$51 ($add).
  creating $macc model for $flatten\pulses.$add$pulses.v:266$52 ($add).
  creating $macc model for $flatten\pulses.$add$pulses.v:293$60 ($add).
  creating $macc model for $flatten\pulses.$add$pulses.v:294$62 ($add).
  creating $macc model for $flatten\pulses.$add$pulses.v:299$64 ($add).
  creating $macc model for $flatten\pulses.$add$pulses.v:311$67 ($add).
  creating $macc model for $flatten\pulses.$sub$pulses.v:188$14 ($sub).
  creating $macc model for $flatten\pulses.$sub$pulses.v:188$15 ($sub).
  creating $macc model for $flatten\pulses.$sub$pulses.v:240$34 ($sub).
  creating $macc model for $flatten\pulses.$sub$pulses.v:243$40 ($sub).
  creating $macc model for $flatten\pulses.$sub$pulses.v:277$53 ($sub).
  creating $macc model for $flatten\pulses.$sub$pulses.v:294$63 ($sub).
  creating $macc model for $flatten\pulses.$sub$pulses.v:302$65 ($sub).
  merging $macc model for $flatten\pulses.$add$pulses.v:294$62 into $flatten\pulses.$sub$pulses.v:294$63.
  merging $macc model for $flatten\pulses.$add$pulses.v:243$39 into $flatten\pulses.$sub$pulses.v:243$40.
  merging $macc model for $flatten\pulses.$add$pulses.v:264$47 into $flatten\pulses.$add$pulses.v:264$48.
  merging $macc model for $flatten\pulses.$add$pulses.v:166$6 into $flatten\pulses.$add$pulses.v:166$7.
  merging $macc model for $flatten\pulses.$add$pulses.v:164$3 into $flatten\pulses.$add$pulses.v:164$4.
  merging $macc model for $flatten\control.$add$pulse_control.v:181$101 into $flatten\control.$add$pulse_control.v:181$102.
  merging $macc model for $flatten\control.$add$pulse_control.v:181$100 into $flatten\control.$add$pulse_control.v:181$102.
  creating $alu model for $macc $flatten\pulses.$add$pulses.v:311$67.
  creating $alu model for $macc $flatten\pulses.$add$pulses.v:299$64.
  creating $alu model for $macc $flatten\pulses.$sub$pulses.v:188$14.
  creating $alu model for $macc $flatten\pulses.$add$pulses.v:293$60.
  creating $alu model for $macc $flatten\pulses.$add$pulses.v:266$52.
  creating $alu model for $macc $flatten\pulses.$add$pulses.v:265$51.
  creating $alu model for $macc $flatten\pulses.$sub$pulses.v:240$34.
  creating $alu model for $macc $flatten\pulses.$sub$pulses.v:188$15.
  creating $alu model for $macc $flatten\pulses.$add$pulses.v:242$36.
  creating $alu model for $macc $flatten\pulses.$add$pulses.v:239$33.
  creating $alu model for $macc $flatten\pulses.$add$pulses.v:165$5.
  creating $alu model for $macc $flatten\pulses.$sub$pulses.v:277$53.
  creating $alu model for $macc $flatten\pulses.$add$pulses.v:163$2.
  creating $alu model for $macc $flatten\control.\uart0.$sub$uart.v:283$159.
  creating $alu model for $macc $flatten\control.\uart0.$sub$uart.v:210$151.
  creating $alu model for $macc $flatten\control.\uart0.$sub$uart.v:192$146.
  creating $alu model for $macc $flatten\control.\uart0.$sub$uart.v:149$140.
  creating $alu model for $macc $flatten\control.\uart0.$sub$uart.v:145$138.
  creating $alu model for $macc $flatten\control.\uart0.$add$uart.v:189$145.
  creating $alu model for $macc $flatten\control.$add$pulse_control.v:195$103.
  creating $alu model for $macc $flatten\pulses.$sub$pulses.v:302$65.
  creating $alu model for $macc $flatten\control.$add$pulse_control.v:165$98.
  creating $macc cell for $flatten\pulses.$sub$pulses.v:243$40: $auto$alumacc.cc:365:replace_macc$2104
  creating $macc cell for $flatten\pulses.$add$pulses.v:264$48: $auto$alumacc.cc:365:replace_macc$2105
  creating $macc cell for $flatten\control.$add$pulse_control.v:181$102: $auto$alumacc.cc:365:replace_macc$2106
  creating $macc cell for $flatten\pulses.$sub$pulses.v:294$63: $auto$alumacc.cc:365:replace_macc$2107
  creating $macc cell for $flatten\pulses.$add$pulses.v:166$7: $auto$alumacc.cc:365:replace_macc$2108
  creating $macc cell for $flatten\pulses.$add$pulses.v:164$4: $auto$alumacc.cc:365:replace_macc$2109
  creating $alu model for $flatten\pulses.$gt$pulses.v:233$31 ($gt): new $alu
  creating $alu model for $flatten\pulses.$gt$pulses.v:256$42 ($gt): new $alu
  creating $alu model for $flatten\pulses.$lt$pulses.v:191$17 ($lt): new $alu
  creating $alu model for $flatten\pulses.$lt$pulses.v:192$18 ($lt): new $alu
  creating $alu model for $flatten\pulses.$lt$pulses.v:194$21 ($lt): new $alu
  creating $alu model for $flatten\pulses.$lt$pulses.v:195$22 ($lt): new $alu
  creating $alu model for $flatten\pulses.$lt$pulses.v:196$23 ($lt): new $alu
  creating $alu model for $flatten\pulses.$lt$pulses.v:197$24 ($lt): new $alu
  creating $alu model for $flatten\pulses.$lt$pulses.v:203$29 ($lt): new $alu
  creating $alu model for $flatten\pulses.$lt$pulses.v:256$41 ($lt): new $alu
  creating $alu model for $flatten\pulses.$lt$pulses.v:291$59 ($lt): new $alu
  creating $alu model for $flatten\pulses.$lt$pulses.v:311$66 ($lt): new $alu
  creating $alu model for $flatten\pulses.$eq$pulses.v:277$54 ($eq): merged with $flatten\pulses.$lt$pulses.v:291$59.
  creating $alu cell for $flatten\pulses.$lt$pulses.v:311$66: $auto$alumacc.cc:485:replace_alu$2122
  creating $alu cell for $flatten\pulses.$lt$pulses.v:291$59, $flatten\pulses.$eq$pulses.v:277$54: $auto$alumacc.cc:485:replace_alu$2127
  creating $alu cell for $flatten\pulses.$lt$pulses.v:256$41: $auto$alumacc.cc:485:replace_alu$2134
  creating $alu cell for $flatten\pulses.$lt$pulses.v:203$29: $auto$alumacc.cc:485:replace_alu$2139
  creating $alu cell for $flatten\pulses.$lt$pulses.v:197$24: $auto$alumacc.cc:485:replace_alu$2150
  creating $alu cell for $flatten\pulses.$lt$pulses.v:196$23: $auto$alumacc.cc:485:replace_alu$2161
  creating $alu cell for $flatten\pulses.$lt$pulses.v:195$22: $auto$alumacc.cc:485:replace_alu$2172
  creating $alu cell for $flatten\pulses.$lt$pulses.v:194$21: $auto$alumacc.cc:485:replace_alu$2183
  creating $alu cell for $flatten\pulses.$lt$pulses.v:192$18: $auto$alumacc.cc:485:replace_alu$2194
  creating $alu cell for $flatten\pulses.$lt$pulses.v:191$17: $auto$alumacc.cc:485:replace_alu$2205
  creating $alu cell for $flatten\pulses.$gt$pulses.v:256$42: $auto$alumacc.cc:485:replace_alu$2216
  creating $alu cell for $flatten\pulses.$gt$pulses.v:233$31: $auto$alumacc.cc:485:replace_alu$2221
  creating $alu cell for $flatten\control.$add$pulse_control.v:165$98: $auto$alumacc.cc:485:replace_alu$2226
  creating $alu cell for $flatten\pulses.$sub$pulses.v:302$65: $auto$alumacc.cc:485:replace_alu$2229
  creating $alu cell for $flatten\control.$add$pulse_control.v:195$103: $auto$alumacc.cc:485:replace_alu$2232
  creating $alu cell for $flatten\control.\uart0.$add$uart.v:189$145: $auto$alumacc.cc:485:replace_alu$2235
  creating $alu cell for $flatten\control.\uart0.$sub$uart.v:145$138: $auto$alumacc.cc:485:replace_alu$2238
  creating $alu cell for $flatten\control.\uart0.$sub$uart.v:149$140: $auto$alumacc.cc:485:replace_alu$2241
  creating $alu cell for $flatten\control.\uart0.$sub$uart.v:192$146: $auto$alumacc.cc:485:replace_alu$2244
  creating $alu cell for $flatten\control.\uart0.$sub$uart.v:210$151: $auto$alumacc.cc:485:replace_alu$2247
  creating $alu cell for $flatten\control.\uart0.$sub$uart.v:283$159: $auto$alumacc.cc:485:replace_alu$2250
  creating $alu cell for $flatten\pulses.$sub$pulses.v:277$53: $auto$alumacc.cc:485:replace_alu$2253
  creating $alu cell for $flatten\pulses.$add$pulses.v:165$5: $auto$alumacc.cc:485:replace_alu$2256
  creating $alu cell for $flatten\pulses.$add$pulses.v:163$2: $auto$alumacc.cc:485:replace_alu$2259
  creating $alu cell for $flatten\pulses.$add$pulses.v:239$33: $auto$alumacc.cc:485:replace_alu$2262
  creating $alu cell for $flatten\pulses.$add$pulses.v:242$36: $auto$alumacc.cc:485:replace_alu$2265
  creating $alu cell for $flatten\pulses.$sub$pulses.v:188$15: $auto$alumacc.cc:485:replace_alu$2268
  creating $alu cell for $flatten\pulses.$sub$pulses.v:240$34: $auto$alumacc.cc:485:replace_alu$2271
  creating $alu cell for $flatten\pulses.$add$pulses.v:265$51: $auto$alumacc.cc:485:replace_alu$2274
  creating $alu cell for $flatten\pulses.$add$pulses.v:266$52: $auto$alumacc.cc:485:replace_alu$2277
  creating $alu cell for $flatten\pulses.$add$pulses.v:293$60: $auto$alumacc.cc:485:replace_alu$2280
  creating $alu cell for $flatten\pulses.$sub$pulses.v:188$14: $auto$alumacc.cc:485:replace_alu$2283
  creating $alu cell for $flatten\pulses.$add$pulses.v:299$64: $auto$alumacc.cc:485:replace_alu$2286
  creating $alu cell for $flatten\pulses.$add$pulses.v:311$67: $auto$alumacc.cc:485:replace_alu$2289
  created 34 $alu and 6 $macc cells.

6.23. Executing OPT pass (performing simple optimizations).

6.23.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_gen.
<suppressed ~9 debug messages>

6.23.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pulse_gen'.
Removed a total of 0 cells.

6.23.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \pulse_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~30 debug messages>

6.23.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \pulse_gen.
    New ctrl vector for $pmux cell $flatten\control.\uart0.$procmux$899: { $flatten\control.\uart0.$procmux$673_CMP $auto$opt_reduce.cc:134:opt_mux$2293 }
    New ctrl vector for $pmux cell $flatten\control.\uart0.$procmux$908: { $flatten\control.\uart0.$procmux$673_CMP $auto$opt_reduce.cc:134:opt_mux$2295 }
  Optimizing cells in module \pulse_gen.
Performed a total of 2 changes.

6.23.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pulse_gen'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

6.23.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $auto$opt_dff.cc:764:run$1755 ($dffe) from module pulse_gen (D = $flatten\pulses.$add$pulses.v:264$48_Y [31:17], Q = \pulses.cdelay [31:17], rval = 15'000000000000000).

6.23.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_gen..
Removed 16 unused cells and 31 unused wires.
<suppressed ~17 debug messages>

6.23.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_gen.

6.23.9. Rerunning OPT passes. (Maybe there is more to do..)

6.23.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \pulse_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~30 debug messages>

6.23.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \pulse_gen.
Performed a total of 0 changes.

6.23.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pulse_gen'.
Removed a total of 0 cells.

6.23.13. Executing OPT_DFF pass (perform DFF optimizations).

6.23.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_gen..

6.23.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_gen.

6.23.16. Finished OPT passes. (There is nothing left to do.)

6.24. Executing MEMORY pass.

6.24.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

6.24.2. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

6.24.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_gen..

6.24.4. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

6.24.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_gen..

6.24.6. Executing MEMORY_COLLECT pass (generating $mem cells).

6.25. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_gen..

6.26. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).

6.27. Executing TECHMAP pass (map to technology primitives).

6.27.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ecp5/brams_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ecp5/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__ECP5_DP16KD'.
Generating RTLIL representation for module `\$__ECP5_PDPW16KD'.
Successfully finished Verilog frontend.

6.27.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

6.28. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).

6.29. Executing TECHMAP pass (map to technology primitives).

6.29.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ecp5/lutrams_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ecp5/lutrams_map.v' to AST representation.
Generating RTLIL representation for module `\$__TRELLIS_DPR16X4'.
Successfully finished Verilog frontend.

6.29.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

6.30. Executing OPT pass (performing simple optimizations).

6.30.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_gen.
<suppressed ~40 debug messages>

6.30.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pulse_gen'.
Removed a total of 0 cells.

6.30.3. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $auto$opt_dff.cc:764:run$2034 ($dffe) from module pulse_gen (D = $flatten\control.$procmux$1156_Y, Q = \control.transmit, rval = 1'0).
Adding SRST signal on $auto$opt_dff.cc:764:run$2007 ($dffe) from module pulse_gen (D = $flatten\control.$procmux$1122_Y, Q = \control.writestate, rval = 1'0).
Adding SRST signal on $auto$opt_dff.cc:764:run$2004 ($dffe) from module pulse_gen (D = $auto$wreduce.cc:454:run$2085 [0], Q = \control.readstate [0], rval = 1'0).
Adding SRST signal on $auto$opt_dff.cc:764:run$1995 ($dffe) from module pulse_gen (D = $auto$wreduce.cc:454:run$2083 [5:0], Q = \control.readcount, rval = 6'000000).
Adding SRST signal on $auto$opt_dff.cc:764:run$1971 ($dffe) from module pulse_gen (D = $flatten\control.\uart0.$4\rx_samples[3:0], Q = \control.uart0.rx_samples, rval = 4'0000).
Adding SRST signal on $auto$opt_dff.cc:764:run$1956 ($dffe) from module pulse_gen (D = $flatten\control.\uart0.$4\rx_sample_countdown[3:0], Q = \control.uart0.rx_sample_countdown, rval = 4'0101).
Adding SRST signal on $auto$opt_dff.cc:764:run$1930 ($dffe) from module pulse_gen (D = $flatten\control.\uart0.$4\rx_bits_remaining[3:0], Q = \control.uart0.rx_bits_remaining, rval = 4'1000).
Adding SRST signal on $auto$opt_dff.cc:764:run$1912 ($dffe) from module pulse_gen (D = $flatten\control.\uart0.$3\tx_out[0:0], Q = \control.uart0.tx_out, rval = 1'0).
Adding SRST signal on $auto$opt_dff.cc:764:run$1896 ($dffe) from module pulse_gen (D = $flatten\control.\uart0.$3\tx_bits_remaining[3:0], Q = \control.uart0.tx_bits_remaining, rval = 4'1000).
Adding SRST signal on $auto$opt_dff.cc:764:run$1885 ($dffe) from module pulse_gen (D = \control.tx_byte [7], Q = \control.uart0.tx_data [7], rval = 1'0).

6.30.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_gen..
Removed 10 unused cells and 14 unused wires.
<suppressed ~11 debug messages>

6.30.5. Rerunning OPT passes. (Removed registers in this run.)

6.30.6. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_gen.

6.30.7. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pulse_gen'.
Removed a total of 0 cells.

6.30.8. Executing OPT_DFF pass (perform DFF optimizations).

6.30.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_gen..

6.30.10. Finished fast OPT passes.

6.31. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

6.32. Executing OPT pass (performing simple optimizations).

6.32.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_gen.

6.32.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pulse_gen'.
Removed a total of 0 cells.

6.32.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \pulse_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~26 debug messages>

6.32.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \pulse_gen.
    Consolidated identical input bits for $mux cell $flatten\control.$procmux$1068:
      Old ports: A=3'010, B=3'000, Y=$flatten\control.$procmux$1068_Y
      New ports: A=1'1, B=1'0, Y=$flatten\control.$procmux$1068_Y [1]
      New connections: { $flatten\control.$procmux$1068_Y [2] $flatten\control.$procmux$1068_Y [0] } = 2'00
    Consolidated identical input bits for $mux cell $flatten\control.$procmux$1108:
      Old ports: A={ 1'0 $auto$wreduce.cc:454:run$2085 [0] }, B=2'00, Y=$flatten\control.$procmux$1108_Y
      New ports: A=$auto$wreduce.cc:454:run$2085 [0], B=1'0, Y=$flatten\control.$procmux$1108_Y [0]
      New connections: $flatten\control.$procmux$1108_Y [1] = 1'0
    Consolidated identical input bits for $mux cell $flatten\control.\uart0.$procmux$427:
      Old ports: A=10'1000100000, B=10'0011100010, Y=$auto$wreduce.cc:454:run$2088 [9:0]
      New ports: A=2'10, B=2'01, Y={ $auto$wreduce.cc:454:run$2088 [9] $auto$wreduce.cc:454:run$2088 [1] }
      New connections: { $auto$wreduce.cc:454:run$2088 [8:2] $auto$wreduce.cc:454:run$2088 [0] } = { 1'0 $auto$wreduce.cc:454:run$2088 [1] $auto$wreduce.cc:454:run$2088 [1] 5'10000 }
    Consolidated identical input bits for $mux cell $flatten\control.\uart0.$procmux$577:
      Old ports: A=3'100, B=3'010, Y=$flatten\control.\uart0.$7\recv_state[2:0]
      New ports: A=2'10, B=2'01, Y=$flatten\control.\uart0.$7\recv_state[2:0] [2:1]
      New connections: $flatten\control.\uart0.$7\recv_state[2:0] [0] = 1'0
    Consolidated identical input bits for $mux cell $flatten\control.\uart0.$procmux$589:
      Old ports: A=10'1001110001, B=10'0111010100, Y=$auto$wreduce.cc:454:run$2090 [9:0]
      New ports: A=2'01, B=2'10, Y={ $auto$wreduce.cc:454:run$2090 [2] $auto$wreduce.cc:454:run$2090 [0] }
      New connections: { $auto$wreduce.cc:454:run$2090 [9:3] $auto$wreduce.cc:454:run$2090 [1] } = { $auto$wreduce.cc:454:run$2090 [0] $auto$wreduce.cc:454:run$2090 [2] $auto$wreduce.cc:454:run$2090 [2] 1'1 $auto$wreduce.cc:454:run$2090 [0] 3'100 }
    Consolidated identical input bits for $mux cell $flatten\control.\uart0.$procmux$601:
      Old ports: A={ 1'0 \control.uart0.rx_data [7:1] }, B={ 1'1 \control.uart0.rx_data [7:1] }, Y=$flatten\control.\uart0.$0\rx_data[7:0]
      New ports: A=1'0, B=1'1, Y=$flatten\control.\uart0.$0\rx_data[7:0] [7]
      New connections: $flatten\control.\uart0.$0\rx_data[7:0] [6:0] = \control.uart0.rx_data [7:1]
    Consolidated identical input bits for $mux cell $flatten\control.\uart0.$procmux$750:
      Old ports: A=3'010, B=3'110, Y=$flatten\control.\uart0.$4\recv_state[2:0]
      New ports: A=1'0, B=1'1, Y=$flatten\control.\uart0.$4\recv_state[2:0] [2]
      New connections: $flatten\control.\uart0.$4\recv_state[2:0] [1:0] = 2'10
    Consolidated identical input bits for $mux cell $flatten\control.\uart0.$ternary$uart.v:247$156:
      Old ports: A=3'000, B=3'101, Y=$flatten\control.\uart0.$ternary$uart.v:247$156_Y
      New ports: A=1'0, B=1'1, Y=$flatten\control.\uart0.$ternary$uart.v:247$156_Y [0]
      New connections: $flatten\control.\uart0.$ternary$uart.v:247$156_Y [2:1] = { $flatten\control.\uart0.$ternary$uart.v:247$156_Y [0] 1'0 }
    Consolidated identical input bits for $mux cell $flatten\control.\uart0.$ternary$uart.v:306$162:
      Old ports: A=2'00, B=2'11, Y=$flatten\control.\uart0.$ternary$uart.v:306$162_Y
      New ports: A=1'0, B=1'1, Y=$flatten\control.\uart0.$ternary$uart.v:306$162_Y [0]
      New connections: $flatten\control.\uart0.$ternary$uart.v:306$162_Y [1] = $flatten\control.\uart0.$ternary$uart.v:306$162_Y [0]
  Optimizing cells in module \pulse_gen.
    Consolidated identical input bits for $pmux cell $flatten\control.$procmux$1073:
      Old ports: A=3'000, B={ 6'001010 $flatten\control.$procmux$1068_Y }, Y=$flatten\control.$0\state[2:0]
      New ports: A=2'00, B={ 4'0110 $flatten\control.$procmux$1068_Y [1] 1'0 }, Y=$flatten\control.$0\state[2:0] [1:0]
      New connections: $flatten\control.$0\state[2:0] [2] = 1'0
  Optimizing cells in module \pulse_gen.
Performed a total of 10 changes.

6.32.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pulse_gen'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

6.32.6. Executing OPT_DFF pass (perform DFF optimizations).

6.32.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_gen..
Removed 1 unused cells and 3 unused wires.
<suppressed ~2 debug messages>

6.32.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_gen.

6.32.9. Rerunning OPT passes. (Maybe there is more to do..)

6.32.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \pulse_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~26 debug messages>

6.32.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \pulse_gen.
Performed a total of 0 changes.

6.32.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pulse_gen'.
Removed a total of 0 cells.

6.32.13. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $auto$opt_dff.cc:764:run$2004 ($dffe) from module pulse_gen.
Setting constant 0-bit at position 2 on $auto$opt_dff.cc:764:run$1986 ($dffe) from module pulse_gen.

6.32.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_gen..

6.32.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_gen.
<suppressed ~5 debug messages>

6.32.16. Rerunning OPT passes. (Maybe there is more to do..)

6.32.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \pulse_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~26 debug messages>

6.32.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \pulse_gen.
Performed a total of 0 changes.

6.32.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pulse_gen'.
Removed a total of 0 cells.

6.32.20. Executing OPT_DFF pass (perform DFF optimizations).

6.32.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_gen..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

6.32.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_gen.

6.32.23. Rerunning OPT passes. (Maybe there is more to do..)

6.32.24. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \pulse_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~26 debug messages>

6.32.25. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \pulse_gen.
Performed a total of 0 changes.

6.32.26. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pulse_gen'.
Removed a total of 0 cells.

6.32.27. Executing OPT_DFF pass (perform DFF optimizations).

6.32.28. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_gen..

6.32.29. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_gen.

6.32.30. Finished OPT passes. (There is nothing left to do.)

6.33. Executing TECHMAP pass (map to technology primitives).

6.33.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

6.33.2. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ecp5/arith_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ecp5/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_ecp5_alu'.
Successfully finished Verilog frontend.

6.33.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $dffe.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $sdffce.
Using extmapper simplemap for cells of type $sdff.
Using template $paramod\_80_ecp5_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=32\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
Using extmapper simplemap for cells of type $lut.
Using template $paramod\_80_ecp5_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=11\B_WIDTH=1\Y_WIDTH=11 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=4\B_WIDTH=1\Y_WIDTH=4 for cells of type $alu.
Using extmapper simplemap for cells of type $logic_not.
Using template $paramod\_80_ecp5_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=15\B_WIDTH=1\Y_WIDTH=15 for cells of type $alu.
Using extmapper simplemap for cells of type $mux.
Using template $paramod\_80_ecp5_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=8\B_WIDTH=1\Y_WIDTH=9 for cells of type $alu.
Using extmapper simplemap for cells of type $eq.
Using template $paramod\_90_pmux\WIDTH=2\S_WIDTH=3 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=11\S_WIDTH=2 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=3\S_WIDTH=7 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=15\S_WIDTH=5 for cells of type $pmux.
Using extmapper simplemap for cells of type $dff.
Using template $paramod\_90_pmux\WIDTH=1\S_WIDTH=2 for cells of type $pmux.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=4\Y_WIDTH=4 for cells of type $alu.
Using extmapper maccmap for cells of type $macc.
  add \pulses.cpulse (32 bits, unsigned)
  add { \pulses.delay 1'0 } (17 bits, unsigned)
  add 32'11111111111111111111111111111011 (32 bits, unsigned)
Using template $paramod\_80_ecp5_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=24\B_WIDTH=3\Y_WIDTH=25 for cells of type $alu.
Using extmapper simplemap for cells of type $and.
Using template $paramod$constmap:f1a86313b2935847134cde0e02ff53e41f28add9$paramod$8669418c886d3bd260d664481583c1c71dfc3c9b\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using template $paramod$constmap:65a646296d3e5153eab58e58e05dcc6ed23f3479$paramod$6117e4f67b56bde6aa6a4e39e73a4e382ea036be\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
  add { $flatten\pulses.$sub$pulses.v:240$34_Y [31] $flatten\pulses.$sub$pulses.v:240$34_Y [31] $flatten\pulses.$sub$pulses.v:240$34_Y [31] $flatten\pulses.$sub$pulses.v:240$34_Y [31] $flatten\pulses.$sub$pulses.v:240$34_Y [31] $flatten\pulses.$sub$pulses.v:240$34_Y [31] $flatten\pulses.$sub$pulses.v:240$34_Y [31] $flatten\pulses.$sub$pulses.v:240$34_Y [31] $flatten\pulses.$sub$pulses.v:240$34_Y [31] $flatten\pulses.$sub$pulses.v:240$34_Y [31] $flatten\pulses.$sub$pulses.v:240$34_Y [31] $flatten\pulses.$sub$pulses.v:240$34_Y [31] $flatten\pulses.$sub$pulses.v:240$34_Y [31] $flatten\pulses.$sub$pulses.v:240$34_Y [31] $flatten\pulses.$sub$pulses.v:240$34_Y [31] $flatten\pulses.$sub$pulses.v:240$34_Y [31] $flatten\pulses.$sub$pulses.v:240$34_Y [15:1] \pulses.sdown [0] } (32 bits, unsigned)
  add { \pulses.delay 1'0 } (17 bits, unsigned)
  add 32'11111111111111111111111111111011 (32 bits, unsigned)
Using extmapper simplemap for cells of type $logic_or.
Using template $paramod\_80_ecp5_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=8\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
Using template $paramod\_80_ecp5_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=16\B_WIDTH=16\Y_WIDTH=16 for cells of type $alu.
Using template $paramod\_80_ecp5_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
  add \pulses.p2start (16 bits, unsigned)
  add \pulses.p2width (16 bits, unsigned)
  add 16'0000000000001010 (16 bits, unsigned)
Using template $paramod\_80_ecp5_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=24\B_WIDTH=16\Y_WIDTH=24 for cells of type $alu.
Using template $paramod\_80_ecp5_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=8\B_WIDTH=8\Y_WIDTH=8 for cells of type $alu.
Using template $paramod\_80_ecp5_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=3\B_WIDTH=15\Y_WIDTH=15 for cells of type $alu.
  add \control.vinput [31:24] (8 bits, unsigned)
  add \control.vinput [7:0] (8 bits, unsigned)
  add \control.vinput [15:8] (8 bits, unsigned)
  add \control.vinput [23:16] (8 bits, unsigned)
Using template $paramod\_80_ecp5_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=16\Y_WIDTH=16 for cells of type $alu.
Using template $paramod\_80_ecp5_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=16\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
  add \pulses.cpulse (32 bits, unsigned)
  add \pulses.delay (16 bits, unsigned)
  add \pulses.delay (16 bits, unsigned)
Using template $paramod\_80_ecp5_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=24\B_WIDTH=8\Y_WIDTH=24 for cells of type $alu.
Using template $paramod\_80_ecp5_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=15\B_WIDTH=3\Y_WIDTH=16 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=3\Y_WIDTH=3 for cells of type $alu.
Using template $paramod\_80_ecp5_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=24\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
Using template $paramod\_80_ecp5_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=8\Y_WIDTH=8 for cells of type $alu.
  add \pulses.p1start2 (16 bits, unsigned)
  add \control.delay2 (16 bits, unsigned)
  add \pulses.p1width2 (16 bits, unsigned)
Using template $paramod\_80_ecp5_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=16\B_WIDTH=16\Y_WIDTH=17 for cells of type $alu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=4 for cells of type $lcu.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $logic_and.
Using template $paramod\_90_fa\WIDTH=32 for cells of type $fa.
Using template $paramod\_90_fa\WIDTH=16 for cells of type $fa.
Using template $paramod\_90_fa\WIDTH=8 for cells of type $fa.
Using template $paramod\_90_lcu\WIDTH=3 for cells of type $lcu.
No more expansions possible.
<suppressed ~3945 debug messages>

6.34. Executing OPT pass (performing simple optimizations).

6.34.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_gen.
<suppressed ~3060 debug messages>

6.34.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pulse_gen'.
<suppressed ~2280 debug messages>
Removed a total of 760 cells.

6.34.3. Executing OPT_DFF pass (perform DFF optimizations).
Handling D = Q on $auto$simplemap.cc:559:simplemap_adffe_sdffe_sdffce$5666 ($_SDFFCE_PP0P_) from module pulse_gen (conecting SRST instead).
Setting constant 0-bit at position 0 on $auto$simplemap.cc:559:simplemap_adffe_sdffe_sdffce$5666 ($_SDFFCE_PP0P_) from module pulse_gen.
Handling D = Q on $auto$simplemap.cc:559:simplemap_adffe_sdffe_sdffce$5667 ($_SDFFCE_PP0P_) from module pulse_gen (conecting SRST instead).
Setting constant 0-bit at position 0 on $auto$simplemap.cc:559:simplemap_adffe_sdffe_sdffce$5667 ($_SDFFCE_PP0P_) from module pulse_gen.
Handling D = Q on $auto$simplemap.cc:559:simplemap_adffe_sdffe_sdffce$5668 ($_SDFFCE_PP0P_) from module pulse_gen (conecting SRST instead).
Setting constant 0-bit at position 0 on $auto$simplemap.cc:559:simplemap_adffe_sdffe_sdffce$5668 ($_SDFFCE_PP0P_) from module pulse_gen.

6.34.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_gen..
Removed 1558 unused cells and 3176 unused wires.
<suppressed ~1559 debug messages>

6.34.5. Rerunning OPT passes. (Removed registers in this run.)

6.34.6. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_gen.
<suppressed ~82 debug messages>

6.34.7. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pulse_gen'.
<suppressed ~273 debug messages>
Removed a total of 91 cells.

6.34.8. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $auto$simplemap.cc:442:simplemap_dffe$5543 ($_DFFE_PP_) from module pulse_gen (D = $flatten\control.\uart0.$procmux$863.Y_B [2], Q = \control.uart0.recv_state [2], rval = 1'0).
Adding SRST signal on $auto$simplemap.cc:442:simplemap_dffe$5542 ($_DFFE_PP_) from module pulse_gen (D = $flatten\control.\uart0.$procmux$863.Y_B [1], Q = \control.uart0.recv_state [1], rval = 1'0).
Adding SRST signal on $auto$simplemap.cc:442:simplemap_dffe$5541 ($_DFFE_PP_) from module pulse_gen (D = $flatten\control.\uart0.$procmux$863.Y_B [0], Q = \control.uart0.recv_state [0], rval = 1'1).
Adding SRST signal on $auto$simplemap.cc:442:simplemap_dffe$5362 ($_DFFE_PP_) from module pulse_gen (D = $flatten\control.$procmux$1073.Y_B [1], Q = \control.state [1], rval = 1'0).
Adding SRST signal on $auto$simplemap.cc:442:simplemap_dffe$5361 ($_DFFE_PP_) from module pulse_gen (D = $flatten\control.$procmux$1073.B_AND_S [4], Q = \control.state [0], rval = 1'0).
Adding SRST signal on $auto$simplemap.cc:442:simplemap_dffe$2914 ($_DFFE_PP_) from module pulse_gen (D = \control.uart0.rx_samples [2], Q = \control.uart0.rx_data [7], rval = 1'1).
Adding SRST signal on $auto$simplemap.cc:442:simplemap_dffe$2888 ($_DFFE_PP_) from module pulse_gen (D = $flatten\control.\uart0.$procmux$548.Y_B [1], Q = \control.uart0.tx_state [1], rval = 1'0).
Adding SRST signal on $auto$simplemap.cc:442:simplemap_dffe$2887 ($_DFFE_PP_) from module pulse_gen (D = $flatten\control.\uart0.$procmux$548.Y_B [0], Q = \control.uart0.tx_state [0], rval = 1'1).

6.34.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_gen..
Removed 8 unused cells and 14 unused wires.
<suppressed ~9 debug messages>

6.34.10. Rerunning OPT passes. (Removed registers in this run.)

6.34.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_gen.

6.34.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pulse_gen'.
Removed a total of 0 cells.

6.34.13. Executing OPT_DFF pass (perform DFF optimizations).

6.34.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_gen..

6.34.15. Finished fast OPT passes.

6.35. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_gen..

6.36. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

6.37. Executing TECHMAP pass (map to technology primitives).

6.37.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ecp5/cells_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ecp5/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_DFFE_NP0N_'.
Generating RTLIL representation for module `\$_DFFE_NP1N_'.
Generating RTLIL representation for module `\$_DFFE_PP0N_'.
Generating RTLIL representation for module `\$_DFFE_PP1N_'.
Generating RTLIL representation for module `\$_SDFFE_NP0P_'.
Generating RTLIL representation for module `\$_SDFFE_NP1P_'.
Generating RTLIL representation for module `\$_SDFFE_PP0P_'.
Generating RTLIL representation for module `\$_SDFFE_PP1P_'.
Generating RTLIL representation for module `\$_SDFFE_NP0N_'.
Generating RTLIL representation for module `\$_SDFFE_NP1N_'.
Generating RTLIL representation for module `\$_SDFFE_PP0N_'.
Generating RTLIL representation for module `\$_SDFFE_PP1N_'.
Generating RTLIL representation for module `\FD1P3AX'.
Generating RTLIL representation for module `\FD1P3AY'.
Generating RTLIL representation for module `\FD1P3BX'.
Generating RTLIL representation for module `\FD1P3DX'.
Generating RTLIL representation for module `\FD1P3IX'.
Generating RTLIL representation for module `\FD1P3JX'.
Generating RTLIL representation for module `\FD1S3AX'.
Generating RTLIL representation for module `\FD1S3AY'.
Generating RTLIL representation for module `\FD1S3BX'.
Generating RTLIL representation for module `\FD1S3DX'.
Generating RTLIL representation for module `\FD1S3IX'.
Generating RTLIL representation for module `\FD1S3JX'.
Generating RTLIL representation for module `\IFS1P3BX'.
Generating RTLIL representation for module `\IFS1P3DX'.
Generating RTLIL representation for module `\IFS1P3IX'.
Generating RTLIL representation for module `\IFS1P3JX'.
Generating RTLIL representation for module `\OFS1P3BX'.
Generating RTLIL representation for module `\OFS1P3DX'.
Generating RTLIL representation for module `\OFS1P3IX'.
Generating RTLIL representation for module `\OFS1P3JX'.
Generating RTLIL representation for module `\IB'.
Generating RTLIL representation for module `\IBPU'.
Generating RTLIL representation for module `\IBPD'.
Generating RTLIL representation for module `\OB'.
Generating RTLIL representation for module `\OBZ'.
Generating RTLIL representation for module `\OBZPU'.
Generating RTLIL representation for module `\OBZPD'.
Generating RTLIL representation for module `\OBCO'.
Generating RTLIL representation for module `\BB'.
Generating RTLIL representation for module `\BBPU'.
Generating RTLIL representation for module `\BBPD'.
Generating RTLIL representation for module `\ILVDS'.
Generating RTLIL representation for module `\OLVDS'.
Successfully finished Verilog frontend.

6.37.2. Continuing TECHMAP pass.
Using template $paramod\$_DFFE_PP_\_TECHMAP_WIREINIT_Q_=1'x for cells of type $_DFFE_PP_.
Using template $paramod\$_DFFE_PP_\_TECHMAP_WIREINIT_Q_=1'0 for cells of type $_DFFE_PP_.
Using template $paramod\$_DFFE_PP_\_TECHMAP_WIREINIT_Q_=1'1 for cells of type $_DFFE_PP_.
Using template \$_SDFFE_PP0P_ for cells of type $_SDFFE_PP0P_.
Using template \$_SDFFE_PP1P_ for cells of type $_SDFFE_PP1P_.
Using template $paramod\$_DFFE_PN_\_TECHMAP_WIREINIT_Q_=1'x for cells of type $_DFFE_PN_.
Using template $paramod\$_DFF_P_\_TECHMAP_WIREINIT_Q_=1'x for cells of type $_DFF_P_.
Using template \$_SDFFE_PP0N_ for cells of type $_SDFFE_PP0N_.
Using template \$_SDFF_PP0_ for cells of type $_SDFF_PP0_.
No more expansions possible.
<suppressed ~934 debug messages>

6.38. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_gen.

6.39. Executing SIMPLEMAP pass (map simple cells to gate primitives).

6.40. Executing ECP5_GSR pass (implement FF init values).
Handling GSR in pulse_gen.

6.41. Executing ATTRMVCP pass (move or copy attributes).

6.42. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_gen..
Removed 0 unused cells and 3867 unused wires.
<suppressed ~1 debug messages>

6.43. Executing TECHMAP pass (map to technology primitives).

6.43.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ecp5/latches_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ecp5/latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Successfully finished Verilog frontend.

6.43.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

6.44. Executing ABC pass (technology mapping using ABC).

6.44.1. Extracting gate netlist of module `\pulse_gen' to `<abc-temp-dir>/input.blif'..
Extracted 2207 gates and 3044 wires to a netlist network with 835 inputs and 494 outputs.

6.44.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + dress 
ABC: Total number of equiv classes                =     513.
ABC: Participating nodes from both networks       =    1108.
ABC: Participating nodes from the first network   =     523. (  64.33 % of nodes)
ABC: Participating nodes from the second network  =     585. (  71.96 % of nodes)
ABC: Node pairs (any polarity)                    =     523. (  64.33 % of names can be moved)
ABC: Node pairs (same polarity)                   =     487. (  59.90 % of names can be moved)
ABC: Total runtime =     0.08 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

6.44.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:      812
ABC RESULTS:        internal signals:     1715
ABC RESULTS:           input signals:      835
ABC RESULTS:          output signals:      494
Removing temp directory.
Removed 0 unused cells and 1629 unused wires.

6.45. Executing TECHMAP pass (map to technology primitives).

6.45.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ecp5/cells_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ecp5/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_DFFE_NP0N_'.
Generating RTLIL representation for module `\$_DFFE_NP1N_'.
Generating RTLIL representation for module `\$_DFFE_PP0N_'.
Generating RTLIL representation for module `\$_DFFE_PP1N_'.
Generating RTLIL representation for module `\$_SDFFE_NP0P_'.
Generating RTLIL representation for module `\$_SDFFE_NP1P_'.
Generating RTLIL representation for module `\$_SDFFE_PP0P_'.
Generating RTLIL representation for module `\$_SDFFE_PP1P_'.
Generating RTLIL representation for module `\$_SDFFE_NP0N_'.
Generating RTLIL representation for module `\$_SDFFE_NP1N_'.
Generating RTLIL representation for module `\$_SDFFE_PP0N_'.
Generating RTLIL representation for module `\$_SDFFE_PP1N_'.
Generating RTLIL representation for module `\FD1P3AX'.
Generating RTLIL representation for module `\FD1P3AY'.
Generating RTLIL representation for module `\FD1P3BX'.
Generating RTLIL representation for module `\FD1P3DX'.
Generating RTLIL representation for module `\FD1P3IX'.
Generating RTLIL representation for module `\FD1P3JX'.
Generating RTLIL representation for module `\FD1S3AX'.
Generating RTLIL representation for module `\FD1S3AY'.
Generating RTLIL representation for module `\FD1S3BX'.
Generating RTLIL representation for module `\FD1S3DX'.
Generating RTLIL representation for module `\FD1S3IX'.
Generating RTLIL representation for module `\FD1S3JX'.
Generating RTLIL representation for module `\IFS1P3BX'.
Generating RTLIL representation for module `\IFS1P3DX'.
Generating RTLIL representation for module `\IFS1P3IX'.
Generating RTLIL representation for module `\IFS1P3JX'.
Generating RTLIL representation for module `\OFS1P3BX'.
Generating RTLIL representation for module `\OFS1P3DX'.
Generating RTLIL representation for module `\OFS1P3IX'.
Generating RTLIL representation for module `\OFS1P3JX'.
Generating RTLIL representation for module `\IB'.
Generating RTLIL representation for module `\IBPU'.
Generating RTLIL representation for module `\IBPD'.
Generating RTLIL representation for module `\OB'.
Generating RTLIL representation for module `\OBZ'.
Generating RTLIL representation for module `\OBZPU'.
Generating RTLIL representation for module `\OBZPD'.
Generating RTLIL representation for module `\OBCO'.
Generating RTLIL representation for module `\BB'.
Generating RTLIL representation for module `\BBPU'.
Generating RTLIL representation for module `\BBPD'.
Generating RTLIL representation for module `\ILVDS'.
Generating RTLIL representation for module `\OLVDS'.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

6.45.2. Continuing TECHMAP pass.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=2147418112 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=16777216 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=32'11111111111111110000000000000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111100000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10000000 for cells of type $lut.
Using template $paramod$71aa154df418428cd6a01f4d27a25a77443e3ab0\$lut for cells of type $lut.
Using template $paramod$0d7a58a2521c9f7f639d5074fac2fc6fc0481634\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000000000000 for cells of type $lut.
Using template $paramod$50551b8d943b0c170a72faa9739a5a88f4abce2d\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=15990784 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11101111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011000010111011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011000000001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1001000000001001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=32'10010000000010010000000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=32'11111111111111001100110011000101 for cells of type $lut.
Using template $paramod$746424d0983081829316163db34337ccf8ceb1ee\$lut for cells of type $lut.
Using template $paramod$e10ca4aca4e4c8627be5bb912095a9253494b061\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=32'10010000000000000000000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0110 for cells of type $lut.
Using template $paramod$f8bdca125e424c8e9c5f5e84960e0e034e7c473c\$lut for cells of type $lut.
Using template $paramod$57619346c001bba14f685682aaa48a843cd5a7a5\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1001 for cells of type $lut.
Using template $paramod$5fba6fa4affd3d8cb90b92595f737467c857f3c8\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=32'10000000000000000000000000000000 for cells of type $lut.
Using template $paramod$5547587bde2f1ca8d884d89fe5b90567ab8bb30e\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1001000000000000 for cells of type $lut.
Using template $paramod$e66cc471b5df98af045e5a88d12e8d811847cf43\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00000111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=32'11010101000000000000000011010101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000011111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00001101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=32'10111011000010110000000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1101000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11100001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=65536 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000011100111100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00011100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10101100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=32'10110000000010110000000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=16715792 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=1090519105 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100000011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111110000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01011100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000011110100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=65524 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10010110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=32'11111110111010101010100010000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=32'11101000000101110001011111101000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1001011000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11101000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111111110000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=1\LUT=2'01 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=184549376 for cells of type $lut.
Using template $paramod$ef57d130c6f71db824069c7e8a869a2f72982b4d\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=32767 for cells of type $lut.
Using template $paramod$3f65d67d08903c5550e73c2bf08c9a69293b334c\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111000000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01101001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=401139735 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0110100110010110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11110100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111101011111100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=32'11111111111111110100010011110100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11111000 for cells of type $lut.
Using template $paramod$9d33250da1839730ab1486e228766ef115e77417\$lut for cells of type $lut.
Using template $paramod$23f2b42137b6e8b215ad5c8598193794a4b802a0\$lut for cells of type $lut.
Using template $paramod$afb76ac68df04bf6a3f84627af0ef852f9eae0e8\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110000011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100010001001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=32'11111111111111111111111100001110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000001000100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=32'11110000111110111111000011110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011101111110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111101100001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100111110100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111010011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000010001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=8323072 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=285147136 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=32'11110000101010100011001111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100110111111100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=32'11010000000011010000000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=3342586 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000111000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000001001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=63472 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=201981952 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0101110011001100 for cells of type $lut.
No more expansions possible.
<suppressed ~2298 debug messages>

6.46. Executing OPT_LUT_INS pass (discard unused LUT inputs).
Optimizing LUTs in pulse_gen.
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14357.lut1 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14357.lut2 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14362.lut2 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14374.lut2 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14375.lut1 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14375.lut2 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14698.lut2 (4 -> 1)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14711.lut1 (4 -> 2)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14711.lut2 (4 -> 2)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14711.lut3 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14703.lut1 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14703.lut2 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14703.lut3 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14240.lut2 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14240.lut3 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14240.lut4 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14240.lut5 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14240.lut6 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14241.lut1 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14350.lut2 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14341.lut2 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14355.lut1 (4 -> 3)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14355.lut2 (4 -> 3)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14263.lut1 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14263.lut2 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14270.lut2 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14273.lut1 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14273.lut2 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14274.lut1 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14274.lut2 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14328.lut2 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14317.lut2 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14284.lut2 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14291.lut2 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14295.lut1 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14295.lut2 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14294.lut1 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14294.lut2 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14242.lut2 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14242.lut3 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14242.lut4 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14242.lut5 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14242.lut6 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14244.lut2 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14244.lut3 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14244.lut4 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14244.lut5 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14244.lut6 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14244.lut7 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14245.lut1 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14245.lut2 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14245.lut3 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14245.lut4 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14245.lut5 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14245.lut6 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14245.lut7 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14237.lut1 (4 -> 3)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14167.lut2 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14167.lut3 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14167.lut5 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14167.lut6 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14167.lut7 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14174.lut1 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14174.lut2 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14174.lut3 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14174.lut5 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14174.lut6 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14174.lut7 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14190.lut1 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14167.lut0 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14173.lut0 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14174.lut0 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14175.lut0 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14176.lut0 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14177.lut0 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14178.lut0 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14179.lut0 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14180.lut0 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14181.lut0 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14191.lut1 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14187.lut0 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14195.lut0 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14167.lut1 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14197.lut0 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14206.lut0 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14215.lut1 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14232.lut0 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14240.lut0 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14242.lut0 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14244.lut1 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14246.lut0 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14242.lut1 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14252.lut0 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14257.lut0 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14328.lut1 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14263.lut0 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14270.lut1 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14270.lut0 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14278.lut0 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14284.lut1 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14284.lut0 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14291.lut1 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14291.lut0 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14298.lut0 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14302.lut0 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14306.lut0 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14310.lut0 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14317.lut1 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14320.lut0 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14322.lut0 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14350.lut1 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14329.lut0 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14330.lut0 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14332.lut0 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14336.lut0 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14341.lut1 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14344.lut0 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14350.lut0 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14356.lut1 (4 -> 2)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14355.lut0 (4 -> 3)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14356.lut0 (4 -> 3)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14357.lut0 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14359.lut0 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14369.lut0 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14362.lut1 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14374.lut1 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14377.lut0 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14381.lut0 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14385.lut0 (4 -> 2)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14385.lut1 (4 -> 3)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14392.lut0 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14393.lut0 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14414.lut0 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14425.lut0 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14443.lut0 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14481.lut0 (4 -> 3)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14481.lut1 (4 -> 1)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14624.lut0 (4 -> 1)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14631.lut0 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14662.lut0 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14664.lut0 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14710.lut1 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14698.lut0 (4 -> 1)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14698.lut1 (4 -> 1)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14711.lut0 (4 -> 2)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14714.lut1 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14712.lut1 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14938.lut0 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14939.lut0 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14940.lut0 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14941.lut0 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14942.lut0 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14943.lut0 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14944.lut0 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14945.lut0 (4 -> 0)
  Optimizing lut $abc$14165$auto$blifparse.cc:498:parse_blif$14240.lut1 (4 -> 0)
Removed 0 unused cells and 1791 unused wires.

6.47. Executing AUTONAME pass.
Renamed 78309 objects in module pulse_gen (133 iterations).
<suppressed ~3285 debug messages>

6.48. Executing HIERARCHY pass (managing design hierarchy).

6.48.1. Analyzing design hierarchy..
Top module:  \pulse_gen

6.48.2. Analyzing design hierarchy..
Top module:  \pulse_gen
Removed 0 unused modules.

6.49. Printing statistics.

=== pulse_gen ===

   Number of wires:               1067
   Number of wire bits:           5487
   Number of public wires:        1067
   Number of public wire bits:    5487
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2384
     CCU2C                         405
     EHXPLLL                         1
     L6MUX21                        40
     LUT4                          983
     PFUMX                         141
     TRELLIS_FF                    814

6.50. Executing CHECK pass (checking for obvious problems).
checking module pulse_gen..
found and reported 0 problems.

6.51. Executing JSON backend.

End of script. Logfile hash: 356c8bcd92, CPU: user 2.95s system 0.08s, MEM: 269.11 MB peak
Yosys 0.9+3683 (git sha1 b7d46be4, clang 10.0.0-4ubuntu1 -fPIC -Os)
Time spent: 15% 1x abc (0 sec), 15% 1x autoname (0 sec), ...
